
acid mix usb bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a91c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800aac8  0800aac8  0001aac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800abd0  0800abd0  0001abd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800abd8  0800abd8  0001abd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800abdc  0800abdc  0001abdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  0800abe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
  8 .bss          0000d8e8  20000094  20000094  00020094  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000d97c  2000d97c  00020094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   000222fe  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004989  00000000  00000000  000423c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001108  00000000  00000000  00046d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f28  00000000  00000000  00047e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a0da  00000000  00000000  00048d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005594  00000000  00000000  00052e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000583ee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004498  00000000  00000000  0005846c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000094 	.word	0x20000094
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800aab0 	.word	0x0800aab0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000098 	.word	0x20000098
 80001e8:	0800aab0 	.word	0x0800aab0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <COMMAND_DOWNLOAD>:
  * @brief  IAP write memory
  * @param  None
  * @retval None
  */
void COMMAND_DOWNLOAD(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
    FRESULT fatfs_res = FR_OK;
 8000502:	2300      	movs	r3, #0
 8000504:	71fb      	strb	r3, [r7, #7]
    /* Open the binary file to be downloaded */
    fatfs_res = f_open(&fileR, DOWNLOAD_FILENAME, FA_READ);
 8000506:	2201      	movs	r2, #1
 8000508:	490e      	ldr	r1, [pc, #56]	; (8000544 <COMMAND_DOWNLOAD+0x48>)
 800050a:	480f      	ldr	r0, [pc, #60]	; (8000548 <COMMAND_DOWNLOAD+0x4c>)
 800050c:	f009 fa34 	bl	8009978 <f_open>
 8000510:	4603      	mov	r3, r0
 8000512:	71fb      	strb	r3, [r7, #7]
    if (fatfs_res == FR_OK)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10f      	bne.n	800053a <COMMAND_DOWNLOAD+0x3e>
    {
        uint32_t file_size = f_size(&fileR);
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <COMMAND_DOWNLOAD+0x4c>)
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	603b      	str	r3, [r7, #0]
        if (file_size > USER_FLASH_SIZE)
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
 8000526:	d808      	bhi.n	800053a <COMMAND_DOWNLOAD+0x3e>
        }
        else
        {
            /* Download On Going */
            /* Erase FLASH sectors to download image */
            if (execute_flash_erase(3,21) != 0x00)
 8000528:	2115      	movs	r1, #21
 800052a:	2003      	movs	r0, #3
 800052c:	f000 f9d6 	bl	80008dc <execute_flash_erase>
            {
                //flash erase error
            }
            /* Program flash memory */
            COMMAND_ProgramFlashMemory();
 8000530:	f000 f80c 	bl	800054c <COMMAND_ProgramFlashMemory>

            /* Close file and filesystem */
            f_close (&fileR);
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <COMMAND_DOWNLOAD+0x4c>)
 8000536:	f009 fdc8 	bl	800a0ca <f_close>
    }
    else
    {
        //file not available error
    }
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	0800aad8 	.word	0x0800aad8
 8000548:	20008100 	.word	0x20008100

0800054c <COMMAND_ProgramFlashMemory>:
  * @brief  Programs the internal Flash memory
  * @param  None
  * @retval None
  */
void COMMAND_ProgramFlashMemory(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
    __IO uint32_t programcounter = 0x00;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
    uint8_t readflag = 1;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
    uint16_t BytesRead;
    volatile FRESULT res;

    /* RAM Address Initialization */
    RamAddress = (uint32_t) & RAM_Buf;
 800055a:	4a2e      	ldr	r2, [pc, #184]	; (8000614 <COMMAND_ProgramFlashMemory+0xc8>)
 800055c:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <COMMAND_ProgramFlashMemory+0xcc>)
 800055e:	601a      	str	r2, [r3, #0]

    /* Erase address init */
    LastPGAddress = APPLICATION_ADDRESS;
 8000560:	4b2e      	ldr	r3, [pc, #184]	; (800061c <COMMAND_ProgramFlashMemory+0xd0>)
 8000562:	4a2f      	ldr	r2, [pc, #188]	; (8000620 <COMMAND_ProgramFlashMemory+0xd4>)
 8000564:	601a      	str	r2, [r3, #0]

    /* While file still contain data */
    while ((readflag == 1))
 8000566:	e04e      	b.n	8000606 <COMMAND_ProgramFlashMemory+0xba>
    {
        /* Read maximum 512 Kbyte from the selected file */
        res = f_read (&fileR, RAM_Buf, BUFFER_SIZE, (void *)&BytesRead);
 8000568:	1dbb      	adds	r3, r7, #6
 800056a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800056e:	4929      	ldr	r1, [pc, #164]	; (8000614 <COMMAND_ProgramFlashMemory+0xc8>)
 8000570:	482c      	ldr	r0, [pc, #176]	; (8000624 <COMMAND_ProgramFlashMemory+0xd8>)
 8000572:	f009 fbcd 	bl	8009d10 <f_read>
 8000576:	4603      	mov	r3, r0
 8000578:	717b      	strb	r3, [r7, #5]
        if(res)
 800057a:	797b      	ldrb	r3, [r7, #5]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <COMMAND_ProgramFlashMemory+0x3c>
        {
            HAL_Delay(1);
 8000582:	2001      	movs	r0, #1
 8000584:	f000 fc02 	bl	8000d8c <HAL_Delay>
        }

        /* Temp variable */
        TmpReadSize = BytesRead;
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	461a      	mov	r2, r3
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <COMMAND_ProgramFlashMemory+0xdc>)
 800058e:	601a      	str	r2, [r3, #0]

        /* The read data < "BUFFER_SIZE" Kbyte */
        if (TmpReadSize < BUFFER_SIZE)
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <COMMAND_ProgramFlashMemory+0xdc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000598:	d201      	bcs.n	800059e <COMMAND_ProgramFlashMemory+0x52>
        {
            readflag = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]
        }

        /* Program flash memory */
        HAL_FLASH_Unlock();
 800059e:	f000 fdc1 	bl	8001124 <HAL_FLASH_Unlock>
        for (programcounter = TmpReadSize; programcounter != 0; programcounter -= 4)
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <COMMAND_ProgramFlashMemory+0xdc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	e021      	b.n	80005ee <COMMAND_ProgramFlashMemory+0xa2>
        {
            TmpProgramCounter = programcounter;
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	4a1f      	ldr	r2, [pc, #124]	; (800062c <COMMAND_ProgramFlashMemory+0xe0>)
 80005ae:	6013      	str	r3, [r2, #0]
            /* Write word into flash memory */
            if (FLASH_If_ProgramWord((LastPGAddress - TmpProgramCounter + TmpReadSize), \
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <COMMAND_ProgramFlashMemory+0xd0>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <COMMAND_ProgramFlashMemory+0xe0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	1ad2      	subs	r2, r2, r3
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <COMMAND_ProgramFlashMemory+0xdc>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	18d0      	adds	r0, r2, r3
            *(__IO uint32_t *)(RamAddress - programcounter + TmpReadSize)) != HAL_OK)
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <COMMAND_ProgramFlashMemory+0xcc>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1ad2      	subs	r2, r2, r3
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <COMMAND_ProgramFlashMemory+0xdc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4413      	add	r3, r2
            if (FLASH_If_ProgramWord((LastPGAddress - TmpProgramCounter + TmpReadSize), \
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	f000 f82d 	bl	8000630 <FLASH_If_ProgramWord>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d000      	beq.n	80005de <COMMAND_ProgramFlashMemory+0x92>
            {
                /* Toggle Red LED in infinite loop: Flash programming error */
                while(1);
 80005dc:	e7fe      	b.n	80005dc <COMMAND_ProgramFlashMemory+0x90>
            }

            if(programcounter < 4)
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d801      	bhi.n	80005e8 <COMMAND_ProgramFlashMemory+0x9c>
            {
                programcounter = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	60bb      	str	r3, [r7, #8]
        for (programcounter = TmpReadSize; programcounter != 0; programcounter -= 4)
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	3b04      	subs	r3, #4
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1da      	bne.n	80005aa <COMMAND_ProgramFlashMemory+0x5e>
            }
        }

        HAL_FLASH_Lock();
 80005f4:	f000 fdb8 	bl	8001168 <HAL_FLASH_Lock>
        /* Update last programmed address value */
        LastPGAddress = LastPGAddress + TmpReadSize;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <COMMAND_ProgramFlashMemory+0xd0>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <COMMAND_ProgramFlashMemory+0xdc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4413      	add	r3, r2
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <COMMAND_ProgramFlashMemory+0xd0>)
 8000604:	6013      	str	r3, [r2, #0]
    while ((readflag == 1))
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d0ad      	beq.n	8000568 <COMMAND_ProgramFlashMemory+0x1c>
    }
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000b0 	.word	0x200000b0
 8000618:	200080b8 	.word	0x200080b8
 800061c:	20000000 	.word	0x20000000
 8000620:	0800c000 	.word	0x0800c000
 8000624:	20008100 	.word	0x20008100
 8000628:	200080b4 	.word	0x200080b4
 800062c:	200080b0 	.word	0x200080b0

08000630 <FLASH_If_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_If_ProgramWord(uint32_t Address, uint32_t Data)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 800063a:	2308      	movs	r3, #8
 800063c:	60fb      	str	r3, [r7, #12]


  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	f04f 0400 	mov.w	r4, #0
 8000644:	461a      	mov	r2, r3
 8000646:	4623      	mov	r3, r4
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	2002      	movs	r0, #2
 800064c:	f000 fd16 	bl	800107c <HAL_FLASH_Program>
 8000650:	4603      	mov	r3, r0
 8000652:	60fb      	str	r3, [r7, #12]


  return status;
 8000654:	68fb      	ldr	r3, [r7, #12]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
	...

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fb1f 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f97f 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f9e9 	bl	8000a44 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000672:	f004 fb3d 	bl	8004cf0 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000676:	f009 fdaf 	bl	800a1d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  MX_CRC_Init();
 800067a:	f000 f8c3 	bl	8000804 <MX_CRC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t usb_start_ms = HAL_GetTick();
 800067e:	f000 fb79 	bl	8000d74 <HAL_GetTick>
 8000682:	60f8      	str	r0, [r7, #12]
  uint32_t usb_current_ms = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  uint32_t startup_timeout = 1500;
 8000688:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800068c:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process(); //handles status update of usb, if this is not running, usb never changes
 800068e:	f009 fdc9 	bl	800a224 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    switch(Appli_state) //handle the status that is updated in above HOST_Process()
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <main+0x104>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d85d      	bhi.n	8000756 <main+0xf6>
 800069a:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <main+0x40>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	080006b1 	.word	0x080006b1
 80006a4:	080006ff 	.word	0x080006ff
 80006a8:	0800071d 	.word	0x0800071d
 80006ac:	08000749 	.word	0x08000749
    {
    case APPLICATION_IDLE:
    	usb_current_ms = HAL_GetTick();
 80006b0:	f000 fb60 	bl	8000d74 <HAL_GetTick>
 80006b4:	60b8      	str	r0, [r7, #8]
    	if((usb_current_ms - usb_start_ms) > startup_timeout)
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	1ad2      	subs	r2, r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d94b      	bls.n	800075a <main+0xfa>
    	{
    		uint32_t valCrc32 = calcCrc32((uint8_t*)APPLICATION_ADDRESS, (0x1F4000));
 80006c2:	f44f 11fa 	mov.w	r1, #2048000	; 0x1f4000
 80006c6:	4828      	ldr	r0, [pc, #160]	; (8000768 <main+0x108>)
 80006c8:	f000 f8d2 	bl	8000870 <calcCrc32>
 80006cc:	6038      	str	r0, [r7, #0]
//			if (valCrc32 == 0) //forced pass for debugging
    		if(1)
			{
				/* Check Vector Table: Test if user code is programmed starting from address
				"APPLICATION_ADDRESS" */
				if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20020000)
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <main+0x108>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <main+0x10c>)
 80006d4:	4013      	ands	r3, r2
 80006d6:	4a26      	ldr	r2, [pc, #152]	; (8000770 <main+0x110>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d102      	bne.n	80006e2 <main+0x82>
				{
					bootloader_jump_to_user_app();
 80006dc:	f000 f878 	bl	80007d0 <bootloader_jump_to_user_app>
					HAL_Delay(600);
					flash_status_led(4);
				}
			}
    	}
    	break;
 80006e0:	e03b      	b.n	800075a <main+0xfa>
					HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	4822      	ldr	r0, [pc, #136]	; (8000774 <main+0x114>)
 80006ea:	f001 f973 	bl	80019d4 <HAL_GPIO_WritePin>
						HAL_Delay(600);
 80006ee:	f44f 7016 	mov.w	r0, #600	; 0x258
 80006f2:	f000 fb4b 	bl	8000d8c <HAL_Delay>
						flash_status_led(5);
 80006f6:	2005      	movs	r0, #5
 80006f8:	f000 f842 	bl	8000780 <flash_status_led>
						HAL_Delay(600);
 80006fc:	e7f7      	b.n	80006ee <main+0x8e>
    case APPLICATION_START:
    	if(f_mount(&myUsbFatFS, (TCHAR const*)USBHPath, 0) == FR_OK)
 80006fe:	2200      	movs	r2, #0
 8000700:	491d      	ldr	r1, [pc, #116]	; (8000778 <main+0x118>)
 8000702:	481e      	ldr	r0, [pc, #120]	; (800077c <main+0x11c>)
 8000704:	f009 f8f2 	bl	80098ec <f_mount>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d127      	bne.n	800075e <main+0xfe>
    	{
    		//turn status led on when usb is plugged in
    		HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000714:	4817      	ldr	r0, [pc, #92]	; (8000774 <main+0x114>)
 8000716:	f001 f95d 	bl	80019d4 <HAL_GPIO_WritePin>
    	}
        break;
 800071a:	e020      	b.n	800075e <main+0xfe>
    case APPLICATION_READY:
    	COMMAND_DOWNLOAD();
 800071c:	f7ff feee 	bl	80004fc <COMMAND_DOWNLOAD>
    	HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <main+0x114>)
 8000728:	f001 f954 	bl	80019d4 <HAL_GPIO_WritePin>
    	while(1)
    	{
    		HAL_Delay(600);
 800072c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000730:	f000 fb2c 	bl	8000d8c <HAL_Delay>
    		HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <main+0x114>)
 800073c:	f001 f94a 	bl	80019d4 <HAL_GPIO_WritePin>
    		flash_status_led(3);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f81d 	bl	8000780 <flash_status_led>
    		HAL_Delay(600);
 8000746:	e7f1      	b.n	800072c <main+0xcc>
    	}
        break;
    case APPLICATION_DISCONNECT:
    	//turn status led off when usb is unplugged
    	HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <main+0x114>)
 8000750:	f001 f940 	bl	80019d4 <HAL_GPIO_WritePin>
        break;
 8000754:	e004      	b.n	8000760 <main+0x100>
    default:
    	//default handler
    	break;
 8000756:	bf00      	nop
 8000758:	e799      	b.n	800068e <main+0x2e>
    	break;
 800075a:	bf00      	nop
 800075c:	e797      	b.n	800068e <main+0x2e>
        break;
 800075e:	bf00      	nop
    MX_USB_HOST_Process(); //handles status update of usb, if this is not running, usb never changes
 8000760:	e795      	b.n	800068e <main+0x2e>
 8000762:	bf00      	nop
 8000764:	200080f4 	.word	0x200080f4
 8000768:	0800c000 	.word	0x0800c000
 800076c:	2ffe0000 	.word	0x2ffe0000
 8000770:	20020000 	.word	0x20020000
 8000774:	40020c00 	.word	0x40020c00
 8000778:	2000b230 	.word	0x2000b230
 800077c:	2000a1d4 	.word	0x2000a1d4

08000780 <flash_status_led>:
  }
  /* USER CODE END 3 */
}

static void flash_status_led(uint8_t num_of_flashes)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	for(uint8_t flashes = 0; flashes < num_of_flashes; flashes++)
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	e014      	b.n	80007ba <flash_status_led+0x3a>
	{
		HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <flash_status_led+0x4c>)
 8000798:	f001 f91c 	bl	80019d4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800079c:	20c8      	movs	r0, #200	; 0xc8
 800079e:	f000 faf5 	bl	8000d8c <HAL_Delay>
		HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a8:	4808      	ldr	r0, [pc, #32]	; (80007cc <flash_status_led+0x4c>)
 80007aa:	f001 f913 	bl	80019d4 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80007ae:	20c8      	movs	r0, #200	; 0xc8
 80007b0:	f000 faec 	bl	8000d8c <HAL_Delay>
	for(uint8_t flashes = 0; flashes < num_of_flashes; flashes++)
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	3301      	adds	r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	7bfa      	ldrb	r2, [r7, #15]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d3e6      	bcc.n	8000790 <flash_status_led+0x10>
	}
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40020c00 	.word	0x40020c00

080007d0 <bootloader_jump_to_user_app>:
{
	return 0;
}

static void bootloader_jump_to_user_app(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
    //just a function pointer to hold the address of the reset handler of the user app
    void (*app_reset_handler)(void);

    //1. configure the MSP by reading the value from the base address of the sector 2
    uint32_t msp_value = *(volatile uint32_t *)APPLICATION_ADDRESS;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <bootloader_jump_to_user_app+0x2c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	f383 8808 	msr	MSP, r3

    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

    //now fetch the reset handler address of the user app
    //from the location FLASH_SECTOR2_BASE_ADDRESS+4
    uint32_t resethandler_address = *(volatile uint32_t *) (APPLICATION_ADDRESS + 4);
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <bootloader_jump_to_user_app+0x30>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	60bb      	str	r3, [r7, #8]

    app_reset_handler = (void*) resethandler_address;//this line give void pointer error, suppressed in compiler options!!
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	607b      	str	r3, [r7, #4]

    //jump to reset handler of user application
    //bootloader hands off control to user application
    app_reset_handler();
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4798      	blx	r3
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	0800c000 	.word	0x0800c000
 8000800:	0800c004 	.word	0x0800c004

08000804 <MX_CRC_Init>:

/* CRC init function */
void MX_CRC_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_CRC_Init+0x20>)
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <MX_CRC_Init+0x24>)
 800080c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_CRC_Init+0x20>)
 8000810:	f000 fbed 	bl	8000fee <HAL_CRC_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800081a:	f000 f9a7 	bl	8000b6c <Error_Handler>
  }

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000a164 	.word	0x2000a164
 8000828:	40023000 	.word	0x40023000

0800082c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <HAL_CRC_MspInit+0x3c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d10d      	bne.n	800085a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_CRC_MspInit+0x40>)
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_CRC_MspInit+0x40>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_CRC_MspInit+0x40>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023000 	.word	0x40023000
 800086c:	40023800 	.word	0x40023800

08000870 <calcCrc32>:
  /* USER CODE END CRC_MspDeInit 1 */
  }
}

static uint32_t calcCrc32(uint8_t* data, uint32_t len)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
   uint32_t* pBuffer = (uint32_t*) data;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	617b      	str	r3, [r7, #20]
   uint32_t BufferLength = len/4;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	089b      	lsrs	r3, r3, #2
 8000882:	613b      	str	r3, [r7, #16]
   uint32_t index = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
   uint32_t uwCRCValue = 0xff;
 8000888:	23ff      	movs	r3, #255	; 0xff
 800088a:	61bb      	str	r3, [r7, #24]

   //reset crc unit
    __HAL_CRC_DR_RESET(&hcrc);
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <calcCrc32+0x68>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <calcCrc32+0x68>)
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	6892      	ldr	r2, [r2, #8]
 8000896:	f042 0201 	orr.w	r2, r2, #1
 800089a:	609a      	str	r2, [r3, #8]

   for(index = 0; index < BufferLength; index++)
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
 80008a0:	e010      	b.n	80008c4 <calcCrc32+0x54>
   {
     uint32_t i_data = pBuffer[index];
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	4413      	add	r3, r2
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
     uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2201      	movs	r2, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	4808      	ldr	r0, [pc, #32]	; (80008d8 <calcCrc32+0x68>)
 80008b8:	f000 fbb5 	bl	8001026 <HAL_CRC_Accumulate>
 80008bc:	61b8      	str	r0, [r7, #24]
   for(index = 0; index < BufferLength; index++)
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3301      	adds	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	69fa      	ldr	r2, [r7, #28]
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d3ea      	bcc.n	80008a2 <calcCrc32+0x32>

   }

   return uwCRCValue;
 80008cc:	69bb      	ldr	r3, [r7, #24]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000a164 	.word	0x2000a164

080008dc <execute_flash_erase>:
    return rdp_status;

}

uint8_t execute_flash_erase(uint8_t sector_number, uint8_t number_of_sector)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	460a      	mov	r2, r1
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	4613      	mov	r3, r2
 80008ea:	71bb      	strb	r3, [r7, #6]
    FLASH_EraseInitTypeDef flashErase_handle;
    uint32_t sectorError;
    HAL_StatusTypeDef status;

    if(number_of_sector > 23)
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	2b17      	cmp	r3, #23
 80008f0:	d901      	bls.n	80008f6 <execute_flash_erase+0x1a>
    {
        return INVALID_SECTOR;
 80008f2:	2304      	movs	r3, #4
 80008f4:	e035      	b.n	8000962 <execute_flash_erase+0x86>
    }

    if( (sector_number == 0xff) || (sector_number <= 7))
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2bff      	cmp	r3, #255	; 0xff
 80008fa:	d002      	beq.n	8000902 <execute_flash_erase+0x26>
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b07      	cmp	r3, #7
 8000900:	d82e      	bhi.n	8000960 <execute_flash_erase+0x84>
    {
        if(sector_number == (uint8_t) 0xff)
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2bff      	cmp	r3, #255	; 0xff
 8000906:	d102      	bne.n	800090e <execute_flash_erase+0x32>
        {
            flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000908:	2301      	movs	r3, #1
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	e012      	b.n	8000934 <execute_flash_erase+0x58>
        }
        else
        {
            uint8_t remaining_sector = 24 - sector_number;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f1c3 0318 	rsb	r3, r3, #24
 8000914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( number_of_sector > remaining_sector)
 8000918:	79ba      	ldrb	r2, [r7, #6]
 800091a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800091e:	429a      	cmp	r2, r3
 8000920:	d902      	bls.n	8000928 <execute_flash_erase+0x4c>
            {
                number_of_sector = remaining_sector;
 8000922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000926:	71bb      	strb	r3, [r7, #6]
            }
            flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
            flashErase_handle.Sector = sector_number;
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	61bb      	str	r3, [r7, #24]
            flashErase_handle.NbSectors = number_of_sector;
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	61fb      	str	r3, [r7, #28]

        }
        flashErase_handle.Banks = FLASH_BANK_BOTH;
 8000934:	2303      	movs	r3, #3
 8000936:	617b      	str	r3, [r7, #20]

        HAL_FLASH_Unlock();
 8000938:	f000 fbf4 	bl	8001124 <HAL_FLASH_Unlock>
        flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
        status = HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000940:	f107 020c 	add.w	r2, r7, #12
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fd58 	bl	8001400 <HAL_FLASHEx_Erase>
 8000950:	4603      	mov	r3, r0
 8000952:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        HAL_FLASH_Lock();
 8000956:	f000 fc07 	bl	8001168 <HAL_FLASH_Lock>

        return status;
 800095a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800095e:	e000      	b.n	8000962 <execute_flash_erase+0x86>
    }

    return INVALID_SECTOR;
 8000960:	2304      	movs	r3, #4
}
 8000962:	4618      	mov	r0, r3
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	; 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	2230      	movs	r2, #48	; 0x30
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f009 ffd1 	bl	800a922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <SystemClock_Config+0xd0>)
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <SystemClock_Config+0xd0>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <SystemClock_Config+0xd0>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <SystemClock_Config+0xd4>)
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <SystemClock_Config+0xd4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <SystemClock_Config+0xd4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009e0:	2319      	movs	r3, #25
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ee:	2307      	movs	r3, #7
 80009f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 fd8e 	bl	8003518 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a02:	f000 f8b3 	bl	8000b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fff0 	bl	8003a08 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a2e:	f000 f89d 	bl	8000b6c <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4a3f      	ldr	r2, [pc, #252]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000a60:	4b3e      	ldr	r3, [pc, #248]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4a38      	ldr	r2, [pc, #224]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000a7c:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000ab4:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <MX_GPIO_Init+0x118>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aec:	481c      	ldr	r0, [pc, #112]	; (8000b60 <MX_GPIO_Init+0x11c>)
 8000aee:	f000 ff71 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(usb_power_en_GPIO_Port, usb_power_en_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2101      	movs	r1, #1
 8000af6:	481b      	ldr	r0, [pc, #108]	; (8000b64 <MX_GPIO_Init+0x120>)
 8000af8:	f000 ff6c 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(usb_power_en_2_GPIO_Port, usb_power_en_2_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b02:	4819      	ldr	r0, [pc, #100]	; (8000b68 <MX_GPIO_Init+0x124>)
 8000b04:	f000 ff66 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : status_led_Pin */
  GPIO_InitStruct.Pin = status_led_Pin;
 8000b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(status_led_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480f      	ldr	r0, [pc, #60]	; (8000b60 <MX_GPIO_Init+0x11c>)
 8000b22:	f000 fdad 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pin : usb_power_en_Pin */
  GPIO_InitStruct.Pin = usb_power_en_Pin;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(usb_power_en_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <MX_GPIO_Init+0x120>)
 8000b3e:	f000 fd9f 	bl	8001680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = usb_power_en_2_Pin;
 8000b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(usb_power_en_2_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <MX_GPIO_Init+0x124>)
 8000b50:	f000 fd96 	bl	8001680 <HAL_GPIO_Init>


}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	40022000 	.word	0x40022000
 8000b68:	40020400 	.word	0x40020400

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <Error_Handler+0x6>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f89c 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <OTG_FS_IRQHandler+0x10>)
 8000c1e:	f001 f95d 	bl	8001edc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000d674 	.word	0x2000d674

08000c2c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x50>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x16>
		heap_end = &end;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <_sbrk+0x50>)
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <_sbrk+0x54>)
 8000c40:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <_sbrk+0x50>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <_sbrk+0x50>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	466a      	mov	r2, sp
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d907      	bls.n	8000c66 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000c56:	f009 fe1f 	bl	800a898 <__errno>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	e006      	b.n	8000c74 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <_sbrk+0x50>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <_sbrk+0x50>)
 8000c70:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200080bc 	.word	0x200080bc
 8000c80:	2000d97c 	.word	0x2000d97c

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_Init+0x40>)
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_Init+0x40>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_Init+0x40>)
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_Init+0x40>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_Init+0x40>)
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_Init+0x40>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f94b 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	200f      	movs	r0, #15
 8000cd8:	f000 f808 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff ff4a 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023c00 	.word	0x40023c00

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x54>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x58>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f963 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00e      	b.n	8000d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d80a      	bhi.n	8000d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f92b 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d2c:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_InitTick+0x5c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000004 	.word	0x20000004
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	20000008 	.word	0x20000008

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	2000000c 	.word	0x2000000c
 8000d70:	2000b20c 	.word	0x2000b20c

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2000b20c 	.word	0x2000b20c

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff ffee 	bl	8000d74 <HAL_GetTick>
 8000d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d005      	beq.n	8000db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_Delay+0x40>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db2:	bf00      	nop
 8000db4:	f7ff ffde 	bl	8000d74 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1ad2      	subs	r2, r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d3f7      	bcc.n	8000db4 <HAL_Delay+0x28>
  {
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000000c 	.word	0x2000000c

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	4909      	ldr	r1, [pc, #36]	; (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	095b      	lsrs	r3, r3, #5
 8000e4e:	79fa      	ldrb	r2, [r7, #7]
 8000e50:	f002 021f 	and.w	r2, r2, #31
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	490d      	ldr	r1, [pc, #52]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	4909      	ldr	r1, [pc, #36]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	401a      	ands	r2, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	1e59      	subs	r1, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff90 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff2b 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff40 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff90 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5f 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff33 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa2 	bl	8000f28 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e00e      	b.n	800101e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	795b      	ldrb	r3, [r3, #5]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fc0b 	bl	800082c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001026:	b480      	push	{r7}
 8001028:	b087      	sub	sp, #28
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2202      	movs	r2, #2
 800103a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e00a      	b.n	8001058 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	440a      	add	r2, r1
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3f0      	bcc.n	8001042 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2201      	movs	r2, #1
 800106c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800106e:	693b      	ldr	r3, [r7, #16]
}
 8001070:	4618      	mov	r0, r3
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_FLASH_Program+0xa0>)
 8001090:	7e1b      	ldrb	r3, [r3, #24]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <HAL_FLASH_Program+0x1e>
 8001096:	2302      	movs	r3, #2
 8001098:	e03b      	b.n	8001112 <HAL_FLASH_Program+0x96>
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_FLASH_Program+0xa0>)
 800109c:	2201      	movs	r2, #1
 800109e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010a4:	f000 f870 	bl	8001188 <FLASH_WaitForLastOperation>
 80010a8:	4603      	mov	r3, r0
 80010aa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d12b      	bne.n	800110a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d105      	bne.n	80010c4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80010b8:	783b      	ldrb	r3, [r7, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	68b8      	ldr	r0, [r7, #8]
 80010be:	f000 f917 	bl	80012f0 <FLASH_Program_Byte>
 80010c2:	e016      	b.n	80010f2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d105      	bne.n	80010d6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80010ca:	883b      	ldrh	r3, [r7, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f000 f8ea 	bl	80012a8 <FLASH_Program_HalfWord>
 80010d4:	e00d      	b.n	80010f2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d105      	bne.n	80010e8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	4619      	mov	r1, r3
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f000 f8bf 	bl	8001264 <FLASH_Program_Word>
 80010e6:	e004      	b.n	80010f2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80010e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ec:	68b8      	ldr	r0, [r7, #8]
 80010ee:	f000 f88b 	bl	8001208 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010f6:	f000 f847 	bl	8001188 <FLASH_WaitForLastOperation>
 80010fa:	4603      	mov	r3, r0
 80010fc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_FLASH_Program+0xa4>)
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <HAL_FLASH_Program+0xa4>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_FLASH_Program+0xa0>)
 800110c:	2200      	movs	r2, #0
 800110e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001110:	7dfb      	ldrb	r3, [r7, #23]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000b210 	.word	0x2000b210
 8001120:	40023c00 	.word	0x40023c00

08001124 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_FLASH_Unlock+0x38>)
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da0b      	bge.n	800114e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_FLASH_Unlock+0x38>)
 8001138:	4a09      	ldr	r2, [pc, #36]	; (8001160 <HAL_FLASH_Unlock+0x3c>)
 800113a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <HAL_FLASH_Unlock+0x38>)
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_FLASH_Unlock+0x40>)
 8001140:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_FLASH_Unlock+0x38>)
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	da01      	bge.n	800114e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800114e:	79fb      	ldrb	r3, [r7, #7]
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40023c00 	.word	0x40023c00
 8001160:	45670123 	.word	0x45670123
 8001164:	cdef89ab 	.word	0xcdef89ab

08001168 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800116c:	4a05      	ldr	r2, [pc, #20]	; (8001184 <HAL_FLASH_Lock+0x1c>)
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_FLASH_Lock+0x1c>)
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001176:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40023c00 	.word	0x40023c00

08001188 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <FLASH_WaitForLastOperation+0x78>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800119a:	f7ff fdeb 	bl	8000d74 <HAL_GetTick>
 800119e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80011a0:	e010      	b.n	80011c4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d00c      	beq.n	80011c4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <FLASH_WaitForLastOperation+0x38>
 80011b0:	f7ff fde0 	bl	8000d74 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad2      	subs	r2, r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d901      	bls.n	80011c4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e019      	b.n	80011f8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <FLASH_WaitForLastOperation+0x7c>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1e8      	bne.n	80011a2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <FLASH_WaitForLastOperation+0x7c>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <FLASH_WaitForLastOperation+0x7c>)
 80011de:	2201      	movs	r2, #1
 80011e0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <FLASH_WaitForLastOperation+0x7c>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80011ee:	f000 f8a1 	bl	8001334 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
  
}  
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000b210 	.word	0x2000b210
 8001204:	40023c00 	.word	0x40023c00

08001208 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001208:	b4f0      	push	{r4, r5, r6, r7}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <FLASH_Program_DoubleWord+0x58>)
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <FLASH_Program_DoubleWord+0x58>)
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800121e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <FLASH_Program_DoubleWord+0x58>)
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <FLASH_Program_DoubleWord+0x58>)
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800122a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800122c:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <FLASH_Program_DoubleWord+0x58>)
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <FLASH_Program_DoubleWord+0x58>)
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800123e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3304      	adds	r3, #4
 8001246:	461a      	mov	r2, r3
 8001248:	e897 0018 	ldmia.w	r7, {r3, r4}
 800124c:	0025      	movs	r5, r4
 800124e:	2600      	movs	r6, #0
 8001250:	462b      	mov	r3, r5
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bcf0      	pop	{r4, r5, r6, r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023c00 	.word	0x40023c00

08001264 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800126e:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001278:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <FLASH_Program_Word+0x40>)
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <FLASH_Program_Word+0x40>)
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001284:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <FLASH_Program_Word+0x40>)
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <FLASH_Program_Word+0x40>)
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <FLASH_Program_HalfWord+0x44>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	801a      	strh	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <FLASH_Program_Byte+0x40>)
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <FLASH_Program_Byte+0x40>)
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001306:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001308:	4a09      	ldr	r2, [pc, #36]	; (8001330 <FLASH_Program_Byte+0x40>)
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <FLASH_Program_Byte+0x40>)
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <FLASH_Program_Byte+0x40>)
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <FLASH_Program_Byte+0x40>)
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	701a      	strb	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00

08001334 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 800134e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001352:	2210      	movs	r2, #16
 8001354:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d008      	beq.n	8001374 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	4a24      	ldr	r2, [pc, #144]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 800136c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001370:	2220      	movs	r2, #32
 8001372:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 800138a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 800138e:	2240      	movs	r2, #64	; 0x40
 8001390:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013a8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <FLASH_SetErrorCode+0xc8>)
 80013e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <FLASH_SetErrorCode+0xc4>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	60da      	str	r2, [r3, #12]
  }
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40023c00 	.word	0x40023c00
 80013fc:	2000b210 	.word	0x2000b210

08001400 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_FLASHEx_Erase+0xdc>)
 8001414:	7e1b      	ldrb	r3, [r3, #24]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_FLASHEx_Erase+0x1e>
 800141a:	2302      	movs	r3, #2
 800141c:	e05a      	b.n	80014d4 <HAL_FLASHEx_Erase+0xd4>
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <HAL_FLASHEx_Erase+0xdc>)
 8001420:	2201      	movs	r2, #1
 8001422:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001424:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001428:	f7ff feae 	bl	8001188 <FLASH_WaitForLastOperation>
 800142c:	4603      	mov	r3, r0
 800142e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d14a      	bne.n	80014cc <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d117      	bne.n	8001476 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4619      	mov	r1, r3
 8001452:	4610      	mov	r0, r2
 8001454:	f000 f846 	bl	80014e4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001458:	f24c 3050 	movw	r0, #50000	; 0xc350
 800145c:	f7ff fe94 	bl	8001188 <FLASH_WaitForLastOperation>
 8001460:	4603      	mov	r3, r0
 8001462:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001464:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <HAL_FLASHEx_Erase+0xe0>)
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_FLASHEx_Erase+0xe0>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800146e:	f023 0304 	bic.w	r3, r3, #4
 8001472:	6113      	str	r3, [r2, #16]
 8001474:	e028      	b.n	80014c8 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	e01c      	b.n	80014b8 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4619      	mov	r1, r3
 8001486:	68b8      	ldr	r0, [r7, #8]
 8001488:	f000 f866 	bl	8001558 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800148c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001490:	f7ff fe7a 	bl	8001188 <FLASH_WaitForLastOperation>
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_FLASHEx_Erase+0xe0>)
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_FLASHEx_Erase+0xe0>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80014a2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	601a      	str	r2, [r3, #0]
          break;
 80014b0:	e00a      	b.n	80014c8 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3301      	adds	r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	441a      	add	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8da      	bhi.n	800147e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80014c8:	f000 f894 	bl	80015f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_FLASHEx_Erase+0xdc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	761a      	strb	r2, [r3, #24]

  return status;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000b210 	.word	0x2000b210
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <FLASH_MassErase+0x70>)
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <FLASH_MassErase+0x70>)
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014fa:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d108      	bne.n	8001514 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001502:	4a14      	ldr	r2, [pc, #80]	; (8001554 <FLASH_MassErase+0x70>)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <FLASH_MassErase+0x70>)
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6113      	str	r3, [r2, #16]
 8001512:	e00f      	b.n	8001534 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d106      	bne.n	8001528 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <FLASH_MassErase+0x70>)
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <FLASH_MassErase+0x70>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6113      	str	r3, [r2, #16]
 8001526:	e005      	b.n	8001534 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <FLASH_MassErase+0x70>)
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <FLASH_MassErase+0x70>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001532:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <FLASH_MassErase+0x70>)
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <FLASH_MassErase+0x70>)
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	4313      	orrs	r3, r2
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	610b      	str	r3, [r1, #16]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023c00 	.word	0x40023c00

08001558 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d102      	bne.n	8001574 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e010      	b.n	8001596 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d103      	bne.n	8001582 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e009      	b.n	8001596 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d103      	bne.n	8001590 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e002      	b.n	8001596 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001590:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001594:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b0b      	cmp	r3, #11
 800159a:	d902      	bls.n	80015a2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3304      	adds	r3, #4
 80015a0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <FLASH_Erase_Sector+0x98>)
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <FLASH_Erase_Sector+0x98>)
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80015ae:	4910      	ldr	r1, [pc, #64]	; (80015f0 <FLASH_Erase_Sector+0x98>)
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <FLASH_Erase_Sector+0x98>)
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80015ba:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <FLASH_Erase_Sector+0x98>)
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <FLASH_Erase_Sector+0x98>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80015c6:	490a      	ldr	r1, [pc, #40]	; (80015f0 <FLASH_Erase_Sector+0x98>)
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <FLASH_Erase_Sector+0x98>)
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <FLASH_Erase_Sector+0x98>)
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <FLASH_Erase_Sector+0x98>)
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	6113      	str	r3, [r2, #16]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <FLASH_FlushCaches+0x88>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001600:	2b00      	cmp	r3, #0
 8001602:	d017      	beq.n	8001634 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001604:	4a1d      	ldr	r2, [pc, #116]	; (800167c <FLASH_FlushCaches+0x88>)
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <FLASH_FlushCaches+0x88>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800160e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001610:	4a1a      	ldr	r2, [pc, #104]	; (800167c <FLASH_FlushCaches+0x88>)
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <FLASH_FlushCaches+0x88>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4a17      	ldr	r2, [pc, #92]	; (800167c <FLASH_FlushCaches+0x88>)
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <FLASH_FlushCaches+0x88>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001626:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <FLASH_FlushCaches+0x88>)
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <FLASH_FlushCaches+0x88>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001632:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <FLASH_FlushCaches+0x88>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	2b00      	cmp	r3, #0
 800163e:	d017      	beq.n	8001670 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <FLASH_FlushCaches+0x88>)
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <FLASH_FlushCaches+0x88>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800164a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <FLASH_FlushCaches+0x88>)
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <FLASH_FlushCaches+0x88>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <FLASH_FlushCaches+0x88>)
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <FLASH_FlushCaches+0x88>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001662:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <FLASH_FlushCaches+0x88>)
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <FLASH_FlushCaches+0x88>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166e:	6013      	str	r3, [r2, #0]
  }
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e177      	b.n	800198c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800169c:	2201      	movs	r2, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	f040 8166 	bne.w	8001986 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d005      	beq.n	80016d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d130      	bne.n	8001734 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 0201 	and.w	r2, r3, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b03      	cmp	r3, #3
 800173e:	d017      	beq.n	8001770 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d123      	bne.n	80017c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	08da      	lsrs	r2, r3, #3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3208      	adds	r2, #8
 8001784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	69b9      	ldr	r1, [r7, #24]
 80017c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80c0 	beq.w	8001986 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4a65      	ldr	r2, [pc, #404]	; (80019a0 <HAL_GPIO_Init+0x320>)
 800180c:	4b64      	ldr	r3, [pc, #400]	; (80019a0 <HAL_GPIO_Init+0x320>)
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <HAL_GPIO_Init+0x320>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001822:	4a60      	ldr	r2, [pc, #384]	; (80019a4 <HAL_GPIO_Init+0x324>)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <HAL_GPIO_Init+0x328>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d037      	beq.n	80018be <HAL_GPIO_Init+0x23e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a56      	ldr	r2, [pc, #344]	; (80019ac <HAL_GPIO_Init+0x32c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d031      	beq.n	80018ba <HAL_GPIO_Init+0x23a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a55      	ldr	r2, [pc, #340]	; (80019b0 <HAL_GPIO_Init+0x330>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d02b      	beq.n	80018b6 <HAL_GPIO_Init+0x236>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a54      	ldr	r2, [pc, #336]	; (80019b4 <HAL_GPIO_Init+0x334>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d025      	beq.n	80018b2 <HAL_GPIO_Init+0x232>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a53      	ldr	r2, [pc, #332]	; (80019b8 <HAL_GPIO_Init+0x338>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01f      	beq.n	80018ae <HAL_GPIO_Init+0x22e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a52      	ldr	r2, [pc, #328]	; (80019bc <HAL_GPIO_Init+0x33c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d019      	beq.n	80018aa <HAL_GPIO_Init+0x22a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <HAL_GPIO_Init+0x340>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0x226>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a50      	ldr	r2, [pc, #320]	; (80019c4 <HAL_GPIO_Init+0x344>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00d      	beq.n	80018a2 <HAL_GPIO_Init+0x222>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4f      	ldr	r2, [pc, #316]	; (80019c8 <HAL_GPIO_Init+0x348>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <HAL_GPIO_Init+0x21e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4e      	ldr	r2, [pc, #312]	; (80019cc <HAL_GPIO_Init+0x34c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_GPIO_Init+0x21a>
 8001896:	2309      	movs	r3, #9
 8001898:	e012      	b.n	80018c0 <HAL_GPIO_Init+0x240>
 800189a:	230a      	movs	r3, #10
 800189c:	e010      	b.n	80018c0 <HAL_GPIO_Init+0x240>
 800189e:	2308      	movs	r3, #8
 80018a0:	e00e      	b.n	80018c0 <HAL_GPIO_Init+0x240>
 80018a2:	2307      	movs	r3, #7
 80018a4:	e00c      	b.n	80018c0 <HAL_GPIO_Init+0x240>
 80018a6:	2306      	movs	r3, #6
 80018a8:	e00a      	b.n	80018c0 <HAL_GPIO_Init+0x240>
 80018aa:	2305      	movs	r3, #5
 80018ac:	e008      	b.n	80018c0 <HAL_GPIO_Init+0x240>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x240>
 80018b2:	2303      	movs	r3, #3
 80018b4:	e004      	b.n	80018c0 <HAL_GPIO_Init+0x240>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e002      	b.n	80018c0 <HAL_GPIO_Init+0x240>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_Init+0x240>
 80018be:	2300      	movs	r3, #0
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	f002 0203 	and.w	r2, r2, #3
 80018c6:	0092      	lsls	r2, r2, #2
 80018c8:	4093      	lsls	r3, r2
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d0:	4934      	ldr	r1, [pc, #208]	; (80019a4 <HAL_GPIO_Init+0x324>)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3302      	adds	r3, #2
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018de:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <HAL_GPIO_Init+0x350>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001902:	4a33      	ldr	r2, [pc, #204]	; (80019d0 <HAL_GPIO_Init+0x350>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_GPIO_Init+0x350>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800192c:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <HAL_GPIO_Init+0x350>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_GPIO_Init+0x350>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <HAL_GPIO_Init+0x350>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800195c:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_GPIO_Init+0x350>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001980:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <HAL_GPIO_Init+0x350>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3301      	adds	r3, #1
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	2b0f      	cmp	r3, #15
 8001990:	f67f ae84 	bls.w	800169c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001994:	bf00      	nop
 8001996:	3724      	adds	r7, #36	; 0x24
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40013800 	.word	0x40013800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020c00 	.word	0x40020c00
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40021400 	.word	0x40021400
 80019c0:	40021800 	.word	0x40021800
 80019c4:	40021c00 	.word	0x40021c00
 80019c8:	40022000 	.word	0x40022000
 80019cc:	40022400 	.word	0x40022400
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f0:	e003      	b.n	80019fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	041a      	lsls	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	619a      	str	r2, [r3, #24]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a08:	b08f      	sub	sp, #60	; 0x3c
 8001a0a:	af0a      	add	r7, sp, #40	; 0x28
 8001a0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e054      	b.n	8001ac2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f008 fc2e 	bl	800a294 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 f9e4 	bl	8003e24 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	687e      	ldr	r6, [r7, #4]
 8001a64:	466d      	mov	r5, sp
 8001a66:	f106 0410 	add.w	r4, r6, #16
 8001a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a7a:	1d33      	adds	r3, r6, #4
 8001a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a7e:	6838      	ldr	r0, [r7, #0]
 8001a80:	f002 f95e 	bl	8003d40 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 f9db 	bl	8003e46 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	687e      	ldr	r6, [r7, #4]
 8001a98:	466d      	mov	r5, sp
 8001a9a:	f106 0410 	add.w	r4, r6, #16
 8001a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aae:	1d33      	adds	r3, r6, #4
 8001ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab2:	6838      	ldr	r0, [r7, #0]
 8001ab4:	f002 fb40 	bl	8004138 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001aca:	b590      	push	{r4, r7, lr}
 8001acc:	b089      	sub	sp, #36	; 0x24
 8001ace:	af04      	add	r7, sp, #16
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	4608      	mov	r0, r1
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4603      	mov	r3, r0
 8001ada:	70fb      	strb	r3, [r7, #3]
 8001adc:	460b      	mov	r3, r1
 8001ade:	70bb      	strb	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_HCD_HC_Init+0x28>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e076      	b.n	8001be0 <HAL_HCD_HC_Init+0x116>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	333d      	adds	r3, #61	; 0x3d
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	3338      	adds	r3, #56	; 0x38
 8001b1a:	787a      	ldrb	r2, [r7, #1]
 8001b1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	212c      	movs	r1, #44	; 0x2c
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	3340      	adds	r3, #64	; 0x40
 8001b2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b2e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3339      	adds	r3, #57	; 0x39
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	333f      	adds	r3, #63	; 0x3f
 8001b50:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	78ba      	ldrb	r2, [r7, #2]
 8001b5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b5e:	b2d0      	uxtb	r0, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	212c      	movs	r1, #44	; 0x2c
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	333a      	adds	r3, #58	; 0x3a
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	da09      	bge.n	8001b8c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	333b      	adds	r3, #59	; 0x3b
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e008      	b.n	8001b9e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	212c      	movs	r1, #44	; 0x2c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	333b      	adds	r3, #59	; 0x3b
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	212c      	movs	r1, #44	; 0x2c
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	4413      	add	r3, r2
 8001baa:	333c      	adds	r3, #60	; 0x3c
 8001bac:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bb0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	787c      	ldrb	r4, [r7, #1]
 8001bb8:	78ba      	ldrb	r2, [r7, #2]
 8001bba:	78f9      	ldrb	r1, [r7, #3]
 8001bbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bbe:	9302      	str	r3, [sp, #8]
 8001bc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4623      	mov	r3, r4
 8001bce:	f002 fc37 	bl	8004440 <USB_HC_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}

08001be8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_HCD_HC_Halt+0x1e>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e00f      	b.n	8001c26 <HAL_HCD_HC_Halt+0x3e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fe81 	bl	800491e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	4608      	mov	r0, r1
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	70fb      	strb	r3, [r7, #3]
 8001c42:	460b      	mov	r3, r1
 8001c44:	70bb      	strb	r3, [r7, #2]
 8001c46:	4613      	mov	r3, r2
 8001c48:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	333b      	adds	r3, #59	; 0x3b
 8001c58:	78ba      	ldrb	r2, [r7, #2]
 8001c5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	212c      	movs	r1, #44	; 0x2c
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	333f      	adds	r3, #63	; 0x3f
 8001c6a:	787a      	ldrb	r2, [r7, #1]
 8001c6c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c6e:	7c3b      	ldrb	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d112      	bne.n	8001c9a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3342      	adds	r3, #66	; 0x42
 8001c82:	2203      	movs	r2, #3
 8001c84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	333d      	adds	r3, #61	; 0x3d
 8001c94:	7f3a      	ldrb	r2, [r7, #28]
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	e008      	b.n	8001cac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	212c      	movs	r1, #44	; 0x2c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3342      	adds	r3, #66	; 0x42
 8001ca8:	2202      	movs	r2, #2
 8001caa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	f200 80c6 	bhi.w	8001e40 <HAL_HCD_HC_SubmitRequest+0x210>
 8001cb4:	a201      	add	r2, pc, #4	; (adr r2, 8001cbc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cba:	bf00      	nop
 8001cbc:	08001ccd 	.word	0x08001ccd
 8001cc0:	08001e2d 	.word	0x08001e2d
 8001cc4:	08001d31 	.word	0x08001d31
 8001cc8:	08001daf 	.word	0x08001daf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ccc:	7c3b      	ldrb	r3, [r7, #16]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	f040 80b8 	bne.w	8001e44 <HAL_HCD_HC_SubmitRequest+0x214>
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 80b4 	bne.w	8001e44 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001cdc:	8b3b      	ldrh	r3, [r7, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d108      	bne.n	8001cf4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3355      	adds	r3, #85	; 0x55
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	212c      	movs	r1, #44	; 0x2c
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	3355      	adds	r3, #85	; 0x55
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3342      	adds	r3, #66	; 0x42
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d1a:	e093      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3342      	adds	r3, #66	; 0x42
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	701a      	strb	r2, [r3, #0]
      break;
 8001d2e:	e089      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d30:	78bb      	ldrb	r3, [r7, #2]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11d      	bne.n	8001d72 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3355      	adds	r3, #85	; 0x55
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3342      	adds	r3, #66	; 0x42
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d5c:	e073      	b.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3342      	adds	r3, #66	; 0x42
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	701a      	strb	r2, [r3, #0]
      break;
 8001d70:	e069      	b.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3354      	adds	r3, #84	; 0x54
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3342      	adds	r3, #66	; 0x42
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
      break;
 8001d98:	e055      	b.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3342      	adds	r3, #66	; 0x42
 8001da8:	2202      	movs	r2, #2
 8001daa:	701a      	strb	r2, [r3, #0]
      break;
 8001dac:	e04b      	b.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001dae:	78bb      	ldrb	r3, [r7, #2]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d11d      	bne.n	8001df0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	212c      	movs	r1, #44	; 0x2c
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3355      	adds	r3, #85	; 0x55
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3342      	adds	r3, #66	; 0x42
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001dda:	e034      	b.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	3342      	adds	r3, #66	; 0x42
 8001dea:	2202      	movs	r2, #2
 8001dec:	701a      	strb	r2, [r3, #0]
      break;
 8001dee:	e02a      	b.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3354      	adds	r3, #84	; 0x54
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3342      	adds	r3, #66	; 0x42
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
      break;
 8001e16:	e016      	b.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3342      	adds	r3, #66	; 0x42
 8001e26:	2202      	movs	r2, #2
 8001e28:	701a      	strb	r2, [r3, #0]
      break;
 8001e2a:	e00c      	b.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	3342      	adds	r3, #66	; 0x42
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
      break;
 8001e3e:	e002      	b.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e44:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	3344      	adds	r3, #68	; 0x44
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	8b3a      	ldrh	r2, [r7, #24]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	202c      	movs	r0, #44	; 0x2c
 8001e60:	fb00 f303 	mul.w	r3, r0, r3
 8001e64:	440b      	add	r3, r1
 8001e66:	334c      	adds	r3, #76	; 0x4c
 8001e68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	3360      	adds	r3, #96	; 0x60
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3350      	adds	r3, #80	; 0x50
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	3339      	adds	r3, #57	; 0x39
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	212c      	movs	r1, #44	; 0x2c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3361      	adds	r3, #97	; 0x61
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	222c      	movs	r2, #44	; 0x2c
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	3338      	adds	r3, #56	; 0x38
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	18d1      	adds	r1, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f002 fbce 	bl	800466c <USB_HC_StartXfer>
 8001ed0:	4603      	mov	r3, r0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop

08001edc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 f8e0 	bl	80040b8 <USB_GetMode>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	f040 80f6 	bne.w	80020ec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 f8c4 	bl	8004092 <USB_ReadInterrupts>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80ec 	beq.w	80020ea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 f8bb 	bl	8004092 <USB_ReadInterrupts>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f26:	d104      	bne.n	8001f32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 f8ab 	bl	8004092 <USB_ReadInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f46:	d104      	bne.n	8001f52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f002 f89b 	bl	8004092 <USB_ReadInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f66:	d104      	bne.n	8001f72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f002 f88b 	bl	8004092 <USB_ReadInterrupts>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d103      	bne.n	8001f8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 f87d 	bl	8004092 <USB_ReadInterrupts>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fa2:	d11c      	bne.n	8001fde <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10f      	bne.n	8001fde <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	6938      	ldr	r0, [r7, #16]
 8001fc2:	f001 ff8d 	bl	8003ee0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001fc6:	6938      	ldr	r0, [r7, #16]
 8001fc8:	f001 ffae 	bl	8003f28 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 f968 	bl	80042a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f008 f9d9 	bl	800a390 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f002 f855 	bl	8004092 <USB_ReadInterrupts>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff2:	d102      	bne.n	8001ffa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f001 fa1c 	bl	8003432 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 f847 	bl	8004092 <USB_ReadInterrupts>
 8002004:	4603      	mov	r3, r0
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b08      	cmp	r3, #8
 800200c:	d106      	bne.n	800201c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f008 f9a2 	bl	800a358 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2208      	movs	r2, #8
 800201a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f002 f836 	bl	8004092 <USB_ReadInterrupts>
 8002026:	4603      	mov	r3, r0
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b10      	cmp	r3, #16
 800202e:	d101      	bne.n	8002034 <HAL_HCD_IRQHandler+0x158>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_HCD_IRQHandler+0x15a>
 8002034:	2300      	movs	r3, #0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d012      	beq.n	8002060 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	6992      	ldr	r2, [r2, #24]
 8002044:	f022 0210 	bic.w	r2, r2, #16
 8002048:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f001 f920 	bl	8003290 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	6992      	ldr	r2, [r2, #24]
 800205a:	f042 0210 	orr.w	r2, r2, #16
 800205e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f002 f814 	bl	8004092 <USB_ReadInterrupts>
 800206a:	4603      	mov	r3, r0
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002074:	d13a      	bne.n	80020ec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f002 fc3e 	bl	80048fc <USB_HC_ReadInterrupt>
 8002080:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e025      	b.n	80020d4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d018      	beq.n	80020ce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b2:	d106      	bne.n	80020c2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8ab 	bl	8002216 <HCD_HC_IN_IRQHandler>
 80020c0:	e005      	b.n	80020ce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fcd4 	bl	8002a76 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d8d4      	bhi.n	8002088 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e6:	615a      	str	r2, [r3, #20]
 80020e8:	e000      	b.n	80020ec <HAL_HCD_IRQHandler+0x210>
      return;
 80020ea:	bf00      	nop
    }
  }
}
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_HCD_Start+0x16>
 8002104:	2302      	movs	r3, #2
 8002106:	e013      	b.n	8002130 <HAL_HCD_Start+0x3e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	4618      	mov	r0, r3
 8002118:	f002 f92e 	bl	8004378 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f001 fe6e 	bl	8003e02 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_HCD_Stop+0x16>
 800214a:	2302      	movs	r3, #2
 800214c:	e00d      	b.n	800216a <HAL_HCD_Stop+0x32>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fd42 	bl	8004be4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f002 f8ce 	bl	8004320 <USB_ResetPort>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3360      	adds	r3, #96	; 0x60
 80021a8:	781b      	ldrb	r3, [r3, #0]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80021c2:	78fb      	ldrb	r3, [r7, #3]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3350      	adds	r3, #80	; 0x50
 80021d0:	681b      	ldr	r3, [r3, #0]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f002 f916 	bl	800441c <USB_GetCurrentFrame>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f002 f8f1 	bl	80043ee <USB_GetHostSpeed>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b04      	cmp	r3, #4
 8002244:	d11a      	bne.n	800227c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	461a      	mov	r2, r3
 8002254:	2304      	movs	r3, #4
 8002256:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	4619      	mov	r1, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	60cb      	str	r3, [r1, #12]
 800227a:	e105      	b.n	8002488 <HCD_HC_IN_IRQHandler+0x272>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4413      	add	r3, r2
 8002284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002292:	d12c      	bne.n	80022ee <HCD_HC_IN_IRQHandler+0xd8>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3361      	adds	r3, #97	; 0x61
 80022b6:	2207      	movs	r2, #7
 80022b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	4619      	mov	r1, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 fb19 	bl	800491e <USB_HC_Halt>
 80022ec:	e0cc      	b.n	8002488 <HCD_HC_IN_IRQHandler+0x272>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b20      	cmp	r3, #32
 8002302:	d109      	bne.n	8002318 <HCD_HC_IN_IRQHandler+0x102>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002310:	461a      	mov	r2, r3
 8002312:	2320      	movs	r3, #32
 8002314:	6093      	str	r3, [r2, #8]
 8002316:	e0b7      	b.n	8002488 <HCD_HC_IN_IRQHandler+0x272>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b08      	cmp	r3, #8
 800232c:	d134      	bne.n	8002398 <HCD_HC_IN_IRQHandler+0x182>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	4619      	mov	r1, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3361      	adds	r3, #97	; 0x61
 800235e:	2205      	movs	r2, #5
 8002360:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	461a      	mov	r2, r3
 8002370:	2310      	movs	r3, #16
 8002372:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2308      	movs	r3, #8
 8002384:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fac4 	bl	800491e <USB_HC_Halt>
 8002396:	e077      	b.n	8002488 <HCD_HC_IN_IRQHandler+0x272>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d135      	bne.n	800241c <HCD_HC_IN_IRQHandler+0x206>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	4619      	mov	r1, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3361      	adds	r3, #97	; 0x61
 80023e0:	2208      	movs	r2, #8
 80023e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	461a      	mov	r2, r3
 80023f2:	2310      	movs	r3, #16
 80023f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	461a      	mov	r2, r3
 8002404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002408:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f002 fa82 	bl	800491e <USB_HC_Halt>
 800241a:	e035      	b.n	8002488 <HCD_HC_IN_IRQHandler+0x272>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	2b80      	cmp	r3, #128	; 0x80
 8002430:	d12a      	bne.n	8002488 <HCD_HC_IN_IRQHandler+0x272>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	4619      	mov	r1, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	60cb      	str	r3, [r1, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3361      	adds	r3, #97	; 0x61
 8002462:	2206      	movs	r2, #6
 8002464:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f002 fa54 	bl	800491e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	461a      	mov	r2, r3
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800249e:	d123      	bne.n	80024e8 <HCD_HC_IN_IRQHandler+0x2d2>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	4619      	mov	r1, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 fa26 	bl	800491e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	461a      	mov	r2, r3
 80024e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80024e6:	e2c2      	b.n	8002a6e <HCD_HC_IN_IRQHandler+0x858>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	f040 811f 	bne.w	800273e <HCD_HC_IN_IRQHandler+0x528>
    if (hhcd->Init.dma_enable != 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d019      	beq.n	800253c <HCD_HC_IN_IRQHandler+0x326>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3348      	adds	r3, #72	; 0x48
 8002516:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	0159      	lsls	r1, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	440b      	add	r3, r1
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800252a:	1ad2      	subs	r2, r2, r3
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	202c      	movs	r0, #44	; 0x2c
 8002532:	fb00 f303 	mul.w	r3, r0, r3
 8002536:	440b      	add	r3, r1
 8002538:	3350      	adds	r3, #80	; 0x50
 800253a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3361      	adds	r3, #97	; 0x61
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	335c      	adds	r3, #92	; 0x5c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	2301      	movs	r3, #1
 8002570:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	333f      	adds	r3, #63	; 0x3f
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <HCD_HC_IN_IRQHandler+0x384>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	333f      	adds	r3, #63	; 0x3f
 8002594:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002596:	2b02      	cmp	r3, #2
 8002598:	d122      	bne.n	80025e0 <HCD_HC_IN_IRQHandler+0x3ca>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	4619      	mov	r1, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 f9a9 	bl	800491e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	461a      	mov	r2, r3
 80025da:	2310      	movs	r3, #16
 80025dc:	6093      	str	r3, [r2, #8]
 80025de:	e069      	b.n	80026b4 <HCD_HC_IN_IRQHandler+0x49e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	333f      	adds	r3, #63	; 0x3f
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d129      	bne.n	8002648 <HCD_HC_IN_IRQHandler+0x432>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	4619      	mov	r1, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002614:	600b      	str	r3, [r1, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3360      	adds	r3, #96	; 0x60
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	b2d8      	uxtb	r0, r3
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3360      	adds	r3, #96	; 0x60
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4601      	mov	r1, r0
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f007 feb3 	bl	800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002646:	e035      	b.n	80026b4 <HCD_HC_IN_IRQHandler+0x49e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	333f      	adds	r3, #63	; 0x3f
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d12b      	bne.n	80026b4 <HCD_HC_IN_IRQHandler+0x49e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	3360      	adds	r3, #96	; 0x60
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	3354      	adds	r3, #84	; 0x54
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f083 0301 	eor.w	r3, r3, #1
 8002682:	b2d8      	uxtb	r0, r3
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3354      	adds	r3, #84	; 0x54
 8002692:	4602      	mov	r2, r0
 8002694:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	b2d8      	uxtb	r0, r3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3360      	adds	r3, #96	; 0x60
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	4601      	mov	r1, r0
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f007 fe7c 	bl	800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d12b      	bne.n	8002714 <HCD_HC_IN_IRQHandler+0x4fe>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3348      	adds	r3, #72	; 0x48
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	202c      	movs	r0, #44	; 0x2c
 80026d2:	fb00 f202 	mul.w	r2, r0, r2
 80026d6:	440a      	add	r2, r1
 80026d8:	3240      	adds	r2, #64	; 0x40
 80026da:	8812      	ldrh	r2, [r2, #0]
 80026dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 81c2 	beq.w	8002a6e <HCD_HC_IN_IRQHandler+0x858>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	3354      	adds	r3, #84	; 0x54
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2d8      	uxtb	r0, r3
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3354      	adds	r3, #84	; 0x54
 800270e:	4602      	mov	r2, r0
 8002710:	701a      	strb	r2, [r3, #0]
}
 8002712:	e1ac      	b.n	8002a6e <HCD_HC_IN_IRQHandler+0x858>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3354      	adds	r3, #84	; 0x54
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2d8      	uxtb	r0, r3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	3354      	adds	r3, #84	; 0x54
 8002738:	4602      	mov	r2, r0
 800273a:	701a      	strb	r2, [r3, #0]
}
 800273c:	e197      	b.n	8002a6e <HCD_HC_IN_IRQHandler+0x858>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	f040 8108 	bne.w	8002966 <HCD_HC_IN_IRQHandler+0x750>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	4619      	mov	r1, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 0302 	bic.w	r3, r3, #2
 8002776:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3361      	adds	r3, #97	; 0x61
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d109      	bne.n	80027a0 <HCD_HC_IN_IRQHandler+0x58a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	3360      	adds	r3, #96	; 0x60
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	e0c9      	b.n	8002934 <HCD_HC_IN_IRQHandler+0x71e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3361      	adds	r3, #97	; 0x61
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d109      	bne.n	80027c8 <HCD_HC_IN_IRQHandler+0x5b2>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3360      	adds	r3, #96	; 0x60
 80027c2:	2205      	movs	r2, #5
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e0b5      	b.n	8002934 <HCD_HC_IN_IRQHandler+0x71e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3361      	adds	r3, #97	; 0x61
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b06      	cmp	r3, #6
 80027da:	d009      	beq.n	80027f0 <HCD_HC_IN_IRQHandler+0x5da>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3361      	adds	r3, #97	; 0x61
 80027ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d150      	bne.n	8002892 <HCD_HC_IN_IRQHandler+0x67c>
      hhcd->hc[ch_num].ErrCnt++;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	335c      	adds	r3, #92	; 0x5c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	202c      	movs	r0, #44	; 0x2c
 8002808:	fb00 f303 	mul.w	r3, r0, r3
 800280c:	440b      	add	r3, r1
 800280e:	335c      	adds	r3, #92	; 0x5c
 8002810:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	335c      	adds	r3, #92	; 0x5c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d912      	bls.n	800284c <HCD_HC_IN_IRQHandler+0x636>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	335c      	adds	r3, #92	; 0x5c
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	212c      	movs	r1, #44	; 0x2c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	3360      	adds	r3, #96	; 0x60
 8002846:	2204      	movs	r2, #4
 8002848:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800284a:	e073      	b.n	8002934 <HCD_HC_IN_IRQHandler+0x71e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	2202      	movs	r2, #2
 800285c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002874:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800287c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002890:	e050      	b.n	8002934 <HCD_HC_IN_IRQHandler+0x71e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3361      	adds	r3, #97	; 0x61
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d122      	bne.n	80028ec <HCD_HC_IN_IRQHandler+0x6d6>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	3360      	adds	r3, #96	; 0x60
 80028b4:	2202      	movs	r2, #2
 80028b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e023      	b.n	8002934 <HCD_HC_IN_IRQHandler+0x71e>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3361      	adds	r3, #97	; 0x61
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b07      	cmp	r3, #7
 80028fe:	d119      	bne.n	8002934 <HCD_HC_IN_IRQHandler+0x71e>
      hhcd->hc[ch_num].ErrCnt++;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	335c      	adds	r3, #92	; 0x5c
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	202c      	movs	r0, #44	; 0x2c
 8002918:	fb00 f303 	mul.w	r3, r0, r3
 800291c:	440b      	add	r3, r1
 800291e:	335c      	adds	r3, #92	; 0x5c
 8002920:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	3360      	adds	r3, #96	; 0x60
 8002930:	2204      	movs	r2, #4
 8002932:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	461a      	mov	r2, r3
 8002942:	2302      	movs	r3, #2
 8002944:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	b2d8      	uxtb	r0, r3
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3360      	adds	r3, #96	; 0x60
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	4601      	mov	r1, r0
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f007 fd24 	bl	800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002964:	e083      	b.n	8002a6e <HCD_HC_IN_IRQHandler+0x858>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b10      	cmp	r3, #16
 800297a:	d178      	bne.n	8002a6e <HCD_HC_IN_IRQHandler+0x858>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	333f      	adds	r3, #63	; 0x3f
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d122      	bne.n	80029d6 <HCD_HC_IN_IRQHandler+0x7c0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	335c      	adds	r3, #92	; 0x5c
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	4619      	mov	r1, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 ffa5 	bl	800491e <USB_HC_Halt>
 80029d4:	e042      	b.n	8002a5c <HCD_HC_IN_IRQHandler+0x846>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	333f      	adds	r3, #63	; 0x3f
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HCD_HC_IN_IRQHandler+0x7e8>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	333f      	adds	r3, #63	; 0x3f
 80029f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d12e      	bne.n	8002a5c <HCD_HC_IN_IRQHandler+0x846>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	335c      	adds	r3, #92	; 0x5c
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d121      	bne.n	8002a5c <HCD_HC_IN_IRQHandler+0x846>
        hhcd->hc[ch_num].state = HC_NAK;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3361      	adds	r3, #97	; 0x61
 8002a26:	2203      	movs	r2, #3
 8002a28:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	4619      	mov	r1, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	60cb      	str	r3, [r1, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f001 ff61 	bl	800491e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	6093      	str	r3, [r2, #8]
}
 8002a6e:	bf00      	nop
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b088      	sub	sp, #32
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d11a      	bne.n	8002adc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    /* ... */
  }
}
 8002ada:	e3d5      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x812>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d13f      	bne.n	8002b72 <HCD_HC_OUT_IRQHandler+0xfc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	461a      	mov	r2, r3
 8002b00:	2320      	movs	r3, #32
 8002b02:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	333d      	adds	r3, #61	; 0x3d
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	f040 83b7 	bne.w	8003288 <HCD_HC_OUT_IRQHandler+0x812>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	333d      	adds	r3, #61	; 0x3d
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3360      	adds	r3, #96	; 0x60
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fed7 	bl	800491e <USB_HC_Halt>
}
 8002b70:	e38a      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x812>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b88:	d123      	bne.n	8002bd2 <HCD_HC_OUT_IRQHandler+0x15c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	4619      	mov	r1, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 feb1 	bl	800491e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bce:	6093      	str	r3, [r2, #8]
}
 8002bd0:	e35a      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x812>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d151      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x216>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	335c      	adds	r3, #92	; 0x5c
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d111      	bne.n	8002c34 <HCD_HC_OUT_IRQHandler+0x1be>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	333d      	adds	r3, #61	; 0x3d
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2340      	movs	r3, #64	; 0x40
 8002c32:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	4619      	mov	r1, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 fe5c 	bl	800491e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	461a      	mov	r2, r3
 8002c74:	2301      	movs	r3, #1
 8002c76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3361      	adds	r3, #97	; 0x61
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
}
 8002c8a:	e2fd      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x812>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	2b40      	cmp	r3, #64	; 0x40
 8002ca0:	d13d      	bne.n	8002d1e <HCD_HC_OUT_IRQHandler+0x2a8>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	3361      	adds	r3, #97	; 0x61
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	333d      	adds	r3, #61	; 0x3d
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	335c      	adds	r3, #92	; 0x5c
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fe0a 	bl	800491e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	461a      	mov	r2, r3
 8002d18:	2340      	movs	r3, #64	; 0x40
 8002d1a:	6093      	str	r3, [r2, #8]
}
 8002d1c:	e2b4      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x812>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d12b      	bne.n	8002d8c <HCD_HC_OUT_IRQHandler+0x316>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	461a      	mov	r2, r3
 8002d42:	2308      	movs	r3, #8
 8002d44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	4619      	mov	r1, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fdd3 	bl	800491e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3361      	adds	r3, #97	; 0x61
 8002d86:	2205      	movs	r2, #5
 8002d88:	701a      	strb	r2, [r3, #0]
}
 8002d8a:	e27d      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x812>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d151      	bne.n	8002e46 <HCD_HC_OUT_IRQHandler+0x3d0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	335c      	adds	r3, #92	; 0x5c
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3361      	adds	r3, #97	; 0x61
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	333d      	adds	r3, #61	; 0x3d
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d112      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0x38a>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	333c      	adds	r3, #60	; 0x3c
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0x38a>
        hhcd->hc[ch_num].do_ping = 1U;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	333d      	adds	r3, #61	; 0x3d
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 fd76 	bl	800491e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2310      	movs	r3, #16
 8002e42:	6093      	str	r3, [r2, #8]
}
 8002e44:	e220      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x812>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d176      	bne.n	8002f4a <HCD_HC_OUT_IRQHandler+0x4d4>
    if (hhcd->Init.dma_enable == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d122      	bne.n	8002eaa <HCD_HC_OUT_IRQHandler+0x434>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3361      	adds	r3, #97	; 0x61
 8002e72:	2206      	movs	r2, #6
 8002e74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	4619      	mov	r1, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	60cb      	str	r3, [r1, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 fd3b 	bl	800491e <USB_HC_Halt>
 8002ea8:	e045      	b.n	8002f36 <HCD_HC_OUT_IRQHandler+0x4c0>
      hhcd->hc[ch_num].ErrCnt++;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	335c      	adds	r3, #92	; 0x5c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	202c      	movs	r0, #44	; 0x2c
 8002ec2:	fb00 f303 	mul.w	r3, r0, r3
 8002ec6:	440b      	add	r3, r1
 8002ec8:	335c      	adds	r3, #92	; 0x5c
 8002eca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	335c      	adds	r3, #92	; 0x5c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d921      	bls.n	8002f24 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	335c      	adds	r3, #92	; 0x5c
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3360      	adds	r3, #96	; 0x60
 8002f00:	2204      	movs	r2, #4
 8002f02:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	b2d8      	uxtb	r0, r3
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	212c      	movs	r1, #44	; 0x2c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	3360      	adds	r3, #96	; 0x60
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f007 fa45 	bl	800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f22:	e008      	b.n	8002f36 <HCD_HC_OUT_IRQHandler+0x4c0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3360      	adds	r3, #96	; 0x60
 8002f32:	2202      	movs	r2, #2
 8002f34:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	461a      	mov	r2, r3
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	6093      	str	r3, [r2, #8]
}
 8002f48:	e19e      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x812>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f60:	d135      	bne.n	8002fce <HCD_HC_OUT_IRQHandler+0x558>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	4619      	mov	r1, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f043 0302 	orr.w	r3, r3, #2
 8002f82:	60cb      	str	r3, [r1, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 fcc5 	bl	800491e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3361      	adds	r3, #97	; 0x61
 8002fc8:	2208      	movs	r2, #8
 8002fca:	701a      	strb	r2, [r3, #0]
}
 8002fcc:	e15c      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x812>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	f040 8151 	bne.w	8003288 <HCD_HC_OUT_IRQHandler+0x812>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 0302 	bic.w	r3, r3, #2
 8003006:	60cb      	str	r3, [r1, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3361      	adds	r3, #97	; 0x61
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d17d      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3360      	adds	r3, #96	; 0x60
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	333f      	adds	r3, #63	; 0x3f
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d00a      	beq.n	8003058 <HCD_HC_OUT_IRQHandler+0x5e2>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	333f      	adds	r3, #63	; 0x3f
 8003050:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003052:	2b03      	cmp	r3, #3
 8003054:	f040 8100 	bne.w	8003258 <HCD_HC_OUT_IRQHandler+0x7e2>
        if (hhcd->Init.dma_enable == 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d113      	bne.n	8003088 <HCD_HC_OUT_IRQHandler+0x612>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3355      	adds	r3, #85	; 0x55
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f083 0301 	eor.w	r3, r3, #1
 8003074:	b2d8      	uxtb	r0, r3
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3355      	adds	r3, #85	; 0x55
 8003084:	4602      	mov	r2, r0
 8003086:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 80e3 	bne.w	8003258 <HCD_HC_OUT_IRQHandler+0x7e2>
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	334c      	adds	r3, #76	; 0x4c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80d8 	beq.w	8003258 <HCD_HC_OUT_IRQHandler+0x7e2>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	334c      	adds	r3, #76	; 0x4c
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	202c      	movs	r0, #44	; 0x2c
 80030be:	fb00 f202 	mul.w	r2, r0, r2
 80030c2:	440a      	add	r2, r1
 80030c4:	3240      	adds	r2, #64	; 0x40
 80030c6:	8812      	ldrh	r2, [r2, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	202c      	movs	r0, #44	; 0x2c
 80030d2:	fb00 f202 	mul.w	r2, r0, r2
 80030d6:	440a      	add	r2, r1
 80030d8:	3240      	adds	r2, #64	; 0x40
 80030da:	8812      	ldrh	r2, [r2, #0]
 80030dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
          if ((num_packets & 1U) != 0U)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80b5 	beq.w	8003258 <HCD_HC_OUT_IRQHandler+0x7e2>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3355      	adds	r3, #85	; 0x55
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2d8      	uxtb	r0, r3
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3355      	adds	r3, #85	; 0x55
 8003112:	4602      	mov	r2, r0
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e09f      	b.n	8003258 <HCD_HC_OUT_IRQHandler+0x7e2>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3361      	adds	r3, #97	; 0x61
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d109      	bne.n	8003140 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	3360      	adds	r3, #96	; 0x60
 800313a:	2202      	movs	r2, #2
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e08b      	b.n	8003258 <HCD_HC_OUT_IRQHandler+0x7e2>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3361      	adds	r3, #97	; 0x61
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d109      	bne.n	8003168 <HCD_HC_OUT_IRQHandler+0x6f2>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	3360      	adds	r3, #96	; 0x60
 8003162:	2202      	movs	r2, #2
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e077      	b.n	8003258 <HCD_HC_OUT_IRQHandler+0x7e2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3361      	adds	r3, #97	; 0x61
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b05      	cmp	r3, #5
 800317a:	d109      	bne.n	8003190 <HCD_HC_OUT_IRQHandler+0x71a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3360      	adds	r3, #96	; 0x60
 800318a:	2205      	movs	r2, #5
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	e063      	b.n	8003258 <HCD_HC_OUT_IRQHandler+0x7e2>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	212c      	movs	r1, #44	; 0x2c
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	3361      	adds	r3, #97	; 0x61
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	d009      	beq.n	80031b8 <HCD_HC_OUT_IRQHandler+0x742>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	3361      	adds	r3, #97	; 0x61
 80031b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d14f      	bne.n	8003258 <HCD_HC_OUT_IRQHandler+0x7e2>
      hhcd->hc[ch_num].ErrCnt++;
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	335c      	adds	r3, #92	; 0x5c
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	202c      	movs	r0, #44	; 0x2c
 80031d0:	fb00 f303 	mul.w	r3, r0, r3
 80031d4:	440b      	add	r3, r1
 80031d6:	335c      	adds	r3, #92	; 0x5c
 80031d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	335c      	adds	r3, #92	; 0x5c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d912      	bls.n	8003214 <HCD_HC_OUT_IRQHandler+0x79e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	335c      	adds	r3, #92	; 0x5c
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3360      	adds	r3, #96	; 0x60
 800320e:	2204      	movs	r2, #4
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e021      	b.n	8003258 <HCD_HC_OUT_IRQHandler+0x7e2>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3360      	adds	r3, #96	; 0x60
 8003222:	2202      	movs	r2, #2
 8003224:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800323c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003244:	60fb      	str	r3, [r7, #12]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4413      	add	r3, r2
 800324e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003252:	461a      	mov	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	461a      	mov	r2, r3
 8003266:	2302      	movs	r3, #2
 8003268:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	b2d8      	uxtb	r0, r3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3360      	adds	r3, #96	; 0x60
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	4601      	mov	r1, r0
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f007 f892 	bl	800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003288:	bf00      	nop
 800328a:	3720      	adds	r7, #32
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	0c5b      	lsrs	r3, r3, #17
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d003      	beq.n	80032d4 <HCD_RXQLVL_IRQHandler+0x44>
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	f000 80a9 	beq.w	8003424 <HCD_RXQLVL_IRQHandler+0x194>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032d2:	e0aa      	b.n	800342a <HCD_RXQLVL_IRQHandler+0x19a>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80a6 	beq.w	8003428 <HCD_RXQLVL_IRQHandler+0x198>
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3344      	adds	r3, #68	; 0x44
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 809b 	beq.w	8003428 <HCD_RXQLVL_IRQHandler+0x198>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3350      	adds	r3, #80	; 0x50
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	441a      	add	r2, r3
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	202c      	movs	r0, #44	; 0x2c
 800330c:	fb00 f303 	mul.w	r3, r0, r3
 8003310:	440b      	add	r3, r1
 8003312:	334c      	adds	r3, #76	; 0x4c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d87a      	bhi.n	8003410 <HCD_RXQLVL_IRQHandler+0x180>
          (void)USB_ReadPacket(hhcd->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	3344      	adds	r3, #68	; 0x44
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	b292      	uxth	r2, r2
 8003332:	4619      	mov	r1, r3
 8003334:	f000 fe56 	bl	8003fe4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3344      	adds	r3, #68	; 0x44
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	441a      	add	r2, r3
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	202c      	movs	r0, #44	; 0x2c
 8003352:	fb00 f303 	mul.w	r3, r0, r3
 8003356:	440b      	add	r3, r1
 8003358:	3344      	adds	r3, #68	; 0x44
 800335a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3350      	adds	r3, #80	; 0x50
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	441a      	add	r2, r3
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	202c      	movs	r0, #44	; 0x2c
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	440b      	add	r3, r1
 800337c:	3350      	adds	r3, #80	; 0x50
 800337e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	0cdb      	lsrs	r3, r3, #19
 8003390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003394:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	3340      	adds	r3, #64	; 0x40
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d13c      	bne.n	8003428 <HCD_RXQLVL_IRQHandler+0x198>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d039      	beq.n	8003428 <HCD_RXQLVL_IRQHandler+0x198>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033d2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e0:	461a      	mov	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3354      	adds	r3, #84	; 0x54
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	f083 0301 	eor.w	r3, r3, #1
 80033fa:	b2d8      	uxtb	r0, r3
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3354      	adds	r3, #84	; 0x54
 800340a:	4602      	mov	r2, r0
 800340c:	701a      	strb	r2, [r3, #0]
      break;
 800340e:	e00b      	b.n	8003428 <HCD_RXQLVL_IRQHandler+0x198>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3360      	adds	r3, #96	; 0x60
 800341e:	2204      	movs	r2, #4
 8003420:	701a      	strb	r2, [r3, #0]
      break;
 8003422:	e001      	b.n	8003428 <HCD_RXQLVL_IRQHandler+0x198>
      break;
 8003424:	bf00      	nop
 8003426:	e000      	b.n	800342a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003428:	bf00      	nop
  }
}
 800342a:	bf00      	nop
 800342c:	3728      	adds	r7, #40	; 0x28
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800345e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d10b      	bne.n	8003482 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d102      	bne.n	800347a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f006 ff7d 	bl	800a374 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b08      	cmp	r3, #8
 800348a:	d132      	bne.n	80034f2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f043 0308 	orr.w	r3, r3, #8
 8003492:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b04      	cmp	r3, #4
 800349c:	d126      	bne.n	80034ec <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d113      	bne.n	80034ce <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034b0:	d106      	bne.n	80034c0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2102      	movs	r1, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fef5 	bl	80042a8 <USB_InitFSLSPClkSel>
 80034be:	e011      	b.n	80034e4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 feee 	bl	80042a8 <USB_InitFSLSPClkSel>
 80034cc:	e00a      	b.n	80034e4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d106      	bne.n	80034e4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034dc:	461a      	mov	r2, r3
 80034de:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034e2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f006 ff6f 	bl	800a3c8 <HAL_HCD_PortEnabled_Callback>
 80034ea:	e002      	b.n	80034f2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f006 ff79 	bl	800a3e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d103      	bne.n	8003504 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f043 0320 	orr.w	r3, r3, #32
 8003502:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	6013      	str	r3, [r2, #0]
}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e264      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d075      	beq.n	8003622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003536:	4ba3      	ldr	r3, [pc, #652]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b04      	cmp	r3, #4
 8003540:	d00c      	beq.n	800355c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4ba0      	ldr	r3, [pc, #640]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354a:	2b08      	cmp	r3, #8
 800354c:	d112      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354e:	4b9d      	ldr	r3, [pc, #628]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355a:	d10b      	bne.n	8003574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	4b99      	ldr	r3, [pc, #612]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d05b      	beq.n	8003620 <HAL_RCC_OscConfig+0x108>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d157      	bne.n	8003620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e23f      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357c:	d106      	bne.n	800358c <HAL_RCC_OscConfig+0x74>
 800357e:	4a91      	ldr	r2, [pc, #580]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003580:	4b90      	ldr	r3, [pc, #576]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e01d      	b.n	80035c8 <HAL_RCC_OscConfig+0xb0>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x98>
 8003596:	4a8b      	ldr	r2, [pc, #556]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	4b8a      	ldr	r3, [pc, #552]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4a88      	ldr	r2, [pc, #544]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	4b87      	ldr	r3, [pc, #540]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0xb0>
 80035b0:	4a84      	ldr	r2, [pc, #528]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80035b2:	4b84      	ldr	r3, [pc, #528]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4a81      	ldr	r2, [pc, #516]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80035be:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fd fbd0 	bl	8000d74 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fd fbcc 	bl	8000d74 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e204      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b76      	ldr	r3, [pc, #472]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0xc0>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fd fbbc 	bl	8000d74 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003600:	f7fd fbb8 	bl	8000d74 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1f0      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	4b6c      	ldr	r3, [pc, #432]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0xe8>
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d063      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b62      	ldr	r3, [pc, #392]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003642:	2b08      	cmp	r3, #8
 8003644:	d11c      	bne.n	8003680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003646:	4b5f      	ldr	r3, [pc, #380]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d116      	bne.n	8003680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	4b5c      	ldr	r3, [pc, #368]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_RCC_OscConfig+0x152>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e1c4      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366a:	4956      	ldr	r1, [pc, #344]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 800366c:	4b55      	ldr	r3, [pc, #340]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	e03a      	b.n	80036f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003688:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <HAL_RCC_OscConfig+0x2b0>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fd fb71 	bl	8000d74 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003696:	f7fd fb6d 	bl	8000d74 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1a5      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4943      	ldr	r1, [pc, #268]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80036b6:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ca:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <HAL_RCC_OscConfig+0x2b0>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fd fb50 	bl	8000d74 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d8:	f7fd fb4c 	bl	8000d74 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e184      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d030      	beq.n	8003764 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370a:	4b30      	ldr	r3, [pc, #192]	; (80037cc <HAL_RCC_OscConfig+0x2b4>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fd fb30 	bl	8000d74 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003718:	f7fd fb2c 	bl	8000d74 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e164      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	4b26      	ldr	r3, [pc, #152]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x200>
 8003736:	e015      	b.n	8003764 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_RCC_OscConfig+0x2b4>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7fd fb19 	bl	8000d74 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003746:	f7fd fb15 	bl	8000d74 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e14d      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 800375a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f0      	bne.n	8003746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80a0 	beq.w	80038b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10f      	bne.n	80037a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_RCC_OscConfig+0x2b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d121      	bne.n	80037f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ae:	4a08      	ldr	r2, [pc, #32]	; (80037d0 <HAL_RCC_OscConfig+0x2b8>)
 80037b0:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <HAL_RCC_OscConfig+0x2b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fd fadb 	bl	8000d74 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	e011      	b.n	80037e6 <HAL_RCC_OscConfig+0x2ce>
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	42470000 	.word	0x42470000
 80037cc:	42470e80 	.word	0x42470e80
 80037d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d4:	f7fd face 	bl	8000d74 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e106      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b85      	ldr	r3, [pc, #532]	; (80039fc <HAL_RCC_OscConfig+0x4e4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d106      	bne.n	8003808 <HAL_RCC_OscConfig+0x2f0>
 80037fa:	4a81      	ldr	r2, [pc, #516]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 80037fc:	4b80      	ldr	r3, [pc, #512]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6713      	str	r3, [r2, #112]	; 0x70
 8003806:	e01c      	b.n	8003842 <HAL_RCC_OscConfig+0x32a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b05      	cmp	r3, #5
 800380e:	d10c      	bne.n	800382a <HAL_RCC_OscConfig+0x312>
 8003810:	4a7b      	ldr	r2, [pc, #492]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 8003812:	4b7b      	ldr	r3, [pc, #492]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	f043 0304 	orr.w	r3, r3, #4
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
 800381c:	4a78      	ldr	r2, [pc, #480]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 800381e:	4b78      	ldr	r3, [pc, #480]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6713      	str	r3, [r2, #112]	; 0x70
 8003828:	e00b      	b.n	8003842 <HAL_RCC_OscConfig+0x32a>
 800382a:	4a75      	ldr	r2, [pc, #468]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 800382c:	4b74      	ldr	r3, [pc, #464]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
 8003836:	4a72      	ldr	r2, [pc, #456]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 8003838:	4b71      	ldr	r3, [pc, #452]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d015      	beq.n	8003876 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7fd fa93 	bl	8000d74 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fd fa8f 	bl	8000d74 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e0c5      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003868:	4b65      	ldr	r3, [pc, #404]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ee      	beq.n	8003852 <HAL_RCC_OscConfig+0x33a>
 8003874:	e014      	b.n	80038a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003876:	f7fd fa7d 	bl	8000d74 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fd fa79 	bl	8000d74 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	; 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e0af      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003894:	4b5a      	ldr	r3, [pc, #360]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ee      	bne.n	800387e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a6:	4a56      	ldr	r2, [pc, #344]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 80038a8:	4b55      	ldr	r3, [pc, #340]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 809b 	beq.w	80039f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038bc:	4b50      	ldr	r3, [pc, #320]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d05c      	beq.n	8003982 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d141      	bne.n	8003954 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b4c      	ldr	r3, [pc, #304]	; (8003a04 <HAL_RCC_OscConfig+0x4ec>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7fd fa4d 	bl	8000d74 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038de:	f7fd fa49 	bl	8000d74 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e081      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f0:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f0      	bne.n	80038de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fc:	4940      	ldr	r1, [pc, #256]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69da      	ldr	r2, [r3, #28]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	4313      	orrs	r3, r2
 8003924:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003926:	4b37      	ldr	r3, [pc, #220]	; (8003a04 <HAL_RCC_OscConfig+0x4ec>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fd fa22 	bl	8000d74 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fd fa1e 	bl	8000d74 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e056      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x41c>
 8003952:	e04e      	b.n	80039f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003954:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <HAL_RCC_OscConfig+0x4ec>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fd fa0b 	bl	8000d74 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003962:	f7fd fa07 	bl	8000d74 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e03f      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003974:	4b22      	ldr	r3, [pc, #136]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x44a>
 8003980:	e037      	b.n	80039f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e032      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800398e:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <HAL_RCC_OscConfig+0x4e8>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d028      	beq.n	80039ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d121      	bne.n	80039ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d11a      	bne.n	80039ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039be:	4013      	ands	r3, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d111      	bne.n	80039ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	3b01      	subs	r3, #1
 80039d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40007000 	.word	0x40007000
 8003a00:	40023800 	.word	0x40023800
 8003a04:	42470060 	.word	0x42470060

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 020f 	and.w	r2, r3, #15
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d20c      	bcs.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 020f 	and.w	r2, r3, #15
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4a59      	ldr	r2, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4a53      	ldr	r2, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4950      	ldr	r1, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d044      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d119      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e067      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4937      	ldr	r1, [pc, #220]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 0203 	bic.w	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af8:	f7fd f93c 	bl	8000d74 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fd f938 	bl	8000d74 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d90c      	bls.n	8003b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 020f 	and.w	r2, r3, #15
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4919      	ldr	r1, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4912      	ldr	r1, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4601      	mov	r1, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	5cd3      	ldrb	r3, [r2, r3]
 8003ba2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fd f89c 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023c00 	.word	0x40023c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	0800ab2c 	.word	0x0800ab2c
 8003bcc:	20000004 	.word	0x20000004
 8003bd0:	20000008 	.word	0x20000008

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd8:	b087      	sub	sp, #28
 8003bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bdc:	2200      	movs	r2, #0
 8003bde:	60fa      	str	r2, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	617a      	str	r2, [r7, #20]
 8003be4:	2200      	movs	r2, #0
 8003be6:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8003be8:	2200      	movs	r2, #0
 8003bea:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bec:	4a51      	ldr	r2, [pc, #324]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bee:	6892      	ldr	r2, [r2, #8]
 8003bf0:	f002 020c 	and.w	r2, r2, #12
 8003bf4:	2a04      	cmp	r2, #4
 8003bf6:	d007      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x34>
 8003bf8:	2a08      	cmp	r2, #8
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfc:	2a00      	cmp	r2, #0
 8003bfe:	f040 8090 	bne.w	8003d22 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c02:	4b4d      	ldr	r3, [pc, #308]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c04:	613b      	str	r3, [r7, #16]
       break;
 8003c06:	e08f      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c08:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x168>)
 8003c0a:	613b      	str	r3, [r7, #16]
      break;
 8003c0c:	e08c      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c0e:	4a49      	ldr	r2, [pc, #292]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c10:	6852      	ldr	r2, [r2, #4]
 8003c12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003c16:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c18:	4a46      	ldr	r2, [pc, #280]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c1a:	6852      	ldr	r2, [r2, #4]
 8003c1c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003c20:	2a00      	cmp	r2, #0
 8003c22:	d023      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c24:	4b43      	ldr	r3, [pc, #268]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	f04f 0400 	mov.w	r4, #0
 8003c2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	ea03 0301 	and.w	r3, r3, r1
 8003c3a:	ea04 0402 	and.w	r4, r4, r2
 8003c3e:	4a3f      	ldr	r2, [pc, #252]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x168>)
 8003c40:	fb02 f104 	mul.w	r1, r2, r4
 8003c44:	2200      	movs	r2, #0
 8003c46:	fb02 f203 	mul.w	r2, r2, r3
 8003c4a:	440a      	add	r2, r1
 8003c4c:	493b      	ldr	r1, [pc, #236]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x168>)
 8003c4e:	fba3 0101 	umull	r0, r1, r3, r1
 8003c52:	1853      	adds	r3, r2, r1
 8003c54:	4619      	mov	r1, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f04f 0400 	mov.w	r4, #0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4623      	mov	r3, r4
 8003c60:	f7fc fac4 	bl	80001ec <__aeabi_uldivmod>
 8003c64:	4603      	mov	r3, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e04c      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6c:	4a31      	ldr	r2, [pc, #196]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c6e:	6852      	ldr	r2, [r2, #4]
 8003c70:	0992      	lsrs	r2, r2, #6
 8003c72:	4611      	mov	r1, r2
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003c7c:	f04f 0600 	mov.w	r6, #0
 8003c80:	ea05 0501 	and.w	r5, r5, r1
 8003c84:	ea06 0602 	and.w	r6, r6, r2
 8003c88:	4629      	mov	r1, r5
 8003c8a:	4632      	mov	r2, r6
 8003c8c:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003c90:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003c94:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8003c98:	4651      	mov	r1, sl
 8003c9a:	465a      	mov	r2, fp
 8003c9c:	46aa      	mov	sl, r5
 8003c9e:	46b3      	mov	fp, r6
 8003ca0:	4655      	mov	r5, sl
 8003ca2:	465e      	mov	r6, fp
 8003ca4:	1b4d      	subs	r5, r1, r5
 8003ca6:	eb62 0606 	sbc.w	r6, r2, r6
 8003caa:	4629      	mov	r1, r5
 8003cac:	4632      	mov	r2, r6
 8003cae:	0194      	lsls	r4, r2, #6
 8003cb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cb4:	018b      	lsls	r3, r1, #6
 8003cb6:	1a5b      	subs	r3, r3, r1
 8003cb8:	eb64 0402 	sbc.w	r4, r4, r2
 8003cbc:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003cc0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003cc4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003cc8:	4643      	mov	r3, r8
 8003cca:	464c      	mov	r4, r9
 8003ccc:	4655      	mov	r5, sl
 8003cce:	465e      	mov	r6, fp
 8003cd0:	18ed      	adds	r5, r5, r3
 8003cd2:	eb46 0604 	adc.w	r6, r6, r4
 8003cd6:	462b      	mov	r3, r5
 8003cd8:	4634      	mov	r4, r6
 8003cda:	02a2      	lsls	r2, r4, #10
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	029b      	lsls	r3, r3, #10
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f04f 0400 	mov.w	r4, #0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	f7fc fa76 	bl	80001ec <__aeabi_uldivmod>
 8003d00:	4603      	mov	r3, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	3301      	adds	r3, #1
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	613b      	str	r3, [r7, #16]
      break;
 8003d20:	e002      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d24:	613b      	str	r3, [r7, #16]
      break;
 8003d26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d28:	693b      	ldr	r3, [r7, #16]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00f42400 	.word	0x00f42400
 8003d3c:	017d7840 	.word	0x017d7840

08003d40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d40:	b084      	sub	sp, #16
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	f107 001c 	add.w	r0, r7, #28
 8003d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d122      	bne.n	8003d9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f99e 	bl	80040d4 <USB_CoreReset>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	e01a      	b.n	8003dd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f992 	bl	80040d4 <USB_CoreReset>
 8003db0:	4603      	mov	r3, r0
 8003db2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8003dc6:	e005      	b.n	8003dd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d10b      	bne.n	8003df2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f043 0206 	orr.w	r2, r3, #6
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f043 0220 	orr.w	r2, r3, #32
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dfe:	b004      	add	sp, #16
 8003e00:	4770      	bx	lr

08003e02 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f043 0201 	orr.w	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 0201 	bic.w	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d115      	bne.n	8003e94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e74:	2001      	movs	r0, #1
 8003e76:	f7fc ff89 	bl	8000d8c <HAL_Delay>
      ms++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f919 	bl	80040b8 <USB_GetMode>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d01e      	beq.n	8003eca <USB_SetCurrentMode+0x84>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b31      	cmp	r3, #49	; 0x31
 8003e90:	d9f0      	bls.n	8003e74 <USB_SetCurrentMode+0x2e>
 8003e92:	e01a      	b.n	8003eca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d115      	bne.n	8003ec6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f7fc ff70 	bl	8000d8c <HAL_Delay>
      ms++;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f900 	bl	80040b8 <USB_GetMode>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <USB_SetCurrentMode+0x84>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b31      	cmp	r3, #49	; 0x31
 8003ec2:	d9f0      	bls.n	8003ea6 <USB_SetCurrentMode+0x60>
 8003ec4:	e001      	b.n	8003eca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e005      	b.n	8003ed6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b32      	cmp	r3, #50	; 0x32
 8003ece:	d101      	bne.n	8003ed4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	019b      	lsls	r3, r3, #6
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <USB_FlushTxFifo+0x44>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e006      	b.n	8003f18 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d0f1      	beq.n	8003efa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	00030d40 	.word	0x00030d40

08003f28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2210      	movs	r2, #16
 8003f38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <USB_FlushRxFifo+0x3c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e006      	b.n	8003f58 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d0f1      	beq.n	8003f3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	00030d40 	.word	0x00030d40

08003f68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	4611      	mov	r1, r2
 8003f74:	461a      	mov	r2, r3
 8003f76:	460b      	mov	r3, r1
 8003f78:	71fb      	strb	r3, [r7, #7]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d123      	bne.n	8003fd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f8e:	88bb      	ldrh	r3, [r7, #4]
 8003f90:	3303      	adds	r3, #3
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e018      	b.n	8003fce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	031a      	lsls	r2, r3, #12
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa8:	461a      	mov	r2, r3
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d3e2      	bcc.n	8003f9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3724      	adds	r7, #36	; 0x24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b08b      	sub	sp, #44	; 0x2c
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800400a:	2300      	movs	r3, #0
 800400c:	623b      	str	r3, [r7, #32]
 800400e:	e014      	b.n	800403a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	601a      	str	r2, [r3, #0]
    pDest++;
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	3301      	adds	r3, #1
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	3301      	adds	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	3301      	adds	r3, #1
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	3301      	adds	r3, #1
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	3301      	adds	r3, #1
 8004038:	623b      	str	r3, [r7, #32]
 800403a:	6a3a      	ldr	r2, [r7, #32]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	429a      	cmp	r2, r3
 8004040:	d3e6      	bcc.n	8004010 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004042:	8bfb      	ldrh	r3, [r7, #30]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01d      	beq.n	8004084 <USB_ReadPacket+0xa0>
  {
    i = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800404c:	f107 0310 	add.w	r3, r7, #16
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	b2da      	uxtb	r2, r3
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	701a      	strb	r2, [r3, #0]
      i++;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	3301      	adds	r3, #1
 8004070:	623b      	str	r3, [r7, #32]
      pDest++;
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	3301      	adds	r3, #1
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004078:	8bfb      	ldrh	r3, [r7, #30]
 800407a:	3b01      	subs	r3, #1
 800407c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800407e:	8bfb      	ldrh	r3, [r7, #30]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ea      	bne.n	800405a <USB_ReadPacket+0x76>
  }

  return ((void *)pDest);
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004086:	4618      	mov	r0, r3
 8004088:	372c      	adds	r7, #44	; 0x2c
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4013      	ands	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80040aa:	68fb      	ldr	r3, [r7, #12]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f003 0301 	and.w	r3, r3, #1
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <USB_CoreReset+0x60>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e01a      	b.n	8004126 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	daf3      	bge.n	80040e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f043 0201 	orr.w	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	4a09      	ldr	r2, [pc, #36]	; (8004134 <USB_CoreReset+0x60>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e006      	b.n	8004126 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	d0f1      	beq.n	8004108 <USB_CoreReset+0x34>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	00030d40 	.word	0x00030d40

08004138 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004138:	b084      	sub	sp, #16
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	f107 001c 	add.w	r0, r7, #28
 8004146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004154:	461a      	mov	r2, r3
 8004156:	2300      	movs	r3, #0
 8004158:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01a      	beq.n	80041c0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10b      	bne.n	80041a8 <USB_HostInit+0x70>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f043 0304 	orr.w	r3, r3, #4
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e016      	b.n	80041d6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ae:	461a      	mov	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e00a      	b.n	80041d6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80041d6:	2110      	movs	r1, #16
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff fe81 	bl	8003ee0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff fea2 	bl	8003f28 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e015      	b.n	8004216 <USB_HostInit+0xde>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f6:	461a      	mov	r2, r3
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
 80041fc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	461a      	mov	r2, r3
 800420c:	2300      	movs	r3, #0
 800420e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3301      	adds	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	6a3a      	ldr	r2, [r7, #32]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	429a      	cmp	r2, r3
 800421c:	d8e5      	bhi.n	80041ea <USB_HostInit+0xb2>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f04f 32ff 	mov.w	r2, #4294967295
 800422a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <USB_HostInit+0x118>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a14      	ldr	r2, [pc, #80]	; (8004294 <USB_HostInit+0x15c>)
 8004244:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a13      	ldr	r2, [pc, #76]	; (8004298 <USB_HostInit+0x160>)
 800424a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800424e:	e009      	b.n	8004264 <USB_HostInit+0x12c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a10      	ldr	r2, [pc, #64]	; (800429c <USB_HostInit+0x164>)
 800425a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <USB_HostInit+0x168>)
 8004260:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d105      	bne.n	8004276 <USB_HostInit+0x13e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f043 0210 	orr.w	r2, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <USB_HostInit+0x16c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800428e:	b004      	add	sp, #16
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	01000200 	.word	0x01000200
 8004298:	00e00300 	.word	0x00e00300
 800429c:	00600080 	.word	0x00600080
 80042a0:	004000e0 	.word	0x004000e0
 80042a4:	a3200008 	.word	0xa3200008

080042a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f023 0303 	bic.w	r3, r3, #3
 80042cc:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042d4:	4619      	mov	r1, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <USB_InitFSLSPClkSel+0x56>
  {
    USBx_HOST->HFIR = 48000U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042f4:	461a      	mov	r2, r3
 80042f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80042fa:	6053      	str	r3, [r2, #4]
 80042fc:	e009      	b.n	8004312 <USB_InitFSLSPClkSel+0x6a>
  }
  else if (freq == HCFG_6_MHZ)
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d106      	bne.n	8004312 <USB_InitFSLSPClkSel+0x6a>
  {
    USBx_HOST->HFIR = 6000U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800430a:	461a      	mov	r2, r3
 800430c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004310:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004340:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004348:	461a      	mov	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004350:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004352:	2064      	movs	r0, #100	; 0x64
 8004354:	f7fc fd1a 	bl	8000d8c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800435e:	461a      	mov	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004366:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004368:	200a      	movs	r0, #10
 800436a:	f7fc fd0f 	bl	8000d8c <HAL_Delay>

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800439c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <USB_DriveVbus+0x46>
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d107      	bne.n	80043be <USB_DriveVbus+0x46>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043b4:	461a      	mov	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043bc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c8:	d10a      	bne.n	80043e0 <USB_DriveVbus+0x68>
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d107      	bne.n	80043e0 <USB_DriveVbus+0x68>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043d6:	461a      	mov	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043de:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	0c5b      	lsrs	r3, r3, #17
 800440c:	f003 0303 	and.w	r3, r3, #3
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	b29b      	uxth	r3, r3
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	461a      	mov	r2, r3
 800444e:	4603      	mov	r3, r0
 8004450:	70fb      	strb	r3, [r7, #3]
 8004452:	460b      	mov	r3, r1
 8004454:	70bb      	strb	r3, [r7, #2]
 8004456:	4613      	mov	r3, r2
 8004458:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446e:	461a      	mov	r2, r3
 8004470:	f04f 33ff 	mov.w	r3, #4294967295
 8004474:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004476:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800447a:	2b03      	cmp	r3, #3
 800447c:	f200 8084 	bhi.w	8004588 <USB_HC_Init+0x148>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <USB_HC_Init+0x48>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	08004499 	.word	0x08004499
 800448c:	08004549 	.word	0x08004549
 8004490:	08004499 	.word	0x08004499
 8004494:	08004509 	.word	0x08004509
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a4:	461a      	mov	r2, r3
 80044a6:	f240 439d 	movw	r3, #1181	; 0x49d
 80044aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80044ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	da11      	bge.n	80044d8 <USB_HC_Init+0x98>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c0:	4619      	mov	r1, r3
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	60cb      	str	r3, [r1, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80044d6:	e05a      	b.n	800458e <USB_HC_Init+0x14e>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d054      	beq.n	800458e <USB_HC_Init+0x14e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f0:	4619      	mov	r1, r3
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004504:	60cb      	str	r3, [r1, #12]
      break;
 8004506:	e042      	b.n	800458e <USB_HC_Init+0x14e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	461a      	mov	r2, r3
 8004516:	f240 639d 	movw	r3, #1693	; 0x69d
 800451a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800451c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004520:	2b00      	cmp	r3, #0
 8004522:	da36      	bge.n	8004592 <USB_HC_Init+0x152>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	4619      	mov	r1, r3
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4413      	add	r3, r2
 800453a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004544:	60cb      	str	r3, [r1, #12]
      }

      break;
 8004546:	e024      	b.n	8004592 <USB_HC_Init+0x152>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004554:	461a      	mov	r2, r3
 8004556:	f240 2325 	movw	r3, #549	; 0x225
 800455a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800455c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004560:	2b00      	cmp	r3, #0
 8004562:	da18      	bge.n	8004596 <USB_HC_Init+0x156>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004570:	4619      	mov	r1, r3
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004584:	60cb      	str	r3, [r1, #12]
      }
      break;
 8004586:	e006      	b.n	8004596 <USB_HC_Init+0x156>

    default:
      ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	77fb      	strb	r3, [r7, #31]
      break;
 800458c:	e004      	b.n	8004598 <USB_HC_Init+0x158>
      break;
 800458e:	bf00      	nop
 8004590:	e002      	b.n	8004598 <USB_HC_Init+0x158>
      break;
 8004592:	bf00      	nop
 8004594:	e000      	b.n	8004598 <USB_HC_Init+0x158>
      break;
 8004596:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800459e:	4618      	mov	r0, r3
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	2101      	movs	r1, #1
 80045b0:	fa01 f303 	lsl.w	r3, r1, r3
 80045b4:	4313      	orrs	r3, r2
 80045b6:	6183      	str	r3, [r0, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80045c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	da03      	bge.n	80045d4 <USB_HC_Init+0x194>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80045cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	e001      	b.n	80045d8 <USB_HC_Init+0x198>
  }
  else
  {
    HCcharEpDir = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff08 	bl	80043ee <USB_GetHostSpeed>
 80045de:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80045e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d106      	bne.n	80045f6 <USB_HC_Init+0x1b6>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d003      	beq.n	80045f6 <USB_HC_Init+0x1b6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80045ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e001      	b.n	80045fa <USB_HC_Init+0x1ba>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4413      	add	r3, r2
 8004602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004606:	4619      	mov	r1, r3
 8004608:	787b      	ldrb	r3, [r7, #1]
 800460a:	059b      	lsls	r3, r3, #22
 800460c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004610:	78bb      	ldrb	r3, [r7, #2]
 8004612:	02db      	lsls	r3, r3, #11
 8004614:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004618:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800461a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800461e:	049b      	lsls	r3, r3, #18
 8004620:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004624:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004626:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004628:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800462c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	431a      	orrs	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004636:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004638:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800463c:	2b03      	cmp	r3, #3
 800463e:	d110      	bne.n	8004662 <USB_HC_Init+0x222>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	4619      	mov	r1, r3
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004660:	600b      	str	r3, [r1, #0]
  }

  return ret;
 8004662:	7ffb      	ldrb	r3, [r7, #31]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08c      	sub	sp, #48	; 0x30
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004688:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d02e      	beq.n	80046f4 <USB_HC_StartXfer+0x88>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	791b      	ldrb	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d12a      	bne.n	80046f4 <USB_HC_StartXfer+0x88>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d118      	bne.n	80046d6 <USB_HC_StartXfer+0x6a>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	79db      	ldrb	r3, [r3, #7]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <USB_HC_StartXfer+0x48>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	79db      	ldrb	r3, [r3, #7]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d110      	bne.n	80046d6 <USB_HC_StartXfer+0x6a>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c0:	4619      	mov	r1, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d4:	60cb      	str	r3, [r1, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <USB_HC_StartXfer+0x88>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	795b      	ldrb	r3, [r3, #5]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d107      	bne.n	80046f4 <USB_HC_StartXfer+0x88>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	4619      	mov	r1, r3
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 fa3e 	bl	8004b6c <USB_DoPing>
      return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e0fc      	b.n	80048ee <USB_HC_StartXfer+0x282>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d018      	beq.n	800472e <USB_HC_StartXfer+0xc2>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	8912      	ldrh	r2, [r2, #8]
 8004704:	4413      	add	r3, r2
 8004706:	3b01      	subs	r3, #1
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	8912      	ldrh	r2, [r2, #8]
 800470c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004710:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004712:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004714:	8b7b      	ldrh	r3, [r7, #26]
 8004716:	429a      	cmp	r2, r3
 8004718:	d90b      	bls.n	8004732 <USB_HC_StartXfer+0xc6>
    {
      num_packets = max_hc_pkt_count;
 800471a:	8b7b      	ldrh	r3, [r7, #26]
 800471c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800471e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	8912      	ldrh	r2, [r2, #8]
 8004724:	fb02 f203 	mul.w	r2, r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	611a      	str	r2, [r3, #16]
 800472c:	e001      	b.n	8004732 <USB_HC_StartXfer+0xc6>
    }
  }
  else
  {
    num_packets = 1U;
 800472e:	2301      	movs	r3, #1
 8004730:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	78db      	ldrb	r3, [r3, #3]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <USB_HC_StartXfer+0xde>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800473a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	8912      	ldrh	r2, [r2, #8]
 8004740:	fb02 f203 	mul.w	r2, r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	611a      	str	r2, [r3, #16]
 8004748:	e003      	b.n	8004752 <USB_HC_StartXfer+0xe6>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	4413      	add	r3, r2
 800475a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475e:	4618      	mov	r0, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004768:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800476a:	04d9      	lsls	r1, r3, #19
 800476c:	4b62      	ldr	r3, [pc, #392]	; (80048f8 <USB_HC_StartXfer+0x28c>)
 800476e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004770:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	7a9b      	ldrb	r3, [r3, #10]
 8004776:	075b      	lsls	r3, r3, #29
 8004778:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800477c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800477e:	6103      	str	r3, [r0, #16]

  if (dma != 0U)
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <USB_HC_StartXfer+0x12e>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	4413      	add	r3, r2
 800478e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004792:	461a      	mov	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	6153      	str	r3, [r2, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047be:	4619      	mov	r1, r3
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80047d2:	600b      	str	r3, [r1, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e0:	4619      	mov	r1, r3
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	7e7b      	ldrb	r3, [r7, #25]
 80047f2:	075b      	lsls	r3, r3, #29
 80047f4:	4313      	orrs	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800480e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	78db      	ldrb	r3, [r3, #3]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d004      	beq.n	8004822 <USB_HC_StartXfer+0x1b6>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	e003      	b.n	800482a <USB_HC_StartXfer+0x1be>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004828:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004830:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	4413      	add	r3, r2
 800483a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483e:	461a      	mov	r2, r3
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <USB_HC_StartXfer+0x1e2>
  {
    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e04f      	b.n	80048ee <USB_HC_StartXfer+0x282>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	78db      	ldrb	r3, [r3, #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d14a      	bne.n	80048ec <USB_HC_StartXfer+0x280>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d046      	beq.n	80048ec <USB_HC_StartXfer+0x280>
  {
    switch (hc->ep_type)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	79db      	ldrb	r3, [r3, #7]
 8004862:	2b03      	cmp	r3, #3
 8004864:	d830      	bhi.n	80048c8 <USB_HC_StartXfer+0x25c>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <USB_HC_StartXfer+0x200>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	0800487d 	.word	0x0800487d
 8004870:	080048a1 	.word	0x080048a1
 8004874:	0800487d 	.word	0x0800487d
 8004878:	080048a1 	.word	0x080048a1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	3303      	adds	r3, #3
 8004882:	089b      	lsrs	r3, r3, #2
 8004884:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004886:	8afa      	ldrh	r2, [r7, #22]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	b29b      	uxth	r3, r3
 800488e:	429a      	cmp	r2, r3
 8004890:	d91c      	bls.n	80048cc <USB_HC_StartXfer+0x260>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f043 0220 	orr.w	r2, r3, #32
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	619a      	str	r2, [r3, #24]
        }
        break;
 800489e:	e015      	b.n	80048cc <USB_HC_StartXfer+0x260>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	3303      	adds	r3, #3
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80048aa:	8afa      	ldrh	r2, [r7, #22]
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d90a      	bls.n	80048d0 <USB_HC_StartXfer+0x264>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80048c6:	e003      	b.n	80048d0 <USB_HC_StartXfer+0x264>

      default:
        break;
 80048c8:	bf00      	nop
 80048ca:	e002      	b.n	80048d2 <USB_HC_StartXfer+0x266>
        break;
 80048cc:	bf00      	nop
 80048ce:	e000      	b.n	80048d2 <USB_HC_StartXfer+0x266>
        break;
 80048d0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	785a      	ldrb	r2, [r3, #1]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	b298      	uxth	r0, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4603      	mov	r3, r0
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff fb3e 	bl	8003f68 <USB_WritePacket>
  }

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3728      	adds	r7, #40	; 0x28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	1ff80000 	.word	0x1ff80000

080048fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	b29b      	uxth	r3, r3
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800491e:	b480      	push	{r7}
 8004920:	b089      	sub	sp, #36	; 0x24
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	460b      	mov	r3, r1
 8004928:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	4413      	add	r3, r2
 800493e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	0c9b      	lsrs	r3, r3, #18
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	0fdb      	lsrs	r3, r3, #31
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b20      	cmp	r3, #32
 800496c:	d104      	bne.n	8004978 <USB_HC_Halt+0x5a>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	e0f2      	b.n	8004b5e <USB_HC_Halt+0x240>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <USB_HC_Halt+0x66>
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d178      	bne.n	8004a76 <USB_HC_Halt+0x158>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004990:	4619      	mov	r1, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	4413      	add	r3, r2
 800499a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049a4:	600b      	str	r3, [r1, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 80d4 	bne.w	8004b5c <USB_HC_Halt+0x23e>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d146      	bne.n	8004a4e <USB_HC_Halt+0x130>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049cc:	4619      	mov	r1, r3
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049e0:	600b      	str	r3, [r1, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ee:	4619      	mov	r1, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a02:	600b      	str	r3, [r1, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a10:	4619      	mov	r1, r3
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a24:	600b      	str	r3, [r1, #0]
        do
        {
          if (++count > 1000U)
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a32:	d81e      	bhi.n	8004a72 <USB_HC_Halt+0x154>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a4a:	d0ec      	beq.n	8004a26 <USB_HC_Halt+0x108>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a4c:	e086      	b.n	8004b5c <USB_HC_Halt+0x23e>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a6e:	600b      	str	r3, [r1, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a70:	e074      	b.n	8004b5c <USB_HC_Halt+0x23e>
            break;
 8004a72:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004a74:	e072      	b.n	8004b5c <USB_HC_Halt+0x23e>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a82:	4619      	mov	r1, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a96:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d146      	bne.n	8004b36 <USB_HC_Halt+0x218>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ac8:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aea:	600b      	str	r3, [r1, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af8:	4619      	mov	r1, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b0c:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000U)
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3301      	adds	r3, #1
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b1a:	d81e      	bhi.n	8004b5a <USB_HC_Halt+0x23c>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b32:	d0ec      	beq.n	8004b0e <USB_HC_Halt+0x1f0>
 8004b34:	e012      	b.n	8004b5c <USB_HC_Halt+0x23e>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b42:	4619      	mov	r1, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b56:	600b      	str	r3, [r1, #0]
 8004b58:	e000      	b.n	8004b5c <USB_HC_Halt+0x23e>
          break;
 8004b5a:	bf00      	nop
    }
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3724      	adds	r7, #36	; 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004b80:	2301      	movs	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b90:	4619      	mov	r1, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	04da      	lsls	r2, r3, #19
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <USB_DoPing+0x74>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b9e:	610b      	str	r3, [r1, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bb6:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bbe:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	1ff80000 	.word	0x1ff80000

08004be4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff f915 	bl	8003e24 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004bfa:	2110      	movs	r1, #16
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff f96f 	bl	8003ee0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff f990 	bl	8003f28 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	e01f      	b.n	8004c4e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c42:	461a      	mov	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b0f      	cmp	r3, #15
 8004c52:	d9dc      	bls.n	8004c0e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e034      	b.n	8004cc4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	3301      	adds	r3, #1
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ca0:	d80c      	bhi.n	8004cbc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cb8:	d0ec      	beq.n	8004c94 <USB_StopHost+0xb0>
 8004cba:	e000      	b.n	8004cbe <USB_StopHost+0xda>
        break;
 8004cbc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	d9c7      	bls.n	8004c5a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff f88e 	bl	8003e02 <USB_EnableGlobalInt>

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8004cf4:	4904      	ldr	r1, [pc, #16]	; (8004d08 <MX_FATFS_Init+0x18>)
 8004cf6:	4805      	ldr	r0, [pc, #20]	; (8004d0c <MX_FATFS_Init+0x1c>)
 8004cf8:	f005 fa5e 	bl	800a1b8 <FATFS_LinkDriver>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <MX_FATFS_Init+0x20>)
 8004d02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d04:	bf00      	nop
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	2000b230 	.word	0x2000b230
 8004d0c:	0800ab3c 	.word	0x0800ab3c
 8004d10:	2000d298 	.word	0x2000d298

08004d14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004d18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4808      	ldr	r0, [pc, #32]	; (8004d70 <USBH_status+0x34>)
 8004d50:	f000 fe11 	bl	8005976 <USBH_MSC_UnitIsReady>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <USBH_status+0x24>
  {
    res = RES_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
 8004d5e:	e001      	b.n	8004d64 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	2000d29c 	.word	0x2000d29c

08004d74 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b094      	sub	sp, #80	; 0x50
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	4603      	mov	r3, r0
 8004d82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8004d8a:	7bf9      	ldrb	r1, [r7, #15]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4812      	ldr	r0, [pc, #72]	; (8004de0 <USBH_read+0x6c>)
 8004d96:	f000 fe38 	bl	8005a0a <USBH_MSC_Read>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d103      	bne.n	8004da8 <USBH_read+0x34>
  {
    res = RES_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004da6:	e015      	b.n	8004dd4 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8004da8:	f107 0210 	add.w	r2, r7, #16
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	4619      	mov	r1, r3
 8004db0:	480b      	ldr	r0, [pc, #44]	; (8004de0 <USBH_read+0x6c>)
 8004db2:	f000 fe06 	bl	80059c2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8004db6:	7f7b      	ldrb	r3, [r7, #29]
 8004db8:	2b28      	cmp	r3, #40	; 0x28
 8004dba:	d003      	beq.n	8004dc4 <USBH_read+0x50>
 8004dbc:	2b3a      	cmp	r3, #58	; 0x3a
 8004dbe:	d001      	beq.n	8004dc4 <USBH_read+0x50>
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d103      	bne.n	8004dcc <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004dca:	e003      	b.n	8004dd4 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004dd2:	bf00      	nop
    }
  }

  return res;
 8004dd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3748      	adds	r7, #72	; 0x48
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	2000d29c 	.word	0x2000d29c

08004de4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b094      	sub	sp, #80	; 0x50
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	4603      	mov	r3, r0
 8004df2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8004dfa:	7bf9      	ldrb	r1, [r7, #15]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	4817      	ldr	r0, [pc, #92]	; (8004e64 <USBH_write+0x80>)
 8004e06:	f000 fe69 	bl	8005adc <USBH_MSC_Write>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <USBH_write+0x34>
  {
    res = RES_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004e16:	e01f      	b.n	8004e58 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8004e18:	f107 0210 	add.w	r2, r7, #16
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4810      	ldr	r0, [pc, #64]	; (8004e64 <USBH_write+0x80>)
 8004e22:	f000 fdce 	bl	80059c2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8004e26:	7f7b      	ldrb	r3, [r7, #29]
 8004e28:	2b27      	cmp	r3, #39	; 0x27
 8004e2a:	d009      	beq.n	8004e40 <USBH_write+0x5c>
 8004e2c:	2b27      	cmp	r3, #39	; 0x27
 8004e2e:	dc02      	bgt.n	8004e36 <USBH_write+0x52>
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d009      	beq.n	8004e48 <USBH_write+0x64>
 8004e34:	e00c      	b.n	8004e50 <USBH_write+0x6c>
 8004e36:	2b28      	cmp	r3, #40	; 0x28
 8004e38:	d006      	beq.n	8004e48 <USBH_write+0x64>
 8004e3a:	2b3a      	cmp	r3, #58	; 0x3a
 8004e3c:	d004      	beq.n	8004e48 <USBH_write+0x64>
 8004e3e:	e007      	b.n	8004e50 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8004e40:	2302      	movs	r3, #2
 8004e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004e46:	e007      	b.n	8004e58 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004e4e:	e003      	b.n	8004e58 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004e56:	bf00      	nop
    }
  }

  return res;
 8004e58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3748      	adds	r7, #72	; 0x48
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	2000d29c 	.word	0x2000d29c

08004e68 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b090      	sub	sp, #64	; 0x40
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	603a      	str	r2, [r7, #0]
 8004e72:	71fb      	strb	r3, [r7, #7]
 8004e74:	460b      	mov	r3, r1
 8004e76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8004e7e:	79bb      	ldrb	r3, [r7, #6]
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d852      	bhi.n	8004f2a <USBH_ioctl+0xc2>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <USBH_ioctl+0x24>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004ea5 	.word	0x08004ea5
 8004e94:	08004ecf 	.word	0x08004ecf
 8004e98:	08004efb 	.word	0x08004efb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004ea2:	e045      	b.n	8004f30 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004ea4:	f107 0208 	add.w	r2, r7, #8
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4823      	ldr	r0, [pc, #140]	; (8004f3c <USBH_ioctl+0xd4>)
 8004eae:	f000 fd88 	bl	80059c2 <USBH_MSC_GetLUNInfo>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004ec4:	e034      	b.n	8004f30 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004ecc:	e030      	b.n	8004f30 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004ece:	f107 0208 	add.w	r2, r7, #8
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4819      	ldr	r0, [pc, #100]	; (8004f3c <USBH_ioctl+0xd4>)
 8004ed8:	f000 fd73 	bl	80059c2 <USBH_MSC_GetLUNInfo>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d107      	bne.n	8004ef2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8004ee2:	8a3b      	ldrh	r3, [r7, #16]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004ef0:	e01e      	b.n	8004f30 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004ef8:	e01a      	b.n	8004f30 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004efa:	f107 0208 	add.w	r2, r7, #8
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	4619      	mov	r1, r3
 8004f02:	480e      	ldr	r0, [pc, #56]	; (8004f3c <USBH_ioctl+0xd4>)
 8004f04:	f000 fd5d 	bl	80059c2 <USBH_MSC_GetLUNInfo>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d109      	bne.n	8004f22 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8004f0e:	8a3b      	ldrh	r3, [r7, #16]
 8004f10:	0a5b      	lsrs	r3, r3, #9
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004f20:	e006      	b.n	8004f30 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004f28:	e002      	b.n	8004f30 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8004f30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3740      	adds	r7, #64	; 0x40
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	2000d29c 	.word	0x2000d29c

08004f40 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b089      	sub	sp, #36	; 0x24
 8004f44:	af04      	add	r7, sp, #16
 8004f46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f4e:	7919      	ldrb	r1, [r3, #4]
 8004f50:	2350      	movs	r3, #80	; 0x50
 8004f52:	2206      	movs	r2, #6
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 fc4f 	bl	80067f8 <USBH_FindInterface>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2bff      	cmp	r3, #255	; 0xff
 8004f62:	d002      	beq.n	8004f6a <USBH_MSC_InterfaceInit+0x2a>
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d901      	bls.n	8004f6e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e0ef      	b.n	800514e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f001 fc24 	bl	80067c0 <USBH_SelectInterface>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004f7c:	7bbb      	ldrb	r3, [r7, #14]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8004f82:	2302      	movs	r3, #2
 8004f84:	e0e3      	b.n	800514e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004f8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f90:	f005 fcac 	bl	800a8ec <malloc>
 8004f94:	4603      	mov	r3, r0
 8004f96:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e0d0      	b.n	800514e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8004fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	68b8      	ldr	r0, [r7, #8]
 8004fb4:	f005 fcb5 	bl	800a922 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	211a      	movs	r1, #26
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	b25b      	sxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	da16      	bge.n	8004ffe <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	211a      	movs	r1, #26
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	211a      	movs	r1, #26
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	815a      	strh	r2, [r3, #10]
 8004ffc:	e015      	b.n	800502a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	211a      	movs	r1, #26
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	4413      	add	r3, r2
 800500a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800500e:	781a      	ldrb	r2, [r3, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	211a      	movs	r1, #26
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005024:	881a      	ldrh	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	211a      	movs	r1, #26
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	4413      	add	r3, r2
 8005036:	f203 3356 	addw	r3, r3, #854	; 0x356
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b25b      	sxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	da16      	bge.n	8005070 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	211a      	movs	r1, #26
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	4413      	add	r3, r2
 800504e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	211a      	movs	r1, #26
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	4413      	add	r3, r2
 8005064:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005068:	881a      	ldrh	r2, [r3, #0]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	815a      	strh	r2, [r3, #10]
 800506e:	e015      	b.n	800509c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	211a      	movs	r1, #26
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	4413      	add	r3, r2
 800507c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	211a      	movs	r1, #26
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	4413      	add	r3, r2
 8005092:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005096:	881a      	ldrh	r2, [r3, #0]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2200      	movs	r2, #0
 80050a0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2200      	movs	r2, #0
 80050a6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2200      	movs	r2, #0
 80050ac:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	799b      	ldrb	r3, [r3, #6]
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f002 fdc2 	bl	8007c3e <USBH_AllocPipe>
 80050ba:	4603      	mov	r3, r0
 80050bc:	461a      	mov	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	79db      	ldrb	r3, [r3, #7]
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f002 fdb8 	bl	8007c3e <USBH_AllocPipe>
 80050ce:	4603      	mov	r3, r0
 80050d0:	461a      	mov	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fda4 	bl	8005c24 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	7959      	ldrb	r1, [r3, #5]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	7998      	ldrb	r0, [r3, #6]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	8912      	ldrh	r2, [r2, #8]
 80050f4:	9202      	str	r2, [sp, #8]
 80050f6:	2202      	movs	r2, #2
 80050f8:	9201      	str	r2, [sp, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4623      	mov	r3, r4
 80050fe:	4602      	mov	r2, r0
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f002 fd6d 	bl	8007be0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	7919      	ldrb	r1, [r3, #4]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	79d8      	ldrb	r0, [r3, #7]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	8952      	ldrh	r2, [r2, #10]
 800511e:	9202      	str	r2, [sp, #8]
 8005120:	2202      	movs	r2, #2
 8005122:	9201      	str	r2, [sp, #4]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	4623      	mov	r3, r4
 8005128:	4602      	mov	r2, r0
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f002 fd58 	bl	8007be0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	791b      	ldrb	r3, [r3, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f005 facf 	bl	800a6dc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	795b      	ldrb	r3, [r3, #5]
 8005142:	2200      	movs	r2, #0
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f005 fac8 	bl	800a6dc <USBH_LL_SetToggle>

  return USBH_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	bd90      	pop	{r4, r7, pc}

08005156 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	795b      	ldrb	r3, [r3, #5]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00e      	beq.n	800518e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	795b      	ldrb	r3, [r3, #5]
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f002 fd51 	bl	8007c1e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	795b      	ldrb	r3, [r3, #5]
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f002 fd7c 	bl	8007c80 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	791b      	ldrb	r3, [r3, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00e      	beq.n	80051b4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	791b      	ldrb	r3, [r3, #4]
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f002 fd3e 	bl	8007c1e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	791b      	ldrb	r3, [r3, #4]
 80051a6:	4619      	mov	r1, r3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f002 fd69 	bl	8007c80 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f005 fb97 	bl	800a8fc <free>
    phost->pActiveClass->pData = 0U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051d4:	2200      	movs	r2, #0
 80051d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	7b9b      	ldrb	r3, [r3, #14]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d004      	beq.n	800520a <USBH_MSC_ClassRequest+0x28>
 8005200:	2b03      	cmp	r3, #3
 8005202:	d03e      	beq.n	8005282 <USBH_MSC_ClassRequest+0xa0>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d000      	beq.n	800520a <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8005208:	e04a      	b.n	80052a0 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fcea 	bl	8005be8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005214:	4603      	mov	r3, r0
 8005216:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d104      	bne.n	8005228 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d135      	bne.n	800529a <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d804      	bhi.n	8005240 <USBH_MSC_ClassRequest+0x5e>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	3301      	adds	r3, #1
 800523c:	b2da      	uxtb	r2, r3
 800523e:	e000      	b.n	8005242 <USBH_MSC_ClassRequest+0x60>
 8005240:	2202      	movs	r2, #2
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005246:	2300      	movs	r3, #0
 8005248:	73bb      	strb	r3, [r7, #14]
 800524a:	e014      	b.n	8005276 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800524c:	7bbb      	ldrb	r3, [r7, #14]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	2134      	movs	r1, #52	; 0x34
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	4413      	add	r3, r2
 8005258:	3392      	adds	r3, #146	; 0x92
 800525a:	2202      	movs	r2, #2
 800525c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800525e:	7bbb      	ldrb	r3, [r7, #14]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	2134      	movs	r1, #52	; 0x34
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	4413      	add	r3, r2
 800526a:	33c1      	adds	r3, #193	; 0xc1
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005270:	7bbb      	ldrb	r3, [r7, #14]
 8005272:	3301      	adds	r3, #1
 8005274:	73bb      	strb	r3, [r7, #14]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	7bba      	ldrb	r2, [r7, #14]
 800527c:	429a      	cmp	r2, r3
 800527e:	d3e5      	bcc.n	800524c <USBH_MSC_ClassRequest+0x6a>
      break;
 8005280:	e00b      	b.n	800529a <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005282:	2100      	movs	r1, #0
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f002 f878 	bl	800737a <USBH_ClrFeature>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	7bda      	ldrb	r2, [r3, #15]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	739a      	strb	r2, [r3, #14]
      break;
 8005298:	e001      	b.n	800529e <USBH_MSC_ClassRequest+0xbc>
      break;
 800529a:	bf00      	nop
 800529c:	e000      	b.n	80052a0 <USBH_MSC_ClassRequest+0xbe>
      break;
 800529e:	bf00      	nop
  }

  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80052be:	2301      	movs	r3, #1
 80052c0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80052c2:	2301      	movs	r3, #1
 80052c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	7b1b      	ldrb	r3, [r3, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <USBH_MSC_Process+0x2e>
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	f000 8271 	beq.w	80057ba <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80052d8:	e272      	b.n	80057c0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	429a      	cmp	r2, r3
 80052e8:	f080 824f 	bcs.w	800578a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80052f2:	4619      	mov	r1, r3
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	2334      	movs	r3, #52	; 0x34
 80052f8:	fb03 f301 	mul.w	r3, r3, r1
 80052fc:	4413      	add	r3, r2
 80052fe:	3391      	adds	r3, #145	; 0x91
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800530a:	4619      	mov	r1, r3
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	2334      	movs	r3, #52	; 0x34
 8005310:	fb03 f301 	mul.w	r3, r3, r1
 8005314:	4413      	add	r3, r2
 8005316:	3390      	adds	r3, #144	; 0x90
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b08      	cmp	r3, #8
 800531c:	f200 8243 	bhi.w	80057a6 <USBH_MSC_Process+0x4fa>
 8005320:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <USBH_MSC_Process+0x7c>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	0800534d 	.word	0x0800534d
 800532c:	080057a7 	.word	0x080057a7
 8005330:	08005415 	.word	0x08005415
 8005334:	08005599 	.word	0x08005599
 8005338:	08005373 	.word	0x08005373
 800533c:	08005665 	.word	0x08005665
 8005340:	080057a7 	.word	0x080057a7
 8005344:	080057a7 	.word	0x080057a7
 8005348:	08005779 	.word	0x08005779
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005352:	4619      	mov	r1, r3
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	2334      	movs	r3, #52	; 0x34
 8005358:	fb03 f301 	mul.w	r3, r3, r1
 800535c:	4413      	add	r3, r2
 800535e:	3390      	adds	r3, #144	; 0x90
 8005360:	2204      	movs	r2, #4
 8005362:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005370:	e222      	b.n	80057b8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005378:	b2d9      	uxtb	r1, r3
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005380:	461a      	mov	r2, r3
 8005382:	2334      	movs	r3, #52	; 0x34
 8005384:	fb03 f302 	mul.w	r3, r3, r2
 8005388:	3398      	adds	r3, #152	; 0x98
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4413      	add	r3, r2
 800538e:	3307      	adds	r3, #7
 8005390:	461a      	mov	r2, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 ff68 	bl	8006268 <USBH_MSC_SCSI_Inquiry>
 8005398:	4603      	mov	r3, r0
 800539a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10b      	bne.n	80053ba <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80053a8:	4619      	mov	r1, r3
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	2334      	movs	r3, #52	; 0x34
 80053ae:	fb03 f301 	mul.w	r3, r3, r1
 80053b2:	4413      	add	r3, r2
 80053b4:	3390      	adds	r3, #144	; 0x90
 80053b6:	2202      	movs	r2, #2
 80053b8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d10c      	bne.n	80053da <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80053c6:	4619      	mov	r1, r3
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	2334      	movs	r3, #52	; 0x34
 80053cc:	fb03 f301 	mul.w	r3, r3, r1
 80053d0:	4413      	add	r3, r2
 80053d2:	3390      	adds	r3, #144	; 0x90
 80053d4:	2205      	movs	r2, #5
 80053d6:	701a      	strb	r2, [r3, #0]
            break;
 80053d8:	e1e7      	b.n	80057aa <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	2b04      	cmp	r3, #4
 80053de:	f040 81e4 	bne.w	80057aa <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80053e8:	4619      	mov	r1, r3
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	2334      	movs	r3, #52	; 0x34
 80053ee:	fb03 f301 	mul.w	r3, r3, r1
 80053f2:	4413      	add	r3, r2
 80053f4:	3390      	adds	r3, #144	; 0x90
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005400:	4619      	mov	r1, r3
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	2334      	movs	r3, #52	; 0x34
 8005406:	fb03 f301 	mul.w	r3, r3, r1
 800540a:	4413      	add	r3, r2
 800540c:	3391      	adds	r3, #145	; 0x91
 800540e:	2202      	movs	r2, #2
 8005410:	701a      	strb	r2, [r3, #0]
            break;
 8005412:	e1ca      	b.n	80057aa <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800541a:	b2db      	uxtb	r3, r3
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fe64 	bl	80060ec <USBH_MSC_SCSI_TestUnitReady>
 8005424:	4603      	mov	r3, r0
 8005426:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005428:	7bbb      	ldrb	r3, [r7, #14]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d149      	bne.n	80054c2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005434:	4619      	mov	r1, r3
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	2334      	movs	r3, #52	; 0x34
 800543a:	fb03 f301 	mul.w	r3, r3, r1
 800543e:	4413      	add	r3, r2
 8005440:	3392      	adds	r3, #146	; 0x92
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00c      	beq.n	8005462 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800544e:	4619      	mov	r1, r3
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	2334      	movs	r3, #52	; 0x34
 8005454:	fb03 f301 	mul.w	r3, r3, r1
 8005458:	4413      	add	r3, r2
 800545a:	33c1      	adds	r3, #193	; 0xc1
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e00b      	b.n	800547a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005468:	4619      	mov	r1, r3
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	2334      	movs	r3, #52	; 0x34
 800546e:	fb03 f301 	mul.w	r3, r3, r1
 8005472:	4413      	add	r3, r2
 8005474:	33c1      	adds	r3, #193	; 0xc1
 8005476:	2200      	movs	r2, #0
 8005478:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005480:	4619      	mov	r1, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	2334      	movs	r3, #52	; 0x34
 8005486:	fb03 f301 	mul.w	r3, r3, r1
 800548a:	4413      	add	r3, r2
 800548c:	3390      	adds	r3, #144	; 0x90
 800548e:	2203      	movs	r2, #3
 8005490:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005498:	4619      	mov	r1, r3
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	2334      	movs	r3, #52	; 0x34
 800549e:	fb03 f301 	mul.w	r3, r3, r1
 80054a2:	4413      	add	r3, r2
 80054a4:	3391      	adds	r3, #145	; 0x91
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80054b0:	4619      	mov	r1, r3
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	2334      	movs	r3, #52	; 0x34
 80054b6:	fb03 f301 	mul.w	r3, r3, r1
 80054ba:	4413      	add	r3, r2
 80054bc:	3392      	adds	r3, #146	; 0x92
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80054c2:	7bbb      	ldrb	r3, [r7, #14]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d14a      	bne.n	800555e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80054ce:	4619      	mov	r1, r3
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	2334      	movs	r3, #52	; 0x34
 80054d4:	fb03 f301 	mul.w	r3, r3, r1
 80054d8:	4413      	add	r3, r2
 80054da:	3392      	adds	r3, #146	; 0x92
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d00c      	beq.n	80054fc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80054e8:	4619      	mov	r1, r3
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	2334      	movs	r3, #52	; 0x34
 80054ee:	fb03 f301 	mul.w	r3, r3, r1
 80054f2:	4413      	add	r3, r2
 80054f4:	33c1      	adds	r3, #193	; 0xc1
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e00b      	b.n	8005514 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005502:	4619      	mov	r1, r3
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	2334      	movs	r3, #52	; 0x34
 8005508:	fb03 f301 	mul.w	r3, r3, r1
 800550c:	4413      	add	r3, r2
 800550e:	33c1      	adds	r3, #193	; 0xc1
 8005510:	2200      	movs	r2, #0
 8005512:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800551a:	4619      	mov	r1, r3
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	2334      	movs	r3, #52	; 0x34
 8005520:	fb03 f301 	mul.w	r3, r3, r1
 8005524:	4413      	add	r3, r2
 8005526:	3390      	adds	r3, #144	; 0x90
 8005528:	2205      	movs	r2, #5
 800552a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005532:	4619      	mov	r1, r3
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	2334      	movs	r3, #52	; 0x34
 8005538:	fb03 f301 	mul.w	r3, r3, r1
 800553c:	4413      	add	r3, r2
 800553e:	3391      	adds	r3, #145	; 0x91
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800554a:	4619      	mov	r1, r3
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	2334      	movs	r3, #52	; 0x34
 8005550:	fb03 f301 	mul.w	r3, r3, r1
 8005554:	4413      	add	r3, r2
 8005556:	3392      	adds	r3, #146	; 0x92
 8005558:	2202      	movs	r2, #2
 800555a:	701a      	strb	r2, [r3, #0]
            break;
 800555c:	e127      	b.n	80057ae <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800555e:	7bbb      	ldrb	r3, [r7, #14]
 8005560:	2b04      	cmp	r3, #4
 8005562:	f040 8124 	bne.w	80057ae <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800556c:	4619      	mov	r1, r3
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	2334      	movs	r3, #52	; 0x34
 8005572:	fb03 f301 	mul.w	r3, r3, r1
 8005576:	4413      	add	r3, r2
 8005578:	3390      	adds	r3, #144	; 0x90
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005584:	4619      	mov	r1, r3
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	2334      	movs	r3, #52	; 0x34
 800558a:	fb03 f301 	mul.w	r3, r3, r1
 800558e:	4413      	add	r3, r2
 8005590:	3391      	adds	r3, #145	; 0x91
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]
            break;
 8005596:	e10a      	b.n	80057ae <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800559e:	b2d9      	uxtb	r1, r3
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80055a6:	461a      	mov	r2, r3
 80055a8:	2334      	movs	r3, #52	; 0x34
 80055aa:	fb03 f302 	mul.w	r3, r3, r2
 80055ae:	3390      	adds	r3, #144	; 0x90
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4413      	add	r3, r2
 80055b4:	3304      	adds	r3, #4
 80055b6:	461a      	mov	r2, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fdda 	bl	8006172 <USBH_MSC_SCSI_ReadCapacity>
 80055be:	4603      	mov	r3, r0
 80055c0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d120      	bne.n	800560a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80055ce:	4619      	mov	r1, r3
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	2334      	movs	r3, #52	; 0x34
 80055d4:	fb03 f301 	mul.w	r3, r3, r1
 80055d8:	4413      	add	r3, r2
 80055da:	3390      	adds	r3, #144	; 0x90
 80055dc:	2201      	movs	r2, #1
 80055de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80055e6:	4619      	mov	r1, r3
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	2334      	movs	r3, #52	; 0x34
 80055ec:	fb03 f301 	mul.w	r3, r3, r1
 80055f0:	4413      	add	r3, r2
 80055f2:	3391      	adds	r3, #145	; 0x91
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80055fe:	3301      	adds	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005608:	e0d3      	b.n	80057b2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b02      	cmp	r3, #2
 800560e:	d10c      	bne.n	800562a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005616:	4619      	mov	r1, r3
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	2334      	movs	r3, #52	; 0x34
 800561c:	fb03 f301 	mul.w	r3, r3, r1
 8005620:	4413      	add	r3, r2
 8005622:	3390      	adds	r3, #144	; 0x90
 8005624:	2205      	movs	r2, #5
 8005626:	701a      	strb	r2, [r3, #0]
            break;
 8005628:	e0c3      	b.n	80057b2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b04      	cmp	r3, #4
 800562e:	f040 80c0 	bne.w	80057b2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005638:	4619      	mov	r1, r3
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	2334      	movs	r3, #52	; 0x34
 800563e:	fb03 f301 	mul.w	r3, r3, r1
 8005642:	4413      	add	r3, r2
 8005644:	3390      	adds	r3, #144	; 0x90
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005650:	4619      	mov	r1, r3
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	2334      	movs	r3, #52	; 0x34
 8005656:	fb03 f301 	mul.w	r3, r3, r1
 800565a:	4413      	add	r3, r2
 800565c:	3391      	adds	r3, #145	; 0x91
 800565e:	2202      	movs	r2, #2
 8005660:	701a      	strb	r2, [r3, #0]
            break;
 8005662:	e0a6      	b.n	80057b2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800566a:	b2d9      	uxtb	r1, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005672:	461a      	mov	r2, r3
 8005674:	2334      	movs	r3, #52	; 0x34
 8005676:	fb03 f302 	mul.w	r3, r3, r2
 800567a:	3398      	adds	r3, #152	; 0x98
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	3304      	adds	r3, #4
 8005682:	461a      	mov	r2, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fe94 	bl	80063b2 <USBH_MSC_SCSI_RequestSense>
 800568a:	4603      	mov	r3, r0
 800568c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d145      	bne.n	8005720 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800569a:	4619      	mov	r1, r3
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	2334      	movs	r3, #52	; 0x34
 80056a0:	fb03 f301 	mul.w	r3, r3, r1
 80056a4:	4413      	add	r3, r2
 80056a6:	339c      	adds	r3, #156	; 0x9c
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b06      	cmp	r3, #6
 80056ac:	d00c      	beq.n	80056c8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80056b4:	4619      	mov	r1, r3
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	2334      	movs	r3, #52	; 0x34
 80056ba:	fb03 f301 	mul.w	r3, r3, r1
 80056be:	4413      	add	r3, r2
 80056c0:	339c      	adds	r3, #156	; 0x9c
 80056c2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d117      	bne.n	80056f8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80056da:	4293      	cmp	r3, r2
 80056dc:	d80c      	bhi.n	80056f8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80056e4:	4619      	mov	r1, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	2334      	movs	r3, #52	; 0x34
 80056ea:	fb03 f301 	mul.w	r3, r3, r1
 80056ee:	4413      	add	r3, r2
 80056f0:	3390      	adds	r3, #144	; 0x90
 80056f2:	2202      	movs	r2, #2
 80056f4:	701a      	strb	r2, [r3, #0]
                  break;
 80056f6:	e05f      	b.n	80057b8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80056fe:	4619      	mov	r1, r3
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	2334      	movs	r3, #52	; 0x34
 8005704:	fb03 f301 	mul.w	r3, r3, r1
 8005708:	4413      	add	r3, r2
 800570a:	3390      	adds	r3, #144	; 0x90
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005716:	3301      	adds	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d10c      	bne.n	8005740 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800572c:	4619      	mov	r1, r3
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	2334      	movs	r3, #52	; 0x34
 8005732:	fb03 f301 	mul.w	r3, r3, r1
 8005736:	4413      	add	r3, r2
 8005738:	3390      	adds	r3, #144	; 0x90
 800573a:	2208      	movs	r2, #8
 800573c:	701a      	strb	r2, [r3, #0]
            break;
 800573e:	e03a      	b.n	80057b6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b04      	cmp	r3, #4
 8005744:	d137      	bne.n	80057b6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800574c:	4619      	mov	r1, r3
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	2334      	movs	r3, #52	; 0x34
 8005752:	fb03 f301 	mul.w	r3, r3, r1
 8005756:	4413      	add	r3, r2
 8005758:	3390      	adds	r3, #144	; 0x90
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005764:	4619      	mov	r1, r3
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	2334      	movs	r3, #52	; 0x34
 800576a:	fb03 f301 	mul.w	r3, r3, r1
 800576e:	4413      	add	r3, r2
 8005770:	3391      	adds	r3, #145	; 0x91
 8005772:	2202      	movs	r2, #2
 8005774:	701a      	strb	r2, [r3, #0]
            break;
 8005776:	e01e      	b.n	80057b6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800577e:	3301      	adds	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005788:	e016      	b.n	80057b8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2200      	movs	r2, #0
 800578e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2201      	movs	r2, #1
 8005796:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800579e:	2102      	movs	r1, #2
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	4798      	blx	r3
      break;
 80057a4:	e00c      	b.n	80057c0 <USBH_MSC_Process+0x514>
            break;
 80057a6:	bf00      	nop
 80057a8:	e00a      	b.n	80057c0 <USBH_MSC_Process+0x514>
            break;
 80057aa:	bf00      	nop
 80057ac:	e008      	b.n	80057c0 <USBH_MSC_Process+0x514>
            break;
 80057ae:	bf00      	nop
 80057b0:	e006      	b.n	80057c0 <USBH_MSC_Process+0x514>
            break;
 80057b2:	bf00      	nop
 80057b4:	e004      	b.n	80057c0 <USBH_MSC_Process+0x514>
            break;
 80057b6:	bf00      	nop
      break;
 80057b8:	e002      	b.n	80057c0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]
      break;
 80057be:	bf00      	nop
  }
  return error;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop

080057cc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b088      	sub	sp, #32
 80057e6:	af02      	add	r7, sp, #8
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	2134      	movs	r1, #52	; 0x34
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	4413      	add	r3, r2
 800580c:	3390      	adds	r3, #144	; 0x90
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b06      	cmp	r3, #6
 8005812:	d004      	beq.n	800581e <USBH_MSC_RdWrProcess+0x3c>
 8005814:	2b07      	cmp	r3, #7
 8005816:	d037      	beq.n	8005888 <USBH_MSC_RdWrProcess+0xa6>
 8005818:	2b05      	cmp	r3, #5
 800581a:	d06a      	beq.n	80058f2 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800581c:	e0a6      	b.n	800596c <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800581e:	78f9      	ldrb	r1, [r7, #3]
 8005820:	2300      	movs	r3, #0
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	2300      	movs	r3, #0
 8005826:	2200      	movs	r2, #0
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fea6 	bl	800657a <USBH_MSC_SCSI_Read>
 800582e:	4603      	mov	r3, r0
 8005830:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	2134      	movs	r1, #52	; 0x34
 800583e:	fb01 f303 	mul.w	r3, r1, r3
 8005842:	4413      	add	r3, r2
 8005844:	3390      	adds	r3, #144	; 0x90
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	75fb      	strb	r3, [r7, #23]
      break;
 800584e:	e088      	b.n	8005962 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d109      	bne.n	800586a <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	2134      	movs	r1, #52	; 0x34
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	4413      	add	r3, r2
 8005862:	3390      	adds	r3, #144	; 0x90
 8005864:	2205      	movs	r2, #5
 8005866:	701a      	strb	r2, [r3, #0]
      break;
 8005868:	e07b      	b.n	8005962 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b04      	cmp	r3, #4
 800586e:	d178      	bne.n	8005962 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	2134      	movs	r1, #52	; 0x34
 8005876:	fb01 f303 	mul.w	r3, r1, r3
 800587a:	4413      	add	r3, r2
 800587c:	3390      	adds	r3, #144	; 0x90
 800587e:	2208      	movs	r2, #8
 8005880:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005882:	2302      	movs	r3, #2
 8005884:	75fb      	strb	r3, [r7, #23]
      break;
 8005886:	e06c      	b.n	8005962 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8005888:	78f9      	ldrb	r1, [r7, #3]
 800588a:	2300      	movs	r3, #0
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2300      	movs	r3, #0
 8005890:	2200      	movs	r2, #0
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fe06 	bl	80064a4 <USBH_MSC_SCSI_Write>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	2134      	movs	r1, #52	; 0x34
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	4413      	add	r3, r2
 80058ae:	3390      	adds	r3, #144	; 0x90
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	75fb      	strb	r3, [r7, #23]
      break;
 80058b8:	e055      	b.n	8005966 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d109      	bne.n	80058d4 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	2134      	movs	r1, #52	; 0x34
 80058c6:	fb01 f303 	mul.w	r3, r1, r3
 80058ca:	4413      	add	r3, r2
 80058cc:	3390      	adds	r3, #144	; 0x90
 80058ce:	2205      	movs	r2, #5
 80058d0:	701a      	strb	r2, [r3, #0]
      break;
 80058d2:	e048      	b.n	8005966 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d145      	bne.n	8005966 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	2134      	movs	r1, #52	; 0x34
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	4413      	add	r3, r2
 80058e6:	3390      	adds	r3, #144	; 0x90
 80058e8:	2208      	movs	r2, #8
 80058ea:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80058ec:	2302      	movs	r3, #2
 80058ee:	75fb      	strb	r3, [r7, #23]
      break;
 80058f0:	e039      	b.n	8005966 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	2234      	movs	r2, #52	; 0x34
 80058f6:	fb02 f303 	mul.w	r3, r2, r3
 80058fa:	3398      	adds	r3, #152	; 0x98
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	1d1a      	adds	r2, r3, #4
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fd53 	bl	80063b2 <USBH_MSC_SCSI_RequestSense>
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d113      	bne.n	800593e <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	2134      	movs	r1, #52	; 0x34
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	4413      	add	r3, r2
 8005922:	3390      	adds	r3, #144	; 0x90
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	2134      	movs	r1, #52	; 0x34
 800592e:	fb01 f303 	mul.w	r3, r1, r3
 8005932:	4413      	add	r3, r2
 8005934:	3391      	adds	r3, #145	; 0x91
 8005936:	2202      	movs	r2, #2
 8005938:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800593a:	2302      	movs	r3, #2
 800593c:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d012      	beq.n	800596a <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b04      	cmp	r3, #4
 8005948:	d10f      	bne.n	800596a <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	2134      	movs	r1, #52	; 0x34
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	4413      	add	r3, r2
 8005956:	3390      	adds	r3, #144	; 0x90
 8005958:	2208      	movs	r2, #8
 800595a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800595c:	2302      	movs	r3, #2
 800595e:	75fb      	strb	r3, [r7, #23]
      break;
 8005960:	e003      	b.n	800596a <USBH_MSC_RdWrProcess+0x188>
      break;
 8005962:	bf00      	nop
 8005964:	e002      	b.n	800596c <USBH_MSC_RdWrProcess+0x18a>
      break;
 8005966:	bf00      	nop
 8005968:	e000      	b.n	800596c <USBH_MSC_RdWrProcess+0x18a>
      break;
 800596a:	bf00      	nop

  }
  return error;
 800596c:	7dfb      	ldrb	r3, [r7, #23]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b0b      	cmp	r3, #11
 8005994:	d10c      	bne.n	80059b0 <USBH_MSC_UnitIsReady+0x3a>
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	2134      	movs	r1, #52	; 0x34
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	4413      	add	r3, r2
 80059a2:	3391      	adds	r3, #145	; 0x91
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80059aa:	2301      	movs	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
 80059ae:	e001      	b.n	80059b4 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b086      	sub	sp, #24
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	460b      	mov	r3, r1
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b0b      	cmp	r3, #11
 80059e2:	d10d      	bne.n	8005a00 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80059e4:	7afb      	ldrb	r3, [r7, #11]
 80059e6:	2234      	movs	r2, #52	; 0x34
 80059e8:	fb02 f303 	mul.w	r3, r2, r3
 80059ec:	3390      	adds	r3, #144	; 0x90
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4413      	add	r3, r2
 80059f2:	2234      	movs	r2, #52	; 0x34
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f004 ff88 	bl	800a90c <memcpy>
    return USBH_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	e000      	b.n	8005a02 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8005a00:	2302      	movs	r3, #2
  }
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b088      	sub	sp, #32
 8005a0e:	af02      	add	r7, sp, #8
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	460b      	mov	r3, r1
 8005a18:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00e      	beq.n	8005a4e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005a36:	2b0b      	cmp	r3, #11
 8005a38:	d109      	bne.n	8005a4e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005a3a:	7afb      	ldrb	r3, [r7, #11]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	2134      	movs	r1, #52	; 0x34
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	4413      	add	r3, r2
 8005a46:	3390      	adds	r3, #144	; 0x90
 8005a48:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d001      	beq.n	8005a52 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e040      	b.n	8005ad4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2206      	movs	r2, #6
 8005a56:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8005a58:	7afb      	ldrb	r3, [r7, #11]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	2134      	movs	r1, #52	; 0x34
 8005a5e:	fb01 f303 	mul.w	r3, r1, r3
 8005a62:	4413      	add	r3, r2
 8005a64:	3390      	adds	r3, #144	; 0x90
 8005a66:	2206      	movs	r2, #6
 8005a68:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8005a6a:	7afb      	ldrb	r3, [r7, #11]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8005a74:	7af9      	ldrb	r1, [r7, #11]
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 fd7b 	bl	800657a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005a8a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005a8c:	e016      	b.n	8005abc <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad2      	subs	r2, r2, r3
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	f242 7110 	movw	r1, #10000	; 0x2710
 8005a9e:	fb01 f303 	mul.w	r3, r1, r3
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d805      	bhi.n	8005ab2 <USBH_MSC_Read+0xa8>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e00b      	b.n	8005ad4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005abc:	7afb      	ldrb	r3, [r7, #11]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff fe8e 	bl	80057e2 <USBH_MSC_RdWrProcess>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d0e0      	beq.n	8005a8e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	607a      	str	r2, [r7, #4]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00e      	beq.n	8005b20 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005b08:	2b0b      	cmp	r3, #11
 8005b0a:	d109      	bne.n	8005b20 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8005b0c:	7afb      	ldrb	r3, [r7, #11]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	2134      	movs	r1, #52	; 0x34
 8005b12:	fb01 f303 	mul.w	r3, r1, r3
 8005b16:	4413      	add	r3, r2
 8005b18:	3390      	adds	r3, #144	; 0x90
 8005b1a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8005b20:	2302      	movs	r3, #2
 8005b22:	e040      	b.n	8005ba6 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2207      	movs	r2, #7
 8005b28:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8005b2a:	7afb      	ldrb	r3, [r7, #11]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	2134      	movs	r1, #52	; 0x34
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	3390      	adds	r3, #144	; 0x90
 8005b38:	2207      	movs	r2, #7
 8005b3a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8005b3c:	7afb      	ldrb	r3, [r7, #11]
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8005b46:	7af9      	ldrb	r1, [r7, #11]
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fca7 	bl	80064a4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005b5c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005b5e:	e016      	b.n	8005b8e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad2      	subs	r2, r2, r3
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f242 7110 	movw	r1, #10000	; 0x2710
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d805      	bhi.n	8005b84 <USBH_MSC_Write+0xa8>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2201      	movs	r2, #1
 8005b88:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e00b      	b.n	8005ba6 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	4619      	mov	r1, r3
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff fe25 	bl	80057e2 <USBH_MSC_RdWrProcess>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d0e0      	beq.n	8005b60 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2221      	movs	r2, #33	; 0x21
 8005bba:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	22ff      	movs	r2, #255	; 0xff
 8005bc0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 fdae 	bl	800773a <USBH_CtlReq>
 8005bde:	4603      	mov	r3, r0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	22a1      	movs	r2, #161	; 0xa1
 8005bf6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	22fe      	movs	r2, #254	; 0xfe
 8005bfc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8005c10:	2201      	movs	r2, #1
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 fd90 	bl	800773a <USBH_CtlReq>
 8005c1a:	4603      	mov	r3, r0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <USBH_MSC_BOT_Init+0x3c>)
 8005c3a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <USBH_MSC_BOT_Init+0x40>)
 8005c40:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	43425355 	.word	0x43425355
 8005c64:	20304050 	.word	0x20304050

08005c68 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005c74:	2301      	movs	r3, #1
 8005c76:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	2b0a      	cmp	r3, #10
 8005c9c:	f200 81a1 	bhi.w	8005fe2 <USBH_MSC_BOT_Process+0x37a>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <USBH_MSC_BOT_Process+0x40>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005cff 	.word	0x08005cff
 8005cb0:	08005d69 	.word	0x08005d69
 8005cb4:	08005d87 	.word	0x08005d87
 8005cb8:	08005e0b 	.word	0x08005e0b
 8005cbc:	08005e2f 	.word	0x08005e2f
 8005cc0:	08005ec9 	.word	0x08005ec9
 8005cc4:	08005ee5 	.word	0x08005ee5
 8005cc8:	08005f37 	.word	0x08005f37
 8005ccc:	08005f67 	.word	0x08005f67
 8005cd0:	08005fc9 	.word	0x08005fc9
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	795a      	ldrb	r2, [r3, #5]
 8005cee:	2301      	movs	r3, #1
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	221f      	movs	r2, #31
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 ff2f 	bl	8007b5a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8005cfc:	e180      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	795b      	ldrb	r3, [r3, #5]
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f004 fcbf 	bl	800a688 <USBH_LL_GetURBState>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8005d0e:	7d3b      	ldrb	r3, [r7, #20]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d118      	bne.n	8005d46 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00f      	beq.n	8005d3c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005d22:	b25b      	sxtb	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	da04      	bge.n	8005d32 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005d30:	e159      	b.n	8005fe6 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2205      	movs	r2, #5
 8005d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005d3a:	e154      	b.n	8005fe6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2207      	movs	r2, #7
 8005d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005d44:	e14f      	b.n	8005fe6 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005d46:	7d3b      	ldrb	r3, [r7, #20]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d104      	bne.n	8005d56 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005d54:	e147      	b.n	8005fe6 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8005d56:	7d3b      	ldrb	r3, [r7, #20]
 8005d58:	2b05      	cmp	r3, #5
 8005d5a:	f040 8144 	bne.w	8005fe6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	220a      	movs	r2, #10
 8005d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005d66:	e13e      	b.n	8005fe6 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	895a      	ldrh	r2, [r3, #10]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	791b      	ldrb	r3, [r3, #4]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 ff14 	bl	8007ba4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2204      	movs	r2, #4
 8005d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8005d84:	e13c      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	791b      	ldrb	r3, [r3, #4]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f004 fc7b 	bl	800a688 <USBH_LL_GetURBState>
 8005d92:	4603      	mov	r3, r0
 8005d94:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8005d96:	7d3b      	ldrb	r3, [r7, #20]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d12d      	bne.n	8005df8 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	8952      	ldrh	r2, [r2, #10]
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d910      	bls.n	8005dca <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	8952      	ldrh	r2, [r2, #10]
 8005db2:	441a      	add	r2, r3
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	8952      	ldrh	r2, [r2, #10]
 8005dc2:	1a9a      	subs	r2, r3, r2
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dc8:	e002      	b.n	8005dd0 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	895a      	ldrh	r2, [r3, #10]
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	791b      	ldrb	r3, [r3, #4]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 fedc 	bl	8007ba4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8005dec:	e0fd      	b.n	8005fea <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	2207      	movs	r2, #7
 8005df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005df6:	e0f8      	b.n	8005fea <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8005df8:	7d3b      	ldrb	r3, [r7, #20]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	f040 80f5 	bne.w	8005fea <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2209      	movs	r2, #9
 8005e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005e08:	e0ef      	b.n	8005fea <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	891a      	ldrh	r2, [r3, #8]
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	7958      	ldrb	r0, [r3, #5]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 fe9b 	bl	8007b5a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2206      	movs	r2, #6
 8005e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005e2c:	e0e8      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	795b      	ldrb	r3, [r3, #5]
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f004 fc27 	bl	800a688 <USBH_LL_GetURBState>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8005e3e:	7d3b      	ldrb	r3, [r7, #20]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d130      	bne.n	8005ea6 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	8912      	ldrh	r2, [r2, #8]
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d910      	bls.n	8005e72 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	8912      	ldrh	r2, [r2, #8]
 8005e5a:	441a      	add	r2, r3
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	8912      	ldrh	r2, [r2, #8]
 8005e6a:	1a9a      	subs	r2, r3, r2
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e70:	e002      	b.n	8005e78 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2200      	movs	r2, #0
 8005e76:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00d      	beq.n	8005e9c <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	891a      	ldrh	r2, [r3, #8]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	7958      	ldrb	r0, [r3, #5]
 8005e8e:	2301      	movs	r3, #1
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4603      	mov	r3, r0
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 fe60 	bl	8007b5a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8005e9a:	e0a8      	b.n	8005fee <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2207      	movs	r2, #7
 8005ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005ea4:	e0a3      	b.n	8005fee <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005ea6:	7d3b      	ldrb	r3, [r7, #20]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d104      	bne.n	8005eb6 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2205      	movs	r2, #5
 8005eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005eb4:	e09b      	b.n	8005fee <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8005eb6:	7d3b      	ldrb	r3, [r7, #20]
 8005eb8:	2b05      	cmp	r3, #5
 8005eba:	f040 8098 	bne.w	8005fee <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	220a      	movs	r2, #10
 8005ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005ec6:	e092      	b.n	8005fee <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	791b      	ldrb	r3, [r3, #4]
 8005ed2:	220d      	movs	r2, #13
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 fe65 	bl	8007ba4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2208      	movs	r2, #8
 8005ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005ee2:	e08d      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	791b      	ldrb	r3, [r3, #4]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f004 fbcc 	bl	800a688 <USBH_LL_GetURBState>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8005ef4:	7d3b      	ldrb	r3, [r7, #20]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d115      	bne.n	8005f26 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f8aa 	bl	8006064 <USBH_MSC_DecodeCSW>
 8005f10:	4603      	mov	r3, r0
 8005f12:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8005f14:	7d7b      	ldrb	r3, [r7, #21]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8005f1e:	e068      	b.n	8005ff2 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8005f20:	2302      	movs	r3, #2
 8005f22:	75fb      	strb	r3, [r7, #23]
      break;
 8005f24:	e065      	b.n	8005ff2 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8005f26:	7d3b      	ldrb	r3, [r7, #20]
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	d162      	bne.n	8005ff2 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2209      	movs	r2, #9
 8005f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005f34:	e05d      	b.n	8005ff2 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f865 	bl	800600c <USBH_MSC_BOT_Abort>
 8005f42:	4603      	mov	r3, r0
 8005f44:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8005f46:	7dbb      	ldrb	r3, [r7, #22]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2207      	movs	r2, #7
 8005f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8005f54:	e04f      	b.n	8005ff6 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8005f56:	7dbb      	ldrb	r3, [r7, #22]
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d14c      	bne.n	8005ff6 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	220b      	movs	r2, #11
 8005f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005f64:	e047      	b.n	8005ff6 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f84d 	bl	800600c <USBH_MSC_BOT_Abort>
 8005f72:	4603      	mov	r3, r0
 8005f74:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8005f76:	7dbb      	ldrb	r3, [r7, #22]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11d      	bne.n	8005fb8 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	795b      	ldrb	r3, [r3, #5]
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f004 fbda 	bl	800a73c <USBH_LL_GetToggle>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	7959      	ldrb	r1, [r3, #5]
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	f1c3 0301 	rsb	r3, r3, #1
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f004 fb9e 	bl	800a6dc <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	791b      	ldrb	r3, [r3, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f004 fb97 	bl	800a6dc <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2209      	movs	r2, #9
 8005fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8005fb6:	e020      	b.n	8005ffa <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8005fb8:	7dbb      	ldrb	r3, [r7, #22]
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d11d      	bne.n	8005ffa <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	220b      	movs	r2, #11
 8005fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005fc6:	e018      	b.n	8005ffa <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fdf0 	bl	8005bae <USBH_MSC_BOT_REQ_Reset>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d112      	bne.n	8005ffe <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8005fe0:	e00d      	b.n	8005ffe <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8005fe2:	bf00      	nop
 8005fe4:	e00c      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>
      break;
 8005fe6:	bf00      	nop
 8005fe8:	e00a      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>
      break;
 8005fea:	bf00      	nop
 8005fec:	e008      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e006      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e004      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e002      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e000      	b.n	8006000 <USBH_MSC_BOT_Process+0x398>
      break;
 8005ffe:	bf00      	nop
  }
  return status;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop

0800600c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	70fb      	strb	r3, [r7, #3]
 8006018:	4613      	mov	r3, r2
 800601a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800601c:	2302      	movs	r3, #2
 800601e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800602a:	78bb      	ldrb	r3, [r7, #2]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <USBH_MSC_BOT_Abort+0x2a>
 8006030:	2b01      	cmp	r3, #1
 8006032:	d009      	beq.n	8006048 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006034:	e011      	b.n	800605a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	79db      	ldrb	r3, [r3, #7]
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 f99c 	bl	800737a <USBH_ClrFeature>
 8006042:	4603      	mov	r3, r0
 8006044:	73fb      	strb	r3, [r7, #15]
      break;
 8006046:	e008      	b.n	800605a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	799b      	ldrb	r3, [r3, #6]
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 f993 	bl	800737a <USBH_ClrFeature>
 8006054:	4603      	mov	r3, r0
 8006056:	73fb      	strb	r3, [r7, #15]
      break;
 8006058:	bf00      	nop
  }
  return status;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	791b      	ldrb	r3, [r3, #4]
 800607e:	4619      	mov	r1, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f004 fa6f 	bl	800a564 <USBH_LL_GetLastXferSize>
 8006086:	4603      	mov	r3, r0
 8006088:	2b0d      	cmp	r3, #13
 800608a:	d002      	beq.n	8006092 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800608c:	2302      	movs	r3, #2
 800608e:	73fb      	strb	r3, [r7, #15]
 8006090:	e024      	b.n	80060dc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006096:	4a14      	ldr	r2, [pc, #80]	; (80060e8 <USBH_MSC_DecodeCSW+0x84>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d11d      	bne.n	80060d8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d119      	bne.n	80060dc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d102      	bne.n	80060b8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
 80060b6:	e011      	b.n	80060dc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d102      	bne.n	80060c8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80060c2:	2301      	movs	r3, #1
 80060c4:	73fb      	strb	r3, [r7, #15]
 80060c6:	e009      	b.n	80060dc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d104      	bne.n	80060dc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80060d2:	2302      	movs	r3, #2
 80060d4:	73fb      	strb	r3, [r7, #15]
 80060d6:	e001      	b.n	80060dc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80060d8:	2302      	movs	r3, #2
 80060da:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	53425355 	.word	0x53425355

080060ec <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80060f8:	2302      	movs	r3, #2
 80060fa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800610c:	2b01      	cmp	r3, #1
 800610e:	d002      	beq.n	8006116 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006110:	2b02      	cmp	r3, #2
 8006112:	d021      	beq.n	8006158 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006114:	e028      	b.n	8006168 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2200      	movs	r2, #0
 800611a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	220a      	movs	r2, #10
 8006128:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	3363      	adds	r3, #99	; 0x63
 8006130:	2210      	movs	r2, #16
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f004 fbf4 	bl	800a922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2202      	movs	r2, #2
 800614e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006152:	2301      	movs	r3, #1
 8006154:	73fb      	strb	r3, [r7, #15]
      break;
 8006156:	e007      	b.n	8006168 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fd83 	bl	8005c68 <USBH_MSC_BOT_Process>
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]
      break;
 8006166:	bf00      	nop
  }

  return error;
 8006168:	7bfb      	ldrb	r3, [r7, #15]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	460b      	mov	r3, r1
 800617c:	607a      	str	r2, [r7, #4]
 800617e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006180:	2301      	movs	r3, #1
 8006182:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006194:	2b01      	cmp	r3, #1
 8006196:	d002      	beq.n	800619e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006198:	2b02      	cmp	r3, #2
 800619a:	d027      	beq.n	80061ec <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800619c:	e05f      	b.n	800625e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2208      	movs	r2, #8
 80061a2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2280      	movs	r2, #128	; 0x80
 80061a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	220a      	movs	r2, #10
 80061b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	3363      	adds	r3, #99	; 0x63
 80061b8:	2210      	movs	r2, #16
 80061ba:	2100      	movs	r1, #0
 80061bc:	4618      	mov	r0, r3
 80061be:	f004 fbb0 	bl	800a922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2225      	movs	r2, #37	; 0x25
 80061c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f103 0210 	add.w	r2, r3, #16
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80061e6:	2301      	movs	r3, #1
 80061e8:	75fb      	strb	r3, [r7, #23]
      break;
 80061ea:	e038      	b.n	800625e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80061ec:	7afb      	ldrb	r3, [r7, #11]
 80061ee:	4619      	mov	r1, r3
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fd39 	bl	8005c68 <USBH_MSC_BOT_Process>
 80061f6:	4603      	mov	r3, r0
 80061f8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d12d      	bne.n	800625c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006206:	3303      	adds	r3, #3
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006212:	3302      	adds	r3, #2
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006220:	3301      	adds	r3, #1
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006226:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	061b      	lsls	r3, r3, #24
 8006232:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800623e:	3307      	adds	r3, #7
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	b29a      	uxth	r2, r3
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800624a:	3306      	adds	r3, #6
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	b29b      	uxth	r3, r3
 8006254:	4313      	orrs	r3, r2
 8006256:	b29a      	uxth	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	809a      	strh	r2, [r3, #4]
      break;
 800625c:	bf00      	nop
  }

  return error;
 800625e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	460b      	mov	r3, r1
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006276:	2302      	movs	r3, #2
 8006278:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800628a:	2b01      	cmp	r3, #1
 800628c:	d002      	beq.n	8006294 <USBH_MSC_SCSI_Inquiry+0x2c>
 800628e:	2b02      	cmp	r3, #2
 8006290:	d03d      	beq.n	800630e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006292:	e089      	b.n	80063a8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2224      	movs	r2, #36	; 0x24
 8006298:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2280      	movs	r2, #128	; 0x80
 800629e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	220a      	movs	r2, #10
 80062a6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3363      	adds	r3, #99	; 0x63
 80062ae:	220a      	movs	r2, #10
 80062b0:	2100      	movs	r1, #0
 80062b2:	4618      	mov	r0, r3
 80062b4:	f004 fb35 	bl	800a922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2212      	movs	r2, #18
 80062bc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80062c0:	7afb      	ldrb	r3, [r7, #11]
 80062c2:	015b      	lsls	r3, r3, #5
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2224      	movs	r2, #36	; 0x24
 80062e0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f103 0210 	add.w	r2, r3, #16
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006308:	2301      	movs	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]
      break;
 800630c:	e04c      	b.n	80063a8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	4619      	mov	r1, r3
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff fca8 	bl	8005c68 <USBH_MSC_BOT_Process>
 8006318:	4603      	mov	r3, r0
 800631a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d141      	bne.n	80063a6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006322:	2222      	movs	r2, #34	; 0x22
 8006324:	2100      	movs	r1, #0
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f004 fafb 	bl	800a922 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	b2da      	uxtb	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	b2da      	uxtb	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006354:	3301      	adds	r3, #1
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	b25b      	sxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	da03      	bge.n	8006366 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	709a      	strb	r2, [r3, #2]
 8006364:	e002      	b.n	800636c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	1cd8      	adds	r0, r3, #3
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006376:	3308      	adds	r3, #8
 8006378:	2208      	movs	r2, #8
 800637a:	4619      	mov	r1, r3
 800637c:	f004 fac6 	bl	800a90c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f103 000c 	add.w	r0, r3, #12
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800638c:	3310      	adds	r3, #16
 800638e:	2210      	movs	r2, #16
 8006390:	4619      	mov	r1, r3
 8006392:	f004 fabb 	bl	800a90c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	331d      	adds	r3, #29
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80063a0:	3220      	adds	r2, #32
 80063a2:	6812      	ldr	r2, [r2, #0]
 80063a4:	601a      	str	r2, [r3, #0]
      break;
 80063a6:	bf00      	nop
  }

  return error;
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b086      	sub	sp, #24
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	460b      	mov	r3, r1
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80063c0:	2302      	movs	r3, #2
 80063c2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d002      	beq.n	80063de <USBH_MSC_SCSI_RequestSense+0x2c>
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d03d      	beq.n	8006458 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80063dc:	e05d      	b.n	800649a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	220e      	movs	r2, #14
 80063e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2280      	movs	r2, #128	; 0x80
 80063e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	220a      	movs	r2, #10
 80063f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	3363      	adds	r3, #99	; 0x63
 80063f8:	2210      	movs	r2, #16
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f004 fa90 	bl	800a922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2203      	movs	r2, #3
 8006406:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800640a:	7afb      	ldrb	r3, [r7, #11]
 800640c:	015b      	lsls	r3, r3, #5
 800640e:	b2da      	uxtb	r2, r3
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	220e      	movs	r2, #14
 800642a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2202      	movs	r2, #2
 8006442:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f103 0210 	add.w	r2, r3, #16
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
      break;
 8006456:	e020      	b.n	800649a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006458:	7afb      	ldrb	r3, [r7, #11]
 800645a:	4619      	mov	r1, r3
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f7ff fc03 	bl	8005c68 <USBH_MSC_BOT_Process>
 8006462:	4603      	mov	r3, r0
 8006464:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d115      	bne.n	8006498 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006472:	3302      	adds	r3, #2
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	b2da      	uxtb	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006486:	7b1a      	ldrb	r2, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006492:	7b5a      	ldrb	r2, [r3, #13]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	709a      	strb	r2, [r3, #2]
      break;
 8006498:	bf00      	nop
  }

  return error;
 800649a:	7dfb      	ldrb	r3, [r7, #23]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	460b      	mov	r3, r1
 80064b2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80064b4:	2302      	movs	r3, #2
 80064b6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d002      	beq.n	80064d2 <USBH_MSC_SCSI_Write+0x2e>
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d047      	beq.n	8006560 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80064d0:	e04e      	b.n	8006570 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80064d8:	461a      	mov	r2, r3
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	fb03 f202 	mul.w	r2, r3, r2
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	220a      	movs	r2, #10
 80064f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	3363      	adds	r3, #99	; 0x63
 80064f8:	2210      	movs	r2, #16
 80064fa:	2100      	movs	r1, #0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f004 fa10 	bl	800a922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	222a      	movs	r2, #42	; 0x2a
 8006506:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800650a:	79fa      	ldrb	r2, [r7, #7]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006512:	79ba      	ldrb	r2, [r7, #6]
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800651a:	797a      	ldrb	r2, [r7, #5]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006522:	1d3b      	adds	r3, r7, #4
 8006524:	781a      	ldrb	r2, [r3, #0]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800652c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006536:	f107 0320 	add.w	r3, r7, #32
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800655a:	2301      	movs	r3, #1
 800655c:	75fb      	strb	r3, [r7, #23]
      break;
 800655e:	e007      	b.n	8006570 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	4619      	mov	r1, r3
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff fb7f 	bl	8005c68 <USBH_MSC_BOT_Process>
 800656a:	4603      	mov	r3, r0
 800656c:	75fb      	strb	r3, [r7, #23]
      break;
 800656e:	bf00      	nop
  }

  return error;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b086      	sub	sp, #24
 800657e:	af00      	add	r7, sp, #0
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	460b      	mov	r3, r1
 8006588:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800658a:	2302      	movs	r3, #2
 800658c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d002      	beq.n	80065a8 <USBH_MSC_SCSI_Read+0x2e>
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d047      	beq.n	8006636 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80065a6:	e04e      	b.n	8006646 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80065ae:	461a      	mov	r2, r3
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	fb03 f202 	mul.w	r2, r3, r2
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2280      	movs	r2, #128	; 0x80
 80065be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	220a      	movs	r2, #10
 80065c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3363      	adds	r3, #99	; 0x63
 80065ce:	2210      	movs	r2, #16
 80065d0:	2100      	movs	r1, #0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f004 f9a5 	bl	800a922 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2228      	movs	r2, #40	; 0x28
 80065dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80065e0:	79fa      	ldrb	r2, [r7, #7]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80065e8:	79ba      	ldrb	r2, [r7, #6]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80065f0:	797a      	ldrb	r2, [r7, #5]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80065f8:	1d3b      	adds	r3, r7, #4
 80065fa:	781a      	ldrb	r2, [r3, #0]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006602:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800660c:	f107 0320 	add.w	r3, r7, #32
 8006610:	781a      	ldrb	r2, [r3, #0]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006630:	2301      	movs	r3, #1
 8006632:	75fb      	strb	r3, [r7, #23]
      break;
 8006634:	e007      	b.n	8006646 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006636:	7afb      	ldrb	r3, [r7, #11]
 8006638:	4619      	mov	r1, r3
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f7ff fb14 	bl	8005c68 <USBH_MSC_BOT_Process>
 8006640:	4603      	mov	r3, r0
 8006642:	75fb      	strb	r3, [r7, #23]
      break;
 8006644:	bf00      	nop
  }

  return error;
 8006646:	7dfb      	ldrb	r3, [r7, #23]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006664:	2302      	movs	r3, #2
 8006666:	e029      	b.n	80066bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	79fa      	ldrb	r2, [r7, #7]
 800666c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f81f 	bl	80066c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f003 fea3 	bl	800a400 <USBH_LL_Init>

  return USBH_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	e009      	b.n	80066ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	33e0      	adds	r3, #224	; 0xe0
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	2200      	movs	r2, #0
 80066e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b0e      	cmp	r3, #14
 80066ee:	d9f2      	bls.n	80066d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e009      	b.n	800670a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3301      	adds	r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006710:	d3f1      	bcc.n	80066f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2240      	movs	r2, #64	; 0x40
 8006736:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d016      	beq.n	80067ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10e      	bne.n	80067a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006790:	1c59      	adds	r1, r3, #1
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	33de      	adds	r3, #222	; 0xde
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
 80067a6:	e004      	b.n	80067b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067a8:	2302      	movs	r3, #2
 80067aa:	73fb      	strb	r3, [r7, #15]
 80067ac:	e001      	b.n	80067b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80067ae:	2302      	movs	r3, #2
 80067b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d204      	bcs.n	80067e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80067e4:	e001      	b.n	80067ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80067e6:	2302      	movs	r3, #2
 80067e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	4608      	mov	r0, r1
 8006802:	4611      	mov	r1, r2
 8006804:	461a      	mov	r2, r3
 8006806:	4603      	mov	r3, r0
 8006808:	70fb      	strb	r3, [r7, #3]
 800680a:	460b      	mov	r3, r1
 800680c:	70bb      	strb	r3, [r7, #2]
 800680e:	4613      	mov	r3, r2
 8006810:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006816:	2300      	movs	r3, #0
 8006818:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006820:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006822:	e025      	b.n	8006870 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	221a      	movs	r2, #26
 8006828:	fb02 f303 	mul.w	r3, r2, r3
 800682c:	3308      	adds	r3, #8
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	3302      	adds	r3, #2
 8006834:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	795b      	ldrb	r3, [r3, #5]
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	429a      	cmp	r2, r3
 800683e:	d002      	beq.n	8006846 <USBH_FindInterface+0x4e>
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	2bff      	cmp	r3, #255	; 0xff
 8006844:	d111      	bne.n	800686a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800684a:	78ba      	ldrb	r2, [r7, #2]
 800684c:	429a      	cmp	r2, r3
 800684e:	d002      	beq.n	8006856 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006850:	78bb      	ldrb	r3, [r7, #2]
 8006852:	2bff      	cmp	r3, #255	; 0xff
 8006854:	d109      	bne.n	800686a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800685a:	787a      	ldrb	r2, [r7, #1]
 800685c:	429a      	cmp	r2, r3
 800685e:	d002      	beq.n	8006866 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006860:	787b      	ldrb	r3, [r7, #1]
 8006862:	2bff      	cmp	r3, #255	; 0xff
 8006864:	d101      	bne.n	800686a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	e006      	b.n	8006878 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	3301      	adds	r3, #1
 800686e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d9d6      	bls.n	8006824 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006876:	23ff      	movs	r3, #255	; 0xff
}
 8006878:	4618      	mov	r0, r3
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f003 fdf3 	bl	800a478 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006892:	2101      	movs	r1, #1
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f003 ff0a 	bl	800a6ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af04      	add	r7, sp, #16
 80068aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80068ac:	2302      	movs	r3, #2
 80068ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d102      	bne.n	80068c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2203      	movs	r2, #3
 80068c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b0b      	cmp	r3, #11
 80068ce:	f200 81b3 	bhi.w	8006c38 <USBH_Process+0x394>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <USBH_Process+0x34>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	08006909 	.word	0x08006909
 80068dc:	0800693b 	.word	0x0800693b
 80068e0:	080069a3 	.word	0x080069a3
 80068e4:	08006bd3 	.word	0x08006bd3
 80068e8:	08006c39 	.word	0x08006c39
 80068ec:	08006a47 	.word	0x08006a47
 80068f0:	08006b79 	.word	0x08006b79
 80068f4:	08006a7d 	.word	0x08006a7d
 80068f8:	08006a9d 	.word	0x08006a9d
 80068fc:	08006abd 	.word	0x08006abd
 8006900:	08006aeb 	.word	0x08006aeb
 8006904:	08006bbb 	.word	0x08006bbb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8193 	beq.w	8006c3c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800691c:	20c8      	movs	r0, #200	; 0xc8
 800691e:	f003 ff3d 	bl	800a79c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f003 fe03 	bl	800a52e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006938:	e180      	b.n	8006c3c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006940:	2b01      	cmp	r3, #1
 8006942:	d107      	bne.n	8006954 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006952:	e182      	b.n	8006c5a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800695a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800695e:	d914      	bls.n	800698a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006966:	3301      	adds	r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006976:	2b03      	cmp	r3, #3
 8006978:	d903      	bls.n	8006982 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	220d      	movs	r2, #13
 800697e:	701a      	strb	r2, [r3, #0]
      break;
 8006980:	e16b      	b.n	8006c5a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	701a      	strb	r2, [r3, #0]
      break;
 8006988:	e167      	b.n	8006c5a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006990:	f103 020a 	add.w	r2, r3, #10
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800699a:	200a      	movs	r0, #10
 800699c:	f003 fefe 	bl	800a79c <USBH_Delay>
      break;
 80069a0:	e15b      	b.n	8006c5a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069b2:	2104      	movs	r1, #4
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80069b8:	2064      	movs	r0, #100	; 0x64
 80069ba:	f003 feef 	bl	800a79c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f003 fd90 	bl	800a4e4 <USBH_LL_GetSpeed>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2205      	movs	r2, #5
 80069d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80069d4:	2100      	movs	r1, #0
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 f931 	bl	8007c3e <USBH_AllocPipe>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80069e4:	2180      	movs	r1, #128	; 0x80
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 f929 	bl	8007c3e <USBH_AllocPipe>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	7919      	ldrb	r1, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a08:	b292      	uxth	r2, r2
 8006a0a:	9202      	str	r2, [sp, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	9201      	str	r2, [sp, #4]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	4603      	mov	r3, r0
 8006a14:	2280      	movs	r2, #128	; 0x80
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 f8e2 	bl	8007be0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	7959      	ldrb	r1, [r3, #5]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a30:	b292      	uxth	r2, r2
 8006a32:	9202      	str	r2, [sp, #8]
 8006a34:	2200      	movs	r2, #0
 8006a36:	9201      	str	r2, [sp, #4]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 f8ce 	bl	8007be0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a44:	e109      	b.n	8006c5a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f90c 	bl	8006c64 <USBH_HandleEnum>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 80f3 	bne.w	8006c40 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d103      	bne.n	8006a74 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2208      	movs	r2, #8
 8006a70:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a72:	e0e5      	b.n	8006c40 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2207      	movs	r2, #7
 8006a78:	701a      	strb	r2, [r3, #0]
      break;
 8006a7a:	e0e1      	b.n	8006c40 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80de 	beq.w	8006c44 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a8e:	2101      	movs	r1, #1
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2208      	movs	r2, #8
 8006a98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006a9a:	e0d3      	b.n	8006c44 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fc20 	bl	80072ec <USBH_SetCfg>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 80ca 	bne.w	8006c48 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2209      	movs	r2, #9
 8006ab8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006aba:	e0c5      	b.n	8006c48 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006aca:	2101      	movs	r1, #1
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fc30 	bl	8007332 <USBH_SetFeature>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f040 80b9 	bne.w	8006c4c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	220a      	movs	r2, #10
 8006ade:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ae0:	e0b4      	b.n	8006c4c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	220a      	movs	r2, #10
 8006ae6:	701a      	strb	r2, [r3, #0]
      break;
 8006ae8:	e0b0      	b.n	8006c4c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80ad 	beq.w	8006c50 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
 8006b02:	e016      	b.n	8006b32 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b04:	7bfa      	ldrb	r2, [r7, #15]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	32de      	adds	r2, #222	; 0xde
 8006b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0e:	791a      	ldrb	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d108      	bne.n	8006b2c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b1a:	7bfa      	ldrb	r2, [r7, #15]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	32de      	adds	r2, #222	; 0xde
 8006b20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006b2a:	e005      	b.n	8006b38 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	73fb      	strb	r3, [r7, #15]
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0e5      	beq.n	8006b04 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d016      	beq.n	8006b70 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d109      	bne.n	8006b68 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2206      	movs	r2, #6
 8006b58:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b60:	2103      	movs	r1, #3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b66:	e073      	b.n	8006c50 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	220d      	movs	r2, #13
 8006b6c:	701a      	strb	r2, [r3, #0]
      break;
 8006b6e:	e06f      	b.n	8006c50 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	220d      	movs	r2, #13
 8006b74:	701a      	strb	r2, [r3, #0]
      break;
 8006b76:	e06b      	b.n	8006c50 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d017      	beq.n	8006bb2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d103      	bne.n	8006ba2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	220b      	movs	r2, #11
 8006b9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ba0:	e058      	b.n	8006c54 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d154      	bne.n	8006c54 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	220d      	movs	r2, #13
 8006bae:	701a      	strb	r2, [r3, #0]
      break;
 8006bb0:	e050      	b.n	8006c54 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	220d      	movs	r2, #13
 8006bb6:	701a      	strb	r2, [r3, #0]
      break;
 8006bb8:	e04c      	b.n	8006c54 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d049      	beq.n	8006c58 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
      }
      break;
 8006bd0:	e042      	b.n	8006c58 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fd72 	bl	80066c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c0e:	2105      	movs	r1, #5
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d107      	bne.n	8006c30 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fe2b 	bl	8006884 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c2e:	e014      	b.n	8006c5a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f003 fc21 	bl	800a478 <USBH_LL_Start>
      break;
 8006c36:	e010      	b.n	8006c5a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006c38:	bf00      	nop
 8006c3a:	e00e      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c3c:	bf00      	nop
 8006c3e:	e00c      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c40:	bf00      	nop
 8006c42:	e00a      	b.n	8006c5a <USBH_Process+0x3b6>
    break;
 8006c44:	bf00      	nop
 8006c46:	e008      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c48:	bf00      	nop
 8006c4a:	e006      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c4c:	bf00      	nop
 8006c4e:	e004      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c50:	bf00      	nop
 8006c52:	e002      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c54:	bf00      	nop
 8006c56:	e000      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c58:	bf00      	nop
  }
  return USBH_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af04      	add	r7, sp, #16
 8006c6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006c70:	2301      	movs	r3, #1
 8006c72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	2b07      	cmp	r3, #7
 8006c7a:	f200 81c1 	bhi.w	8007000 <USBH_HandleEnum+0x39c>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <USBH_HandleEnum+0x20>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006ca5 	.word	0x08006ca5
 8006c88:	08006d63 	.word	0x08006d63
 8006c8c:	08006dcd 	.word	0x08006dcd
 8006c90:	08006e5b 	.word	0x08006e5b
 8006c94:	08006ec5 	.word	0x08006ec5
 8006c98:	08006f35 	.word	0x08006f35
 8006c9c:	08006f7b 	.word	0x08006f7b
 8006ca0:	08006fc1 	.word	0x08006fc1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ca4:	2108      	movs	r1, #8
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa50 	bl	800714c <USBH_Get_DevDesc>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d130      	bne.n	8006d18 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	7919      	ldrb	r1, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006cda:	b292      	uxth	r2, r2
 8006cdc:	9202      	str	r2, [sp, #8]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	9201      	str	r2, [sp, #4]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2280      	movs	r2, #128	; 0x80
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 ff79 	bl	8007be0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7959      	ldrb	r1, [r3, #5]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d02:	b292      	uxth	r2, r2
 8006d04:	9202      	str	r2, [sp, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	9201      	str	r2, [sp, #4]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2200      	movs	r2, #0
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 ff65 	bl	8007be0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d16:	e175      	b.n	8007004 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	f040 8172 	bne.w	8007004 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d26:	3301      	adds	r3, #1
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d903      	bls.n	8006d42 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	220d      	movs	r2, #13
 8006d3e:	701a      	strb	r2, [r3, #0]
      break;
 8006d40:	e160      	b.n	8007004 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	795b      	ldrb	r3, [r3, #5]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 ff99 	bl	8007c80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	791b      	ldrb	r3, [r3, #4]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 ff93 	bl	8007c80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
      break;
 8006d60:	e150      	b.n	8007004 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006d62:	2112      	movs	r1, #18
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f9f1 	bl	800714c <USBH_Get_DevDesc>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d103      	bne.n	8006d7c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d7a:	e145      	b.n	8007008 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	f040 8142 	bne.w	8007008 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d903      	bls.n	8006da6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	220d      	movs	r2, #13
 8006da2:	701a      	strb	r2, [r3, #0]
      break;
 8006da4:	e130      	b.n	8007008 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	795b      	ldrb	r3, [r3, #5]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 ff67 	bl	8007c80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	791b      	ldrb	r3, [r3, #4]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 ff61 	bl	8007c80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
      break;
 8006dca:	e11d      	b.n	8007008 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006dcc:	2101      	movs	r1, #1
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa68 	bl	80072a4 <USBH_SetAddress>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d132      	bne.n	8006e44 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006dde:	2002      	movs	r0, #2
 8006de0:	f003 fcdc 	bl	800a79c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2203      	movs	r2, #3
 8006df0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7919      	ldrb	r1, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e06:	b292      	uxth	r2, r2
 8006e08:	9202      	str	r2, [sp, #8]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	9201      	str	r2, [sp, #4]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	4603      	mov	r3, r0
 8006e12:	2280      	movs	r2, #128	; 0x80
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fee3 	bl	8007be0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7959      	ldrb	r1, [r3, #5]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e2e:	b292      	uxth	r2, r2
 8006e30:	9202      	str	r2, [sp, #8]
 8006e32:	2200      	movs	r2, #0
 8006e34:	9201      	str	r2, [sp, #4]
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fecf 	bl	8007be0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e42:	e0e3      	b.n	800700c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	f040 80e0 	bne.w	800700c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	220d      	movs	r2, #13
 8006e50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	705a      	strb	r2, [r3, #1]
      break;
 8006e58:	e0d8      	b.n	800700c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006e5a:	2109      	movs	r1, #9
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f99d 	bl	800719c <USBH_Get_CfgDesc>
 8006e62:	4603      	mov	r3, r0
 8006e64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e72:	e0cd      	b.n	8007010 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	f040 80ca 	bne.w	8007010 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e82:	3301      	adds	r3, #1
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d903      	bls.n	8006e9e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	220d      	movs	r2, #13
 8006e9a:	701a      	strb	r2, [r3, #0]
      break;
 8006e9c:	e0b8      	b.n	8007010 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	795b      	ldrb	r3, [r3, #5]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 feeb 	bl	8007c80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	791b      	ldrb	r3, [r3, #4]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fee5 	bl	8007c80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	701a      	strb	r2, [r3, #0]
      break;
 8006ec2:	e0a5      	b.n	8007010 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f965 	bl	800719c <USBH_Get_CfgDesc>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d103      	bne.n	8006ee4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2205      	movs	r2, #5
 8006ee0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ee2:	e097      	b.n	8007014 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	f040 8094 	bne.w	8007014 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d903      	bls.n	8006f0e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	220d      	movs	r2, #13
 8006f0a:	701a      	strb	r2, [r3, #0]
      break;
 8006f0c:	e082      	b.n	8007014 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	795b      	ldrb	r3, [r3, #5]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 feb3 	bl	8007c80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	791b      	ldrb	r3, [r3, #4]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fead 	bl	8007c80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
      break;
 8006f32:	e06f      	b.n	8007014 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d019      	beq.n	8006f72 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f4a:	23ff      	movs	r3, #255	; 0xff
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f949 	bl	80071e4 <USBH_Get_StringDesc>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2206      	movs	r2, #6
 8006f60:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f62:	e059      	b.n	8007018 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d156      	bne.n	8007018 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2206      	movs	r2, #6
 8006f6e:	705a      	strb	r2, [r3, #1]
      break;
 8006f70:	e052      	b.n	8007018 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2206      	movs	r2, #6
 8006f76:	705a      	strb	r2, [r3, #1]
      break;
 8006f78:	e04e      	b.n	8007018 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d019      	beq.n	8006fb8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f90:	23ff      	movs	r3, #255	; 0xff
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f926 	bl	80071e4 <USBH_Get_StringDesc>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2207      	movs	r2, #7
 8006fa6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fa8:	e038      	b.n	800701c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d135      	bne.n	800701c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2207      	movs	r2, #7
 8006fb4:	705a      	strb	r2, [r3, #1]
      break;
 8006fb6:	e031      	b.n	800701c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2207      	movs	r2, #7
 8006fbc:	705a      	strb	r2, [r3, #1]
      break;
 8006fbe:	e02d      	b.n	800701c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d017      	beq.n	8006ffa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006fd6:	23ff      	movs	r3, #255	; 0xff
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f903 	bl	80071e4 <USBH_Get_StringDesc>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006fec:	e018      	b.n	8007020 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d115      	bne.n	8007020 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff8:	e012      	b.n	8007020 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffe:	e00f      	b.n	8007020 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007000:	bf00      	nop
 8007002:	e00e      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007004:	bf00      	nop
 8007006:	e00c      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007008:	bf00      	nop
 800700a:	e00a      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 800700c:	bf00      	nop
 800700e:	e008      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007010:	bf00      	nop
 8007012:	e006      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007014:	bf00      	nop
 8007016:	e004      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007018:	bf00      	nop
 800701a:	e002      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007020:	bf00      	nop
  }
  return Status;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800703e:	bf00      	nop
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f804 	bl	800706e <USBH_HandleSof>
}
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b0b      	cmp	r3, #11
 800707e:	d10a      	bne.n	8007096 <USBH_HandleSof+0x28>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	4798      	blx	r3
  }
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80070ae:	bf00      	nop
}
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80070ca:	bf00      	nop
}
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f003 f9c2 	bl	800a4ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	791b      	ldrb	r3, [r3, #4]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fda5 	bl	8007c80 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	795b      	ldrb	r3, [r3, #5]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fd9f 	bl	8007c80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af02      	add	r7, sp, #8
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	b29b      	uxth	r3, r3
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	4613      	mov	r3, r2
 8007166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800716a:	2100      	movs	r1, #0
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f864 	bl	800723a <USBH_GetDescriptor>
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007188:	78fa      	ldrb	r2, [r7, #3]
 800718a:	b292      	uxth	r2, r2
 800718c:	4619      	mov	r1, r3
 800718e:	f000 f918 	bl	80073c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007192:	7bfb      	ldrb	r3, [r7, #15]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	331c      	adds	r3, #28
 80071ac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80071ae:	887b      	ldrh	r3, [r7, #2]
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071b8:	2100      	movs	r1, #0
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f83d 	bl	800723a <USBH_GetDescriptor>
 80071c0:	4603      	mov	r3, r0
 80071c2:	72fb      	strb	r3, [r7, #11]
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d107      	bne.n	80071da <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071d0:	887a      	ldrh	r2, [r7, #2]
 80071d2:	68f9      	ldr	r1, [r7, #12]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f964 	bl	80074a2 <USBH_ParseCfgDesc>
  }

  return status;
 80071da:	7afb      	ldrb	r3, [r7, #11]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af02      	add	r7, sp, #8
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	607a      	str	r2, [r7, #4]
 80071ee:	461a      	mov	r2, r3
 80071f0:	460b      	mov	r3, r1
 80071f2:	72fb      	strb	r3, [r7, #11]
 80071f4:	4613      	mov	r3, r2
 80071f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80071f8:	7afb      	ldrb	r3, [r7, #11]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007200:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007208:	893b      	ldrh	r3, [r7, #8]
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	460b      	mov	r3, r1
 800720e:	2100      	movs	r1, #0
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f812 	bl	800723a <USBH_GetDescriptor>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d107      	bne.n	8007230 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007226:	893a      	ldrh	r2, [r7, #8]
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fa37 	bl	800769e <USBH_ParseStringDesc>
  }

  return status;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	72fb      	strb	r3, [r7, #11]
 8007248:	4613      	mov	r3, r2
 800724a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	789b      	ldrb	r3, [r3, #2]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d11c      	bne.n	800728e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800725a:	b2da      	uxtb	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2206      	movs	r2, #6
 8007264:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	893a      	ldrh	r2, [r7, #8]
 800726a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800726c:	893b      	ldrh	r3, [r7, #8]
 800726e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007276:	d104      	bne.n	8007282 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f240 4209 	movw	r2, #1033	; 0x409
 800727e:	829a      	strh	r2, [r3, #20]
 8007280:	e002      	b.n	8007288 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8b3a      	ldrh	r2, [r7, #24]
 800728c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800728e:	8b3b      	ldrh	r3, [r7, #24]
 8007290:	461a      	mov	r2, r3
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 fa50 	bl	800773a <USBH_CtlReq>
 800729a:	4603      	mov	r3, r0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	789b      	ldrb	r3, [r3, #2]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d10f      	bne.n	80072d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2205      	movs	r2, #5
 80072c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80072d8:	2200      	movs	r2, #0
 80072da:	2100      	movs	r1, #0
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa2c 	bl	800773a <USBH_CtlReq>
 80072e2:	4603      	mov	r3, r0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	789b      	ldrb	r3, [r3, #2]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d10e      	bne.n	800731e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2209      	movs	r2, #9
 800730a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	887a      	ldrh	r2, [r7, #2]
 8007310:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800731e:	2200      	movs	r2, #0
 8007320:	2100      	movs	r1, #0
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa09 	bl	800773a <USBH_CtlReq>
 8007328:	4603      	mov	r3, r0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	789b      	ldrb	r3, [r3, #2]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d10f      	bne.n	8007366 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2203      	movs	r2, #3
 8007350:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	b29a      	uxth	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9e5 	bl	800773a <USBH_CtlReq>
 8007370:	4603      	mov	r3, r0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	789b      	ldrb	r3, [r3, #2]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d10f      	bne.n	80073ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2202      	movs	r2, #2
 8007392:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80073ae:	2200      	movs	r2, #0
 80073b0:	2100      	movs	r1, #0
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9c1 	bl	800773a <USBH_CtlReq>
 80073b8:	4603      	mov	r3, r0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	4613      	mov	r3, r2
 80073ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	785a      	ldrb	r2, [r3, #1]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	3302      	adds	r3, #2
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	3303      	adds	r3, #3
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	791a      	ldrb	r2, [r3, #4]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	795a      	ldrb	r2, [r3, #5]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	799a      	ldrb	r2, [r3, #6]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	79da      	ldrb	r2, [r3, #7]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	2b08      	cmp	r3, #8
 8007420:	d939      	bls.n	8007496 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	3308      	adds	r3, #8
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	b29a      	uxth	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	3309      	adds	r3, #9
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	021b      	lsls	r3, r3, #8
 8007434:	b29b      	uxth	r3, r3
 8007436:	4313      	orrs	r3, r2
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	330a      	adds	r3, #10
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	b29a      	uxth	r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	330b      	adds	r3, #11
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b29b      	uxth	r3, r3
 800744e:	021b      	lsls	r3, r3, #8
 8007450:	b29b      	uxth	r3, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	b29a      	uxth	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	330c      	adds	r3, #12
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	b29a      	uxth	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	330d      	adds	r3, #13
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	b29b      	uxth	r3, r3
 800746e:	4313      	orrs	r3, r2
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	7b9a      	ldrb	r2, [r3, #14]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	7bda      	ldrb	r2, [r3, #15]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	7c1a      	ldrb	r2, [r3, #16]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	7c5a      	ldrb	r2, [r3, #17]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	745a      	strb	r2, [r3, #17]
  }
}
 8007496:	bf00      	nop
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b08a      	sub	sp, #40	; 0x28
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	4613      	mov	r3, r2
 80074ae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	785a      	ldrb	r2, [r3, #1]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	3302      	adds	r3, #2
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	3303      	adds	r3, #3
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	4313      	orrs	r3, r2
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	791a      	ldrb	r2, [r3, #4]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	795a      	ldrb	r2, [r3, #5]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	799a      	ldrb	r2, [r3, #6]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	79da      	ldrb	r2, [r3, #7]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	7a1a      	ldrb	r2, [r3, #8]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	2b09      	cmp	r3, #9
 800751c:	d95f      	bls.n	80075de <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800751e:	2309      	movs	r3, #9
 8007520:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007526:	e051      	b.n	80075cc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007528:	f107 0316 	add.w	r3, r7, #22
 800752c:	4619      	mov	r1, r3
 800752e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007530:	f000 f8e8 	bl	8007704 <USBH_GetNextDesc>
 8007534:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	2b04      	cmp	r3, #4
 800753c:	d146      	bne.n	80075cc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800753e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007542:	221a      	movs	r2, #26
 8007544:	fb02 f303 	mul.w	r3, r2, r3
 8007548:	3308      	adds	r3, #8
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4413      	add	r3, r2
 800754e:	3302      	adds	r3, #2
 8007550:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007554:	69f8      	ldr	r0, [r7, #28]
 8007556:	f000 f846 	bl	80075e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007560:	2300      	movs	r3, #0
 8007562:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007564:	e022      	b.n	80075ac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007566:	f107 0316 	add.w	r3, r7, #22
 800756a:	4619      	mov	r1, r3
 800756c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800756e:	f000 f8c9 	bl	8007704 <USBH_GetNextDesc>
 8007572:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b05      	cmp	r3, #5
 800757a:	d117      	bne.n	80075ac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800757c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007580:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007584:	3201      	adds	r2, #1
 8007586:	00d2      	lsls	r2, r2, #3
 8007588:	211a      	movs	r1, #26
 800758a:	fb01 f303 	mul.w	r3, r1, r3
 800758e:	4413      	add	r3, r2
 8007590:	3308      	adds	r3, #8
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	3304      	adds	r3, #4
 8007598:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800759a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800759c:	69b8      	ldr	r0, [r7, #24]
 800759e:	f000 f851 	bl	8007644 <USBH_ParseEPDesc>
            ep_ix++;
 80075a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80075a6:	3301      	adds	r3, #1
 80075a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	791b      	ldrb	r3, [r3, #4]
 80075b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d204      	bcs.n	80075c2 <USBH_ParseCfgDesc+0x120>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	885a      	ldrh	r2, [r3, #2]
 80075bc:	8afb      	ldrh	r3, [r7, #22]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d8d1      	bhi.n	8007566 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80075c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075c6:	3301      	adds	r3, #1
 80075c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d804      	bhi.n	80075de <USBH_ParseCfgDesc+0x13c>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	885a      	ldrh	r2, [r3, #2]
 80075d8:	8afb      	ldrh	r3, [r7, #22]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d8a4      	bhi.n	8007528 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80075de:	bf00      	nop
 80075e0:	3728      	adds	r7, #40	; 0x28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	785a      	ldrb	r2, [r3, #1]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	789a      	ldrb	r2, [r3, #2]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	78da      	ldrb	r2, [r3, #3]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	791a      	ldrb	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	795a      	ldrb	r2, [r3, #5]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	799a      	ldrb	r2, [r3, #6]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	79da      	ldrb	r2, [r3, #7]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	7a1a      	ldrb	r2, [r3, #8]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	721a      	strb	r2, [r3, #8]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	785a      	ldrb	r2, [r3, #1]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	789a      	ldrb	r2, [r3, #2]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	78da      	ldrb	r2, [r3, #3]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	3304      	adds	r3, #4
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	b29a      	uxth	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	3305      	adds	r3, #5
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	b29b      	uxth	r3, r3
 8007682:	4313      	orrs	r3, r2
 8007684:	b29a      	uxth	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	799a      	ldrb	r2, [r3, #6]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	719a      	strb	r2, [r3, #6]
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800769e:	b480      	push	{r7}
 80076a0:	b087      	sub	sp, #28
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	4613      	mov	r3, r2
 80076aa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d120      	bne.n	80076f8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	1e9a      	subs	r2, r3, #2
 80076bc:	88fb      	ldrh	r3, [r7, #6]
 80076be:	4293      	cmp	r3, r2
 80076c0:	bf28      	it	cs
 80076c2:	4613      	movcs	r3, r2
 80076c4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3302      	adds	r3, #2
 80076ca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80076cc:	2300      	movs	r3, #0
 80076ce:	82fb      	strh	r3, [r7, #22]
 80076d0:	e00b      	b.n	80076ea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80076d2:	8afb      	ldrh	r3, [r7, #22]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80076e4:	8afb      	ldrh	r3, [r7, #22]
 80076e6:	3302      	adds	r3, #2
 80076e8:	82fb      	strh	r3, [r7, #22]
 80076ea:	8afa      	ldrh	r2, [r7, #22]
 80076ec:	8abb      	ldrh	r3, [r7, #20]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d3ef      	bcc.n	80076d2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
  }
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	881a      	ldrh	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b29b      	uxth	r3, r3
 8007718:	4413      	add	r3, r2
 800771a:	b29a      	uxth	r2, r3
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4413      	add	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800772c:	68fb      	ldr	r3, [r7, #12]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b086      	sub	sp, #24
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	4613      	mov	r3, r2
 8007746:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007748:	2301      	movs	r3, #1
 800774a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	789b      	ldrb	r3, [r3, #2]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d002      	beq.n	800775a <USBH_CtlReq+0x20>
 8007754:	2b02      	cmp	r3, #2
 8007756:	d00f      	beq.n	8007778 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007758:	e027      	b.n	80077aa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2202      	movs	r2, #2
 8007770:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007772:	2301      	movs	r3, #1
 8007774:	75fb      	strb	r3, [r7, #23]
      break;
 8007776:	e018      	b.n	80077aa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f81b 	bl	80077b4 <USBH_HandleControl>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <USBH_CtlReq+0x54>
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b03      	cmp	r3, #3
 800778c:	d106      	bne.n	800779c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	761a      	strb	r2, [r3, #24]
      break;
 800779a:	e005      	b.n	80077a8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d102      	bne.n	80077a8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	709a      	strb	r2, [r3, #2]
      break;
 80077a8:	bf00      	nop
  }
  return status;
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80077bc:	2301      	movs	r3, #1
 80077be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7e1b      	ldrb	r3, [r3, #24]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	2b0a      	cmp	r3, #10
 80077cc:	f200 8158 	bhi.w	8007a80 <USBH_HandleControl+0x2cc>
 80077d0:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <USBH_HandleControl+0x24>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	08007805 	.word	0x08007805
 80077dc:	0800781f 	.word	0x0800781f
 80077e0:	08007889 	.word	0x08007889
 80077e4:	080078af 	.word	0x080078af
 80077e8:	080078e7 	.word	0x080078e7
 80077ec:	08007913 	.word	0x08007913
 80077f0:	08007965 	.word	0x08007965
 80077f4:	08007987 	.word	0x08007987
 80077f8:	080079c3 	.word	0x080079c3
 80077fc:	080079eb 	.word	0x080079eb
 8007800:	08007a29 	.word	0x08007a29
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f103 0110 	add.w	r1, r3, #16
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	795b      	ldrb	r3, [r3, #5]
 800780e:	461a      	mov	r2, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f945 	bl	8007aa0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	761a      	strb	r2, [r3, #24]
      break;
 800781c:	e13b      	b.n	8007a96 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	795b      	ldrb	r3, [r3, #5]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f002 ff2f 	bl	800a688 <USBH_LL_GetURBState>
 800782a:	4603      	mov	r3, r0
 800782c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d11e      	bne.n	8007872 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7c1b      	ldrb	r3, [r3, #16]
 8007838:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800783c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8adb      	ldrh	r3, [r3, #22]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007846:	7b7b      	ldrb	r3, [r7, #13]
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d103      	bne.n	8007854 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2203      	movs	r2, #3
 8007850:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007852:	e117      	b.n	8007a84 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2205      	movs	r2, #5
 8007858:	761a      	strb	r2, [r3, #24]
      break;
 800785a:	e113      	b.n	8007a84 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800785c:	7b7b      	ldrb	r3, [r7, #13]
 800785e:	2b80      	cmp	r3, #128	; 0x80
 8007860:	d103      	bne.n	800786a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2209      	movs	r2, #9
 8007866:	761a      	strb	r2, [r3, #24]
      break;
 8007868:	e10c      	b.n	8007a84 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2207      	movs	r2, #7
 800786e:	761a      	strb	r2, [r3, #24]
      break;
 8007870:	e108      	b.n	8007a84 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b04      	cmp	r3, #4
 8007876:	d003      	beq.n	8007880 <USBH_HandleControl+0xcc>
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	2b02      	cmp	r3, #2
 800787c:	f040 8102 	bne.w	8007a84 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	220b      	movs	r2, #11
 8007884:	761a      	strb	r2, [r3, #24]
      break;
 8007886:	e0fd      	b.n	8007a84 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6899      	ldr	r1, [r3, #8]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	899a      	ldrh	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	791b      	ldrb	r3, [r3, #4]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f93c 	bl	8007b1e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2204      	movs	r2, #4
 80078aa:	761a      	strb	r2, [r3, #24]
      break;
 80078ac:	e0f3      	b.n	8007a96 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	791b      	ldrb	r3, [r3, #4]
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f002 fee7 	bl	800a688 <USBH_LL_GetURBState>
 80078ba:	4603      	mov	r3, r0
 80078bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d102      	bne.n	80078ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2209      	movs	r2, #9
 80078c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b05      	cmp	r3, #5
 80078ce:	d102      	bne.n	80078d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80078d0:	2303      	movs	r3, #3
 80078d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078d4:	e0d8      	b.n	8007a88 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	f040 80d5 	bne.w	8007a88 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	220b      	movs	r2, #11
 80078e2:	761a      	strb	r2, [r3, #24]
      break;
 80078e4:	e0d0      	b.n	8007a88 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6899      	ldr	r1, [r3, #8]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	899a      	ldrh	r2, [r3, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7958      	ldrb	r0, [r3, #5]
 80078f2:	2301      	movs	r3, #1
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	4603      	mov	r3, r0
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f8eb 	bl	8007ad4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007904:	b29a      	uxth	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2206      	movs	r2, #6
 800790e:	761a      	strb	r2, [r3, #24]
      break;
 8007910:	e0c1      	b.n	8007a96 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	795b      	ldrb	r3, [r3, #5]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f002 feb5 	bl	800a688 <USBH_LL_GetURBState>
 800791e:	4603      	mov	r3, r0
 8007920:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d103      	bne.n	8007930 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2207      	movs	r2, #7
 800792c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800792e:	e0ad      	b.n	8007a8c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	2b05      	cmp	r3, #5
 8007934:	d105      	bne.n	8007942 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	220c      	movs	r2, #12
 800793a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800793c:	2303      	movs	r3, #3
 800793e:	73fb      	strb	r3, [r7, #15]
      break;
 8007940:	e0a4      	b.n	8007a8c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d103      	bne.n	8007950 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2205      	movs	r2, #5
 800794c:	761a      	strb	r2, [r3, #24]
      break;
 800794e:	e09d      	b.n	8007a8c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b04      	cmp	r3, #4
 8007954:	f040 809a 	bne.w	8007a8c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	220b      	movs	r2, #11
 800795c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800795e:	2302      	movs	r3, #2
 8007960:	73fb      	strb	r3, [r7, #15]
      break;
 8007962:	e093      	b.n	8007a8c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	791b      	ldrb	r3, [r3, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	2100      	movs	r1, #0
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f8d6 	bl	8007b1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007978:	b29a      	uxth	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2208      	movs	r2, #8
 8007982:	761a      	strb	r2, [r3, #24]

      break;
 8007984:	e087      	b.n	8007a96 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	791b      	ldrb	r3, [r3, #4]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f002 fe7b 	bl	800a688 <USBH_LL_GetURBState>
 8007992:	4603      	mov	r3, r0
 8007994:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d105      	bne.n	80079a8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	220d      	movs	r2, #13
 80079a0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079a6:	e073      	b.n	8007a90 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d103      	bne.n	80079b6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	220b      	movs	r2, #11
 80079b2:	761a      	strb	r2, [r3, #24]
      break;
 80079b4:	e06c      	b.n	8007a90 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	d169      	bne.n	8007a90 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80079bc:	2303      	movs	r3, #3
 80079be:	73fb      	strb	r3, [r7, #15]
      break;
 80079c0:	e066      	b.n	8007a90 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	795a      	ldrb	r2, [r3, #5]
 80079c6:	2301      	movs	r3, #1
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	4613      	mov	r3, r2
 80079cc:	2200      	movs	r2, #0
 80079ce:	2100      	movs	r1, #0
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f87f 	bl	8007ad4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079dc:	b29a      	uxth	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	220a      	movs	r2, #10
 80079e6:	761a      	strb	r2, [r3, #24]
      break;
 80079e8:	e055      	b.n	8007a96 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	795b      	ldrb	r3, [r3, #5]
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f002 fe49 	bl	800a688 <USBH_LL_GetURBState>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d105      	bne.n	8007a0c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	220d      	movs	r2, #13
 8007a08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a0a:	e043      	b.n	8007a94 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d103      	bne.n	8007a1a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2209      	movs	r2, #9
 8007a16:	761a      	strb	r2, [r3, #24]
      break;
 8007a18:	e03c      	b.n	8007a94 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d139      	bne.n	8007a94 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	220b      	movs	r2, #11
 8007a24:	761a      	strb	r2, [r3, #24]
      break;
 8007a26:	e035      	b.n	8007a94 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	7e5b      	ldrb	r3, [r3, #25]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	765a      	strb	r2, [r3, #25]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	7e5b      	ldrb	r3, [r3, #25]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d806      	bhi.n	8007a4a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007a48:	e025      	b.n	8007a96 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a50:	2106      	movs	r1, #6
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	795b      	ldrb	r3, [r3, #5]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f90c 	bl	8007c80 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	791b      	ldrb	r3, [r3, #4]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f906 	bl	8007c80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7e:	e00a      	b.n	8007a96 <USBH_HandleControl+0x2e2>

    default:
      break;
 8007a80:	bf00      	nop
 8007a82:	e008      	b.n	8007a96 <USBH_HandleControl+0x2e2>
      break;
 8007a84:	bf00      	nop
 8007a86:	e006      	b.n	8007a96 <USBH_HandleControl+0x2e2>
      break;
 8007a88:	bf00      	nop
 8007a8a:	e004      	b.n	8007a96 <USBH_HandleControl+0x2e2>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e002      	b.n	8007a96 <USBH_HandleControl+0x2e2>
      break;
 8007a90:	bf00      	nop
 8007a92:	e000      	b.n	8007a96 <USBH_HandleControl+0x2e2>
      break;
 8007a94:	bf00      	nop
  }

  return status;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af04      	add	r7, sp, #16
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007aae:	79f9      	ldrb	r1, [r7, #7]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	9303      	str	r3, [sp, #12]
 8007ab4:	2308      	movs	r3, #8
 8007ab6:	9302      	str	r3, [sp, #8]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	9301      	str	r3, [sp, #4]
 8007abc:	2300      	movs	r3, #0
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f002 fdae 	bl	800a626 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af04      	add	r7, sp, #16
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4611      	mov	r1, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	80fb      	strh	r3, [r7, #6]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007af8:	7979      	ldrb	r1, [r7, #5]
 8007afa:	7e3b      	ldrb	r3, [r7, #24]
 8007afc:	9303      	str	r3, [sp, #12]
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	9302      	str	r3, [sp, #8]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	2301      	movs	r3, #1
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f002 fd89 	bl	800a626 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b088      	sub	sp, #32
 8007b22:	af04      	add	r7, sp, #16
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	80fb      	strh	r3, [r7, #6]
 8007b30:	4613      	mov	r3, r2
 8007b32:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b34:	7979      	ldrb	r1, [r7, #5]
 8007b36:	2300      	movs	r3, #0
 8007b38:	9303      	str	r3, [sp, #12]
 8007b3a:	88fb      	ldrh	r3, [r7, #6]
 8007b3c:	9302      	str	r3, [sp, #8]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	2301      	movs	r3, #1
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	2300      	movs	r3, #0
 8007b48:	2201      	movs	r2, #1
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f002 fd6b 	bl	800a626 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007b50:	2300      	movs	r3, #0

}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b088      	sub	sp, #32
 8007b5e:	af04      	add	r7, sp, #16
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	4611      	mov	r1, r2
 8007b66:	461a      	mov	r2, r3
 8007b68:	460b      	mov	r3, r1
 8007b6a:	80fb      	strh	r3, [r7, #6]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b7e:	7979      	ldrb	r1, [r7, #5]
 8007b80:	7e3b      	ldrb	r3, [r7, #24]
 8007b82:	9303      	str	r3, [sp, #12]
 8007b84:	88fb      	ldrh	r3, [r7, #6]
 8007b86:	9302      	str	r3, [sp, #8]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	2302      	movs	r3, #2
 8007b92:	2200      	movs	r2, #0
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f002 fd46 	bl	800a626 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af04      	add	r7, sp, #16
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4611      	mov	r1, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	80fb      	strh	r3, [r7, #6]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bba:	7979      	ldrb	r1, [r7, #5]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9303      	str	r3, [sp, #12]
 8007bc0:	88fb      	ldrh	r3, [r7, #6]
 8007bc2:	9302      	str	r3, [sp, #8]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	2301      	movs	r3, #1
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	2302      	movs	r3, #2
 8007bce:	2201      	movs	r2, #1
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f002 fd28 	bl	800a626 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af04      	add	r7, sp, #16
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	461a      	mov	r2, r3
 8007bee:	4603      	mov	r3, r0
 8007bf0:	70fb      	strb	r3, [r7, #3]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70bb      	strb	r3, [r7, #2]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007bfa:	7878      	ldrb	r0, [r7, #1]
 8007bfc:	78ba      	ldrb	r2, [r7, #2]
 8007bfe:	78f9      	ldrb	r1, [r7, #3]
 8007c00:	8b3b      	ldrh	r3, [r7, #24]
 8007c02:	9302      	str	r3, [sp, #8]
 8007c04:	7d3b      	ldrb	r3, [r7, #20]
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	7c3b      	ldrb	r3, [r7, #16]
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f002 fcbb 	bl	800a58a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	460b      	mov	r3, r1
 8007c28:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f002 fcda 	bl	800a5e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f837 	bl	8007cbe <USBH_GetFreePipe>
 8007c50:	4603      	mov	r3, r0
 8007c52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c54:	89fb      	ldrh	r3, [r7, #14]
 8007c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00a      	beq.n	8007c74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007c5e:	89fb      	ldrh	r3, [r7, #14]
 8007c60:	f003 030f 	and.w	r3, r3, #15
 8007c64:	78fa      	ldrb	r2, [r7, #3]
 8007c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	33e0      	adds	r3, #224	; 0xe0
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c74:	89fb      	ldrh	r3, [r7, #14]
 8007c76:	b2db      	uxtb	r3, r3
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	2b0a      	cmp	r3, #10
 8007c90:	d80e      	bhi.n	8007cb0 <USBH_FreePipe+0x30>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c92:	78f8      	ldrb	r0, [r7, #3]
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	33e0      	adds	r3, #224	; 0xe0
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	440b      	add	r3, r1
 8007cae:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]
 8007cce:	e00f      	b.n	8007cf0 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	33e0      	adds	r3, #224	; 0xe0
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	e007      	b.n	8007cfa <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	3301      	adds	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	2b0a      	cmp	r3, #10
 8007cf4:	d9ec      	bls.n	8007cd0 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007d12:	79fb      	ldrb	r3, [r7, #7]
 8007d14:	4a08      	ldr	r2, [pc, #32]	; (8007d38 <disk_status+0x30>)
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	79fa      	ldrb	r2, [r7, #7]
 8007d20:	4905      	ldr	r1, [pc, #20]	; (8007d38 <disk_status+0x30>)
 8007d22:	440a      	add	r2, r1
 8007d24:	7a12      	ldrb	r2, [r2, #8]
 8007d26:	4610      	mov	r0, r2
 8007d28:	4798      	blx	r3
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	200080e8 	.word	0x200080e8

08007d3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	4a0d      	ldr	r2, [pc, #52]	; (8007d84 <disk_initialize+0x48>)
 8007d4e:	5cd3      	ldrb	r3, [r2, r3]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d111      	bne.n	8007d78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	4a0b      	ldr	r2, [pc, #44]	; (8007d84 <disk_initialize+0x48>)
 8007d58:	2101      	movs	r1, #1
 8007d5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	4a09      	ldr	r2, [pc, #36]	; (8007d84 <disk_initialize+0x48>)
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	79fa      	ldrb	r2, [r7, #7]
 8007d6a:	4906      	ldr	r1, [pc, #24]	; (8007d84 <disk_initialize+0x48>)
 8007d6c:	440a      	add	r2, r1
 8007d6e:	7a12      	ldrb	r2, [r2, #8]
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	200080e8 	.word	0x200080e8

08007d88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007d88:	b590      	push	{r4, r7, lr}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	4a0a      	ldr	r2, [pc, #40]	; (8007dc4 <disk_read+0x3c>)
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	689c      	ldr	r4, [r3, #8]
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	4a07      	ldr	r2, [pc, #28]	; (8007dc4 <disk_read+0x3c>)
 8007da8:	4413      	add	r3, r2
 8007daa:	7a18      	ldrb	r0, [r3, #8]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	68b9      	ldr	r1, [r7, #8]
 8007db2:	47a0      	blx	r4
 8007db4:	4603      	mov	r3, r0
 8007db6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd90      	pop	{r4, r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	200080e8 	.word	0x200080e8

08007dc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007dc8:	b590      	push	{r4, r7, lr}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	4a0a      	ldr	r2, [pc, #40]	; (8007e04 <disk_write+0x3c>)
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68dc      	ldr	r4, [r3, #12]
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	4a07      	ldr	r2, [pc, #28]	; (8007e04 <disk_write+0x3c>)
 8007de8:	4413      	add	r3, r2
 8007dea:	7a18      	ldrb	r0, [r3, #8]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	68b9      	ldr	r1, [r7, #8]
 8007df2:	47a0      	blx	r4
 8007df4:	4603      	mov	r3, r0
 8007df6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd90      	pop	{r4, r7, pc}
 8007e02:	bf00      	nop
 8007e04:	200080e8 	.word	0x200080e8

08007e08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	603a      	str	r2, [r7, #0]
 8007e12:	71fb      	strb	r3, [r7, #7]
 8007e14:	460b      	mov	r3, r1
 8007e16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007e18:	79fb      	ldrb	r3, [r7, #7]
 8007e1a:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <disk_ioctl+0x38>)
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	79fa      	ldrb	r2, [r7, #7]
 8007e26:	4906      	ldr	r1, [pc, #24]	; (8007e40 <disk_ioctl+0x38>)
 8007e28:	440a      	add	r2, r1
 8007e2a:	7a10      	ldrb	r0, [r2, #8]
 8007e2c:	79b9      	ldrb	r1, [r7, #6]
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	4798      	blx	r3
 8007e32:	4603      	mov	r3, r0
 8007e34:	73fb      	strb	r3, [r7, #15]
  return res;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	200080e8 	.word	0x200080e8

08007e44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007e54:	89fb      	ldrh	r3, [r7, #14]
 8007e56:	021b      	lsls	r3, r3, #8
 8007e58:	b21a      	sxth	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	b21b      	sxth	r3, r3
 8007e60:	4313      	orrs	r3, r2
 8007e62:	b21b      	sxth	r3, r3
 8007e64:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007e66:	89fb      	ldrh	r3, [r7, #14]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3303      	adds	r3, #3
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	3202      	adds	r2, #2
 8007e8c:	7812      	ldrb	r2, [r2, #0]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	3201      	adds	r2, #1
 8007e9a:	7812      	ldrb	r2, [r2, #0]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	7812      	ldrb	r2, [r2, #0]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
	return rv;
 8007eac:	68fb      	ldr	r3, [r7, #12]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	887a      	ldrh	r2, [r7, #2]
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	887b      	ldrh	r3, [r7, #2]
 8007ed4:	0a1b      	lsrs	r3, r3, #8
 8007ed6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	887a      	ldrh	r2, [r7, #2]
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	701a      	strb	r2, [r3, #0]
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	701a      	strb	r2, [r3, #0]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	0a1b      	lsrs	r3, r3, #8
 8007f0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	607a      	str	r2, [r7, #4]
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	701a      	strb	r2, [r3, #0]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	0a1b      	lsrs	r3, r3, #8
 8007f1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	701a      	strb	r2, [r3, #0]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	0a1b      	lsrs	r3, r3, #8
 8007f2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	607a      	str	r2, [r7, #4]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	b2d2      	uxtb	r2, r2
 8007f3a:	701a      	strb	r2, [r3, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00d      	beq.n	8007f7e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	617a      	str	r2, [r7, #20]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	1c51      	adds	r1, r2, #1
 8007f6c:	6139      	str	r1, [r7, #16]
 8007f6e:	7812      	ldrb	r2, [r2, #0]
 8007f70:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	607b      	str	r3, [r7, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1f1      	bne.n	8007f62 <mem_cpy+0x1a>
	}
}
 8007f7e:	bf00      	nop
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007f8a:	b480      	push	{r7}
 8007f8c:	b087      	sub	sp, #28
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	617a      	str	r2, [r7, #20]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	607b      	str	r3, [r7, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1f3      	bne.n	8007f9a <mem_set+0x10>
}
 8007fb2:	bf00      	nop
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007fbe:	b480      	push	{r7}
 8007fc0:	b089      	sub	sp, #36	; 0x24
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	61fb      	str	r3, [r7, #28]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	61fa      	str	r2, [r7, #28]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	61ba      	str	r2, [r7, #24]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	1acb      	subs	r3, r1, r3
 8007fea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	607b      	str	r3, [r7, #4]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <mem_cmp+0x40>
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0eb      	beq.n	8007fd6 <mem_cmp+0x18>

	return r;
 8007ffe:	697b      	ldr	r3, [r7, #20]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3724      	adds	r7, #36	; 0x24
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008016:	e002      	b.n	800801e <chk_chr+0x12>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3301      	adds	r3, #1
 800801c:	607b      	str	r3, [r7, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d005      	beq.n	8008032 <chk_chr+0x26>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d1f2      	bne.n	8008018 <chk_chr+0xc>
	return *str;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	781b      	ldrb	r3, [r3, #0]
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
	...

08008044 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800804e:	2300      	movs	r3, #0
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	e029      	b.n	80080ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008058:	4a27      	ldr	r2, [pc, #156]	; (80080f8 <chk_lock+0xb4>)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	4413      	add	r3, r2
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d01d      	beq.n	80080a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008066:	4a24      	ldr	r2, [pc, #144]	; (80080f8 <chk_lock+0xb4>)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	4413      	add	r3, r2
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d116      	bne.n	80080a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008078:	4a1f      	ldr	r2, [pc, #124]	; (80080f8 <chk_lock+0xb4>)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	011b      	lsls	r3, r3, #4
 800807e:	4413      	add	r3, r2
 8008080:	3304      	adds	r3, #4
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008088:	429a      	cmp	r2, r3
 800808a:	d10c      	bne.n	80080a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800808c:	4a1a      	ldr	r2, [pc, #104]	; (80080f8 <chk_lock+0xb4>)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	4413      	add	r3, r2
 8008094:	3308      	adds	r3, #8
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800809c:	429a      	cmp	r2, r3
 800809e:	d102      	bne.n	80080a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80080a0:	e007      	b.n	80080b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3301      	adds	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d9d2      	bls.n	8008058 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d109      	bne.n	80080cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <chk_lock+0x80>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d101      	bne.n	80080c8 <chk_lock+0x84>
 80080c4:	2300      	movs	r3, #0
 80080c6:	e010      	b.n	80080ea <chk_lock+0xa6>
 80080c8:	2312      	movs	r3, #18
 80080ca:	e00e      	b.n	80080ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d108      	bne.n	80080e4 <chk_lock+0xa0>
 80080d2:	4a09      	ldr	r2, [pc, #36]	; (80080f8 <chk_lock+0xb4>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	4413      	add	r3, r2
 80080da:	330c      	adds	r3, #12
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080e2:	d101      	bne.n	80080e8 <chk_lock+0xa4>
 80080e4:	2310      	movs	r3, #16
 80080e6:	e000      	b.n	80080ea <chk_lock+0xa6>
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	200080c8 	.word	0x200080c8

080080fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008102:	2300      	movs	r3, #0
 8008104:	607b      	str	r3, [r7, #4]
 8008106:	e002      	b.n	800810e <enq_lock+0x12>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3301      	adds	r3, #1
 800810c:	607b      	str	r3, [r7, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d806      	bhi.n	8008122 <enq_lock+0x26>
 8008114:	4a09      	ldr	r2, [pc, #36]	; (800813c <enq_lock+0x40>)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	4413      	add	r3, r2
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f2      	bne.n	8008108 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b02      	cmp	r3, #2
 8008126:	bf14      	ite	ne
 8008128:	2301      	movne	r3, #1
 800812a:	2300      	moveq	r3, #0
 800812c:	b2db      	uxtb	r3, r3
}
 800812e:	4618      	mov	r0, r3
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	200080c8 	.word	0x200080c8

08008140 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	e01f      	b.n	8008190 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008150:	4a41      	ldr	r2, [pc, #260]	; (8008258 <inc_lock+0x118>)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	4413      	add	r3, r2
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d113      	bne.n	800818a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008162:	4a3d      	ldr	r2, [pc, #244]	; (8008258 <inc_lock+0x118>)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	011b      	lsls	r3, r3, #4
 8008168:	4413      	add	r3, r2
 800816a:	3304      	adds	r3, #4
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008172:	429a      	cmp	r2, r3
 8008174:	d109      	bne.n	800818a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008176:	4a38      	ldr	r2, [pc, #224]	; (8008258 <inc_lock+0x118>)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	4413      	add	r3, r2
 800817e:	3308      	adds	r3, #8
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008186:	429a      	cmp	r2, r3
 8008188:	d006      	beq.n	8008198 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d9dc      	bls.n	8008150 <inc_lock+0x10>
 8008196:	e000      	b.n	800819a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008198:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d132      	bne.n	8008206 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	e002      	b.n	80081ac <inc_lock+0x6c>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3301      	adds	r3, #1
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d806      	bhi.n	80081c0 <inc_lock+0x80>
 80081b2:	4a29      	ldr	r2, [pc, #164]	; (8008258 <inc_lock+0x118>)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	4413      	add	r3, r2
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1f2      	bne.n	80081a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d101      	bne.n	80081ca <inc_lock+0x8a>
 80081c6:	2300      	movs	r3, #0
 80081c8:	e040      	b.n	800824c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	4922      	ldr	r1, [pc, #136]	; (8008258 <inc_lock+0x118>)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	440b      	add	r3, r1
 80081d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	491e      	ldr	r1, [pc, #120]	; (8008258 <inc_lock+0x118>)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	440b      	add	r3, r1
 80081e4:	3304      	adds	r3, #4
 80081e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	695a      	ldr	r2, [r3, #20]
 80081ec:	491a      	ldr	r1, [pc, #104]	; (8008258 <inc_lock+0x118>)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	440b      	add	r3, r1
 80081f4:	3308      	adds	r3, #8
 80081f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80081f8:	4a17      	ldr	r2, [pc, #92]	; (8008258 <inc_lock+0x118>)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	4413      	add	r3, r2
 8008200:	330c      	adds	r3, #12
 8008202:	2200      	movs	r2, #0
 8008204:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <inc_lock+0xe0>
 800820c:	4a12      	ldr	r2, [pc, #72]	; (8008258 <inc_lock+0x118>)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	4413      	add	r3, r2
 8008214:	330c      	adds	r3, #12
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <inc_lock+0xe0>
 800821c:	2300      	movs	r3, #0
 800821e:	e015      	b.n	800824c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d108      	bne.n	8008238 <inc_lock+0xf8>
 8008226:	4a0c      	ldr	r2, [pc, #48]	; (8008258 <inc_lock+0x118>)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	4413      	add	r3, r2
 800822e:	330c      	adds	r3, #12
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	e001      	b.n	800823c <inc_lock+0xfc>
 8008238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800823c:	4906      	ldr	r1, [pc, #24]	; (8008258 <inc_lock+0x118>)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	440b      	add	r3, r1
 8008244:	330c      	adds	r3, #12
 8008246:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3301      	adds	r3, #1
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	200080c8 	.word	0x200080c8

0800825c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3b01      	subs	r3, #1
 8008268:	607b      	str	r3, [r7, #4]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d825      	bhi.n	80082bc <dec_lock+0x60>
		n = Files[i].ctr;
 8008270:	4a17      	ldr	r2, [pc, #92]	; (80082d0 <dec_lock+0x74>)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	4413      	add	r3, r2
 8008278:	330c      	adds	r3, #12
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800827e:	89fb      	ldrh	r3, [r7, #14]
 8008280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008284:	d101      	bne.n	800828a <dec_lock+0x2e>
 8008286:	2300      	movs	r3, #0
 8008288:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800828a:	89fb      	ldrh	r3, [r7, #14]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <dec_lock+0x3a>
 8008290:	89fb      	ldrh	r3, [r7, #14]
 8008292:	3b01      	subs	r3, #1
 8008294:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008296:	4a0e      	ldr	r2, [pc, #56]	; (80082d0 <dec_lock+0x74>)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	4413      	add	r3, r2
 800829e:	330c      	adds	r3, #12
 80082a0:	89fa      	ldrh	r2, [r7, #14]
 80082a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80082a4:	89fb      	ldrh	r3, [r7, #14]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d105      	bne.n	80082b6 <dec_lock+0x5a>
 80082aa:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <dec_lock+0x74>)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	011b      	lsls	r3, r3, #4
 80082b0:	4413      	add	r3, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	737b      	strb	r3, [r7, #13]
 80082ba:	e001      	b.n	80082c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80082bc:	2302      	movs	r3, #2
 80082be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80082c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	200080c8 	.word	0x200080c8

080082d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	e010      	b.n	8008304 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80082e2:	4a0d      	ldr	r2, [pc, #52]	; (8008318 <clear_lock+0x44>)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	011b      	lsls	r3, r3, #4
 80082e8:	4413      	add	r3, r2
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d105      	bne.n	80082fe <clear_lock+0x2a>
 80082f2:	4a09      	ldr	r2, [pc, #36]	; (8008318 <clear_lock+0x44>)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	4413      	add	r3, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d9eb      	bls.n	80082e2 <clear_lock+0xe>
	}
}
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	200080c8 	.word	0x200080c8

0800831c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	78db      	ldrb	r3, [r3, #3]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d034      	beq.n	800839a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	7858      	ldrb	r0, [r3, #1]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008340:	2301      	movs	r3, #1
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	f7ff fd40 	bl	8007dc8 <disk_write>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <sync_window+0x38>
			res = FR_DISK_ERR;
 800834e:	2301      	movs	r3, #1
 8008350:	73fb      	strb	r3, [r7, #15]
 8008352:	e022      	b.n	800839a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	1ad2      	subs	r2, r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	429a      	cmp	r2, r3
 8008368:	d217      	bcs.n	800839a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	789b      	ldrb	r3, [r3, #2]
 800836e:	613b      	str	r3, [r7, #16]
 8008370:	e010      	b.n	8008394 <sync_window+0x78>
					wsect += fs->fsize;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	4413      	add	r3, r2
 800837a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7858      	ldrb	r0, [r3, #1]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008386:	2301      	movs	r3, #1
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	f7ff fd1d 	bl	8007dc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	3b01      	subs	r3, #1
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d8eb      	bhi.n	8008372 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d01b      	beq.n	80083f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff ffad 	bl	800831c <sync_window>
 80083c2:	4603      	mov	r3, r0
 80083c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d113      	bne.n	80083f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	7858      	ldrb	r0, [r3, #1]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083d6:	2301      	movs	r3, #1
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	f7ff fcd5 	bl	8007d88 <disk_read>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d004      	beq.n	80083ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80083e4:	f04f 33ff 	mov.w	r3, #4294967295
 80083e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff ff87 	bl	800831c <sync_window>
 800840e:	4603      	mov	r3, r0
 8008410:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d159      	bne.n	80084cc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b03      	cmp	r3, #3
 800841e:	d149      	bne.n	80084b4 <sync_fs+0xb4>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	791b      	ldrb	r3, [r3, #4]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d145      	bne.n	80084b4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	899b      	ldrh	r3, [r3, #12]
 8008432:	461a      	mov	r2, r3
 8008434:	2100      	movs	r1, #0
 8008436:	f7ff fda8 	bl	8007f8a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3334      	adds	r3, #52	; 0x34
 800843e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008442:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff fd37 	bl	8007eba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3334      	adds	r3, #52	; 0x34
 8008450:	4921      	ldr	r1, [pc, #132]	; (80084d8 <sync_fs+0xd8>)
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fd4c 	bl	8007ef0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3334      	adds	r3, #52	; 0x34
 800845c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008460:	491e      	ldr	r1, [pc, #120]	; (80084dc <sync_fs+0xdc>)
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff fd44 	bl	8007ef0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3334      	adds	r3, #52	; 0x34
 800846c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f7ff fd3a 	bl	8007ef0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3334      	adds	r3, #52	; 0x34
 8008480:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	4619      	mov	r1, r3
 800848a:	4610      	mov	r0, r2
 800848c:	f7ff fd30 	bl	8007ef0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	7858      	ldrb	r0, [r3, #1]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084a8:	2301      	movs	r3, #1
 80084aa:	f7ff fc8d 	bl	8007dc8 <disk_write>
			fs->fsi_flag = 0;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	2200      	movs	r2, #0
 80084ba:	2100      	movs	r1, #0
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff fca3 	bl	8007e08 <disk_ioctl>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <sync_fs+0xcc>
 80084c8:	2301      	movs	r3, #1
 80084ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	41615252 	.word	0x41615252
 80084dc:	61417272 	.word	0x61417272

080084e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	3b02      	subs	r3, #2
 80084ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	1e9a      	subs	r2, r3, #2
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d801      	bhi.n	8008500 <clust2sect+0x20>
 80084fc:	2300      	movs	r3, #0
 80084fe:	e008      	b.n	8008512 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	895b      	ldrh	r3, [r3, #10]
 8008504:	461a      	mov	r2, r3
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	fb03 f202 	mul.w	r2, r3, r2
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	4413      	add	r3, r2
}
 8008512:	4618      	mov	r0, r3
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b086      	sub	sp, #24
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d904      	bls.n	800853e <get_fat+0x20>
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	699a      	ldr	r2, [r3, #24]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	429a      	cmp	r2, r3
 800853c:	d802      	bhi.n	8008544 <get_fat+0x26>
		val = 1;	/* Internal error */
 800853e:	2301      	movs	r3, #1
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	e0b7      	b.n	80086b4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008544:	f04f 33ff 	mov.w	r3, #4294967295
 8008548:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	2b02      	cmp	r3, #2
 8008550:	d05a      	beq.n	8008608 <get_fat+0xea>
 8008552:	2b03      	cmp	r3, #3
 8008554:	d07d      	beq.n	8008652 <get_fat+0x134>
 8008556:	2b01      	cmp	r3, #1
 8008558:	f040 80a2 	bne.w	80086a0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	899b      	ldrh	r3, [r3, #12]
 8008572:	4619      	mov	r1, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	fbb3 f3f1 	udiv	r3, r3, r1
 800857a:	4413      	add	r3, r2
 800857c:	4619      	mov	r1, r3
 800857e:	6938      	ldr	r0, [r7, #16]
 8008580:	f7ff ff10 	bl	80083a4 <move_window>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	f040 808d 	bne.w	80086a6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	60fa      	str	r2, [r7, #12]
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	8992      	ldrh	r2, [r2, #12]
 8008596:	fbb3 f1f2 	udiv	r1, r3, r2
 800859a:	fb02 f201 	mul.w	r2, r2, r1
 800859e:	1a9b      	subs	r3, r3, r2
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	4413      	add	r3, r2
 80085a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	899b      	ldrh	r3, [r3, #12]
 80085b2:	4619      	mov	r1, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80085ba:	4413      	add	r3, r2
 80085bc:	4619      	mov	r1, r3
 80085be:	6938      	ldr	r0, [r7, #16]
 80085c0:	f7ff fef0 	bl	80083a4 <move_window>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d16f      	bne.n	80086aa <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	899b      	ldrh	r3, [r3, #12]
 80085ce:	461a      	mov	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80085d6:	fb02 f201 	mul.w	r2, r2, r1
 80085da:	1a9b      	subs	r3, r3, r2
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	4413      	add	r3, r2
 80085e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	461a      	mov	r2, r3
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <get_fat+0xe0>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	091b      	lsrs	r3, r3, #4
 80085fc:	e002      	b.n	8008604 <get_fat+0xe6>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008604:	617b      	str	r3, [r7, #20]
			break;
 8008606:	e055      	b.n	80086b4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	899b      	ldrh	r3, [r3, #12]
 8008610:	085b      	lsrs	r3, r3, #1
 8008612:	b29b      	uxth	r3, r3
 8008614:	4619      	mov	r1, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	fbb3 f3f1 	udiv	r3, r3, r1
 800861c:	4413      	add	r3, r2
 800861e:	4619      	mov	r1, r3
 8008620:	6938      	ldr	r0, [r7, #16]
 8008622:	f7ff febf 	bl	80083a4 <move_window>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d140      	bne.n	80086ae <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	8992      	ldrh	r2, [r2, #12]
 800863a:	fbb3 f0f2 	udiv	r0, r3, r2
 800863e:	fb02 f200 	mul.w	r2, r2, r0
 8008642:	1a9b      	subs	r3, r3, r2
 8008644:	440b      	add	r3, r1
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff fbfc 	bl	8007e44 <ld_word>
 800864c:	4603      	mov	r3, r0
 800864e:	617b      	str	r3, [r7, #20]
			break;
 8008650:	e030      	b.n	80086b4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	899b      	ldrh	r3, [r3, #12]
 800865a:	089b      	lsrs	r3, r3, #2
 800865c:	b29b      	uxth	r3, r3
 800865e:	4619      	mov	r1, r3
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	fbb3 f3f1 	udiv	r3, r3, r1
 8008666:	4413      	add	r3, r2
 8008668:	4619      	mov	r1, r3
 800866a:	6938      	ldr	r0, [r7, #16]
 800866c:	f7ff fe9a 	bl	80083a4 <move_window>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d11d      	bne.n	80086b2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	8992      	ldrh	r2, [r2, #12]
 8008684:	fbb3 f0f2 	udiv	r0, r3, r2
 8008688:	fb02 f200 	mul.w	r2, r2, r0
 800868c:	1a9b      	subs	r3, r3, r2
 800868e:	440b      	add	r3, r1
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff fbef 	bl	8007e74 <ld_dword>
 8008696:	4603      	mov	r3, r0
 8008698:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800869c:	617b      	str	r3, [r7, #20]
			break;
 800869e:	e009      	b.n	80086b4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80086a0:	2301      	movs	r3, #1
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	e006      	b.n	80086b4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086a6:	bf00      	nop
 80086a8:	e004      	b.n	80086b4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086aa:	bf00      	nop
 80086ac:	e002      	b.n	80086b4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80086ae:	bf00      	nop
 80086b0:	e000      	b.n	80086b4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80086b2:	bf00      	nop
		}
	}

	return val;
 80086b4:	697b      	ldr	r3, [r7, #20]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80086be:	b590      	push	{r4, r7, lr}
 80086c0:	b089      	sub	sp, #36	; 0x24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80086ca:	2302      	movs	r3, #2
 80086cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	f240 8106 	bls.w	80088e2 <put_fat+0x224>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	699a      	ldr	r2, [r3, #24]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	429a      	cmp	r2, r3
 80086de:	f240 8100 	bls.w	80088e2 <put_fat+0x224>
		switch (fs->fs_type) {
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	f000 8088 	beq.w	80087fc <put_fat+0x13e>
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	f000 80b0 	beq.w	8008852 <put_fat+0x194>
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	f040 80f5 	bne.w	80088e2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	61bb      	str	r3, [r7, #24]
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	4413      	add	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	899b      	ldrh	r3, [r3, #12]
 800870e:	4619      	mov	r1, r3
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	fbb3 f3f1 	udiv	r3, r3, r1
 8008716:	4413      	add	r3, r2
 8008718:	4619      	mov	r1, r3
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f7ff fe42 	bl	80083a4 <move_window>
 8008720:	4603      	mov	r3, r0
 8008722:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008724:	7ffb      	ldrb	r3, [r7, #31]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f040 80d4 	bne.w	80088d4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	61ba      	str	r2, [r7, #24]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	8992      	ldrh	r2, [r2, #12]
 800873c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008740:	fb02 f200 	mul.w	r2, r2, r0
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	440b      	add	r3, r1
 8008748:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00d      	beq.n	8008770 <put_fat+0xb2>
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	b25b      	sxtb	r3, r3
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	b25a      	sxtb	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	b25b      	sxtb	r3, r3
 8008768:	4313      	orrs	r3, r2
 800876a:	b25b      	sxtb	r3, r3
 800876c:	b2db      	uxtb	r3, r3
 800876e:	e001      	b.n	8008774 <put_fat+0xb6>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	b2db      	uxtb	r3, r3
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2201      	movs	r2, #1
 800877c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	899b      	ldrh	r3, [r3, #12]
 8008786:	4619      	mov	r1, r3
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	fbb3 f3f1 	udiv	r3, r3, r1
 800878e:	4413      	add	r3, r2
 8008790:	4619      	mov	r1, r3
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff fe06 	bl	80083a4 <move_window>
 8008798:	4603      	mov	r3, r0
 800879a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800879c:	7ffb      	ldrb	r3, [r7, #31]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f040 809a 	bne.w	80088d8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	899b      	ldrh	r3, [r3, #12]
 80087ae:	461a      	mov	r2, r3
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80087b6:	fb02 f200 	mul.w	r2, r2, r0
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	440b      	add	r3, r1
 80087be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <put_fat+0x114>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	091b      	lsrs	r3, r3, #4
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	e00e      	b.n	80087f0 <put_fat+0x132>
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	b25b      	sxtb	r3, r3
 80087d8:	f023 030f 	bic.w	r3, r3, #15
 80087dc:	b25a      	sxtb	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	0a1b      	lsrs	r3, r3, #8
 80087e2:	b25b      	sxtb	r3, r3
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	b25b      	sxtb	r3, r3
 80087ea:	4313      	orrs	r3, r2
 80087ec:	b25b      	sxtb	r3, r3
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	70da      	strb	r2, [r3, #3]
			break;
 80087fa:	e072      	b.n	80088e2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	899b      	ldrh	r3, [r3, #12]
 8008804:	085b      	lsrs	r3, r3, #1
 8008806:	b29b      	uxth	r3, r3
 8008808:	4619      	mov	r1, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008810:	4413      	add	r3, r2
 8008812:	4619      	mov	r1, r3
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f7ff fdc5 	bl	80083a4 <move_window>
 800881a:	4603      	mov	r3, r0
 800881c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800881e:	7ffb      	ldrb	r3, [r7, #31]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d15b      	bne.n	80088dc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	8992      	ldrh	r2, [r2, #12]
 8008832:	fbb3 f0f2 	udiv	r0, r3, r2
 8008836:	fb02 f200 	mul.w	r2, r2, r0
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	440b      	add	r3, r1
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	b292      	uxth	r2, r2
 8008842:	4611      	mov	r1, r2
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff fb38 	bl	8007eba <st_word>
			fs->wflag = 1;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2201      	movs	r2, #1
 800884e:	70da      	strb	r2, [r3, #3]
			break;
 8008850:	e047      	b.n	80088e2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	899b      	ldrh	r3, [r3, #12]
 800885a:	089b      	lsrs	r3, r3, #2
 800885c:	b29b      	uxth	r3, r3
 800885e:	4619      	mov	r1, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	fbb3 f3f1 	udiv	r3, r3, r1
 8008866:	4413      	add	r3, r2
 8008868:	4619      	mov	r1, r3
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7ff fd9a 	bl	80083a4 <move_window>
 8008870:	4603      	mov	r3, r0
 8008872:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008874:	7ffb      	ldrb	r3, [r7, #31]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d132      	bne.n	80088e0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	8992      	ldrh	r2, [r2, #12]
 800888e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008892:	fb02 f200 	mul.w	r2, r2, r0
 8008896:	1a9b      	subs	r3, r3, r2
 8008898:	440b      	add	r3, r1
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff faea 	bl	8007e74 <ld_dword>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80088a6:	4323      	orrs	r3, r4
 80088a8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	8992      	ldrh	r2, [r2, #12]
 80088b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80088bc:	fb02 f200 	mul.w	r2, r2, r0
 80088c0:	1a9b      	subs	r3, r3, r2
 80088c2:	440b      	add	r3, r1
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fb12 	bl	8007ef0 <st_dword>
			fs->wflag = 1;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2201      	movs	r2, #1
 80088d0:	70da      	strb	r2, [r3, #3]
			break;
 80088d2:	e006      	b.n	80088e2 <put_fat+0x224>
			if (res != FR_OK) break;
 80088d4:	bf00      	nop
 80088d6:	e004      	b.n	80088e2 <put_fat+0x224>
			if (res != FR_OK) break;
 80088d8:	bf00      	nop
 80088da:	e002      	b.n	80088e2 <put_fat+0x224>
			if (res != FR_OK) break;
 80088dc:	bf00      	nop
 80088de:	e000      	b.n	80088e2 <put_fat+0x224>
			if (res != FR_OK) break;
 80088e0:	bf00      	nop
		}
	}
	return res;
 80088e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3724      	adds	r7, #36	; 0x24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd90      	pop	{r4, r7, pc}

080088ec <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d904      	bls.n	8008912 <remove_chain+0x26>
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	699a      	ldr	r2, [r3, #24]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	429a      	cmp	r2, r3
 8008910:	d801      	bhi.n	8008916 <remove_chain+0x2a>
 8008912:	2302      	movs	r3, #2
 8008914:	e04b      	b.n	80089ae <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00c      	beq.n	8008936 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800891c:	f04f 32ff 	mov.w	r2, #4294967295
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	69b8      	ldr	r0, [r7, #24]
 8008924:	f7ff fecb 	bl	80086be <put_fat>
 8008928:	4603      	mov	r3, r0
 800892a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800892c:	7ffb      	ldrb	r3, [r7, #31]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <remove_chain+0x4a>
 8008932:	7ffb      	ldrb	r3, [r7, #31]
 8008934:	e03b      	b.n	80089ae <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008936:	68b9      	ldr	r1, [r7, #8]
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7ff fdf0 	bl	800851e <get_fat>
 800893e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d031      	beq.n	80089aa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d101      	bne.n	8008950 <remove_chain+0x64>
 800894c:	2302      	movs	r3, #2
 800894e:	e02e      	b.n	80089ae <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008956:	d101      	bne.n	800895c <remove_chain+0x70>
 8008958:	2301      	movs	r3, #1
 800895a:	e028      	b.n	80089ae <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800895c:	2200      	movs	r2, #0
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	69b8      	ldr	r0, [r7, #24]
 8008962:	f7ff feac 	bl	80086be <put_fat>
 8008966:	4603      	mov	r3, r0
 8008968:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800896a:	7ffb      	ldrb	r3, [r7, #31]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <remove_chain+0x88>
 8008970:	7ffb      	ldrb	r3, [r7, #31]
 8008972:	e01c      	b.n	80089ae <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	695a      	ldr	r2, [r3, #20]
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	3b02      	subs	r3, #2
 800897e:	429a      	cmp	r2, r3
 8008980:	d20b      	bcs.n	800899a <remove_chain+0xae>
			fs->free_clst++;
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	791b      	ldrb	r3, [r3, #4]
 8008990:	f043 0301 	orr.w	r3, r3, #1
 8008994:	b2da      	uxtb	r2, r3
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	699a      	ldr	r2, [r3, #24]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d8c6      	bhi.n	8008936 <remove_chain+0x4a>
 80089a8:	e000      	b.n	80089ac <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80089aa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3720      	adds	r7, #32
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b088      	sub	sp, #32
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10d      	bne.n	80089e8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d004      	beq.n	80089e2 <create_chain+0x2c>
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	699a      	ldr	r2, [r3, #24]
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d81b      	bhi.n	8008a1a <create_chain+0x64>
 80089e2:	2301      	movs	r3, #1
 80089e4:	61bb      	str	r3, [r7, #24]
 80089e6:	e018      	b.n	8008a1a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff fd97 	bl	800851e <get_fat>
 80089f0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d801      	bhi.n	80089fc <create_chain+0x46>
 80089f8:	2301      	movs	r3, #1
 80089fa:	e070      	b.n	8008ade <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d101      	bne.n	8008a08 <create_chain+0x52>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	e06a      	b.n	8008ade <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	699a      	ldr	r2, [r3, #24]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d901      	bls.n	8008a16 <create_chain+0x60>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	e063      	b.n	8008ade <create_chain+0x128>
		scl = clst;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	3301      	adds	r3, #1
 8008a22:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	699a      	ldr	r2, [r3, #24]
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d807      	bhi.n	8008a3e <create_chain+0x88>
				ncl = 2;
 8008a2e:	2302      	movs	r3, #2
 8008a30:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d901      	bls.n	8008a3e <create_chain+0x88>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e04f      	b.n	8008ade <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008a3e:	69f9      	ldr	r1, [r7, #28]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff fd6c 	bl	800851e <get_fat>
 8008a46:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00e      	beq.n	8008a6c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d003      	beq.n	8008a5c <create_chain+0xa6>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5a:	d101      	bne.n	8008a60 <create_chain+0xaa>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	e03e      	b.n	8008ade <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d1da      	bne.n	8008a1e <create_chain+0x68>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e038      	b.n	8008ade <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008a6c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a72:	69f9      	ldr	r1, [r7, #28]
 8008a74:	6938      	ldr	r0, [r7, #16]
 8008a76:	f7ff fe22 	bl	80086be <put_fat>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d109      	bne.n	8008a98 <create_chain+0xe2>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d006      	beq.n	8008a98 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008a8a:	69fa      	ldr	r2, [r7, #28]
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6938      	ldr	r0, [r7, #16]
 8008a90:	f7ff fe15 	bl	80086be <put_fat>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d116      	bne.n	8008acc <create_chain+0x116>
		fs->last_clst = ncl;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	695a      	ldr	r2, [r3, #20]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	3b02      	subs	r3, #2
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d804      	bhi.n	8008abc <create_chain+0x106>
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	1e5a      	subs	r2, r3, #1
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	791b      	ldrb	r3, [r3, #4]
 8008ac0:	f043 0301 	orr.w	r3, r3, #1
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	711a      	strb	r2, [r3, #4]
 8008aca:	e007      	b.n	8008adc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d102      	bne.n	8008ad8 <create_chain+0x122>
 8008ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad6:	e000      	b.n	8008ada <create_chain+0x124>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008adc:	69fb      	ldr	r3, [r7, #28]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3720      	adds	r7, #32
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b087      	sub	sp, #28
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afa:	3304      	adds	r3, #4
 8008afc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	899b      	ldrh	r3, [r3, #12]
 8008b02:	461a      	mov	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	8952      	ldrh	r2, [r2, #10]
 8008b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b12:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	1d1a      	adds	r2, r3, #4
 8008b18:	613a      	str	r2, [r7, #16]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <clmt_clust+0x42>
 8008b24:	2300      	movs	r3, #0
 8008b26:	e010      	b.n	8008b4a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d307      	bcc.n	8008b40 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b3e:	e7e9      	b.n	8008b14 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008b40:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	4413      	add	r3, r2
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b086      	sub	sp, #24
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b6c:	d204      	bcs.n	8008b78 <dir_sdi+0x22>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	f003 031f 	and.w	r3, r3, #31
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <dir_sdi+0x26>
		return FR_INT_ERR;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e071      	b.n	8008c60 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <dir_sdi+0x46>
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d902      	bls.n	8008b9c <dir_sdi+0x46>
		clst = fs->dirbase;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10c      	bne.n	8008bbc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	095b      	lsrs	r3, r3, #5
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	8912      	ldrh	r2, [r2, #8]
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d301      	bcc.n	8008bb2 <dir_sdi+0x5c>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e056      	b.n	8008c60 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	61da      	str	r2, [r3, #28]
 8008bba:	e02d      	b.n	8008c18 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	895b      	ldrh	r3, [r3, #10]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	899b      	ldrh	r3, [r3, #12]
 8008bc6:	fb03 f302 	mul.w	r3, r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008bcc:	e019      	b.n	8008c02 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6979      	ldr	r1, [r7, #20]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff fca3 	bl	800851e <get_fat>
 8008bd8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be0:	d101      	bne.n	8008be6 <dir_sdi+0x90>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e03c      	b.n	8008c60 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d904      	bls.n	8008bf6 <dir_sdi+0xa0>
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	699a      	ldr	r2, [r3, #24]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d801      	bhi.n	8008bfa <dir_sdi+0xa4>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e032      	b.n	8008c60 <dir_sdi+0x10a>
			ofs -= csz;
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d2e1      	bcs.n	8008bce <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008c0a:	6979      	ldr	r1, [r7, #20]
 8008c0c:	6938      	ldr	r0, [r7, #16]
 8008c0e:	f7ff fc67 	bl	80084e0 <clust2sect>
 8008c12:	4602      	mov	r2, r0
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <dir_sdi+0xd4>
 8008c26:	2302      	movs	r3, #2
 8008c28:	e01a      	b.n	8008c60 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	69da      	ldr	r2, [r3, #28]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	899b      	ldrh	r3, [r3, #12]
 8008c32:	4619      	mov	r1, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c3a:	441a      	add	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	899b      	ldrh	r3, [r3, #12]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c52:	fb02 f200 	mul.w	r2, r2, r0
 8008c56:	1a9b      	subs	r3, r3, r2
 8008c58:	18ca      	adds	r2, r1, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	3320      	adds	r3, #32
 8008c7e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <dir_next+0x28>
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c8e:	d301      	bcc.n	8008c94 <dir_next+0x2c>
 8008c90:	2304      	movs	r3, #4
 8008c92:	e0bb      	b.n	8008e0c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	899b      	ldrh	r3, [r3, #12]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ca0:	fb02 f201 	mul.w	r2, r2, r1
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 809d 	bne.w	8008de6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10b      	bne.n	8008cd6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	095b      	lsrs	r3, r3, #5
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	8912      	ldrh	r2, [r2, #8]
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	f0c0 808d 	bcc.w	8008de6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	61da      	str	r2, [r3, #28]
 8008cd2:	2304      	movs	r3, #4
 8008cd4:	e09a      	b.n	8008e0c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	899b      	ldrh	r3, [r3, #12]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	8952      	ldrh	r2, [r2, #10]
 8008ce6:	3a01      	subs	r2, #1
 8008ce8:	4013      	ands	r3, r2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d17b      	bne.n	8008de6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	f7ff fc11 	bl	800851e <get_fat>
 8008cfc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d801      	bhi.n	8008d08 <dir_next+0xa0>
 8008d04:	2302      	movs	r3, #2
 8008d06:	e081      	b.n	8008e0c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0e:	d101      	bne.n	8008d14 <dir_next+0xac>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e07b      	b.n	8008e0c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	699a      	ldr	r2, [r3, #24]
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d859      	bhi.n	8008dd2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	61da      	str	r2, [r3, #28]
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	e06e      	b.n	8008e0c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	4619      	mov	r1, r3
 8008d36:	4610      	mov	r0, r2
 8008d38:	f7ff fe3d 	bl	80089b6 <create_chain>
 8008d3c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <dir_next+0xe0>
 8008d44:	2307      	movs	r3, #7
 8008d46:	e061      	b.n	8008e0c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <dir_next+0xea>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e05c      	b.n	8008e0c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d58:	d101      	bne.n	8008d5e <dir_next+0xf6>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e056      	b.n	8008e0c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f7ff fadc 	bl	800831c <sync_window>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <dir_next+0x106>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e04e      	b.n	8008e0c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	899b      	ldrh	r3, [r3, #12]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	f7ff f905 	bl	8007f8a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d80:	2300      	movs	r3, #0
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	6979      	ldr	r1, [r7, #20]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f7ff fbaa 	bl	80084e0 <clust2sect>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	631a      	str	r2, [r3, #48]	; 0x30
 8008d92:	e012      	b.n	8008dba <dir_next+0x152>
						fs->wflag = 1;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2201      	movs	r2, #1
 8008d98:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f7ff fabe 	bl	800831c <sync_window>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <dir_next+0x142>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e030      	b.n	8008e0c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	3301      	adds	r3, #1
 8008dae:	613b      	str	r3, [r7, #16]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	631a      	str	r2, [r3, #48]	; 0x30
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	895b      	ldrh	r3, [r3, #10]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d8e6      	bhi.n	8008d94 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	1ad2      	subs	r2, r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008dd8:	6979      	ldr	r1, [r7, #20]
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f7ff fb80 	bl	80084e0 <clust2sect>
 8008de0:	4602      	mov	r2, r0
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	899b      	ldrh	r3, [r3, #12]
 8008df6:	461a      	mov	r2, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dfe:	fb02 f200 	mul.w	r2, r2, r0
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	18ca      	adds	r2, r1, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008e24:	2100      	movs	r1, #0
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fe95 	bl	8008b56 <dir_sdi>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d12b      	bne.n	8008e8e <dir_alloc+0x7a>
		n = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f7ff faaf 	bl	80083a4 <move_window>
 8008e46:	4603      	mov	r3, r0
 8008e48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d11d      	bne.n	8008e8c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2be5      	cmp	r3, #229	; 0xe5
 8008e58:	d004      	beq.n	8008e64 <dir_alloc+0x50>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d107      	bne.n	8008e74 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	3301      	adds	r3, #1
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d102      	bne.n	8008e78 <dir_alloc+0x64>
 8008e72:	e00c      	b.n	8008e8e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008e74:	2300      	movs	r3, #0
 8008e76:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008e78:	2101      	movs	r1, #1
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fef4 	bl	8008c68 <dir_next>
 8008e80:	4603      	mov	r3, r0
 8008e82:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d0d7      	beq.n	8008e3a <dir_alloc+0x26>
 8008e8a:	e000      	b.n	8008e8e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008e8c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d101      	bne.n	8008e98 <dir_alloc+0x84>
 8008e94:	2307      	movs	r3, #7
 8008e96:	75fb      	strb	r3, [r7, #23]
	return res;
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	331a      	adds	r3, #26
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fe ffc7 	bl	8007e44 <ld_word>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d109      	bne.n	8008ed6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe ffbc 	bl	8007e44 <ld_word>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	041b      	lsls	r3, r3, #16
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	331a      	adds	r3, #26
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	b292      	uxth	r2, r2
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe ffdf 	bl	8007eba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d109      	bne.n	8008f18 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f103 0214 	add.w	r2, r3, #20
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	0c1b      	lsrs	r3, r3, #16
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f7fe ffd1 	bl	8007eba <st_word>
	}
}
 8008f18:	bf00      	nop
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008f2e:	2100      	movs	r1, #0
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff fe10 	bl	8008b56 <dir_sdi>
 8008f36:	4603      	mov	r3, r0
 8008f38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <dir_find+0x24>
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	e03e      	b.n	8008fc2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6938      	ldr	r0, [r7, #16]
 8008f4c:	f7ff fa2a 	bl	80083a4 <move_window>
 8008f50:	4603      	mov	r3, r0
 8008f52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d12f      	bne.n	8008fba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <dir_find+0x4e>
 8008f68:	2304      	movs	r3, #4
 8008f6a:	75fb      	strb	r3, [r7, #23]
 8008f6c:	e028      	b.n	8008fc0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	330b      	adds	r3, #11
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	330b      	adds	r3, #11
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	f003 0308 	and.w	r3, r3, #8
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <dir_find+0x86>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a18      	ldr	r0, [r3, #32]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3324      	adds	r3, #36	; 0x24
 8008f98:	220b      	movs	r2, #11
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	f7ff f80f 	bl	8007fbe <mem_cmp>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00b      	beq.n	8008fbe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff fe5d 	bl	8008c68 <dir_next>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d0c5      	beq.n	8008f44 <dir_find+0x24>
 8008fb8:	e002      	b.n	8008fc0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008fba:	bf00      	nop
 8008fbc:	e000      	b.n	8008fc0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008fbe:	bf00      	nop

	return res;
 8008fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008fd8:	2101      	movs	r1, #1
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff ff1a 	bl	8008e14 <dir_alloc>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d11c      	bne.n	8009024 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	68b8      	ldr	r0, [r7, #8]
 8008ff2:	f7ff f9d7 	bl	80083a4 <move_window>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d111      	bne.n	8009024 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a1b      	ldr	r3, [r3, #32]
 8009004:	2220      	movs	r2, #32
 8009006:	2100      	movs	r1, #0
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe ffbe 	bl	8007f8a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a18      	ldr	r0, [r3, #32]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3324      	adds	r3, #36	; 0x24
 8009016:	220b      	movs	r2, #11
 8009018:	4619      	mov	r1, r3
 800901a:	f7fe ff95 	bl	8007f48 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2201      	movs	r2, #1
 8009022:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009024:	7bfb      	ldrb	r3, [r7, #15]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3324      	adds	r3, #36	; 0x24
 8009044:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009046:	220b      	movs	r2, #11
 8009048:	2120      	movs	r1, #32
 800904a:	68b8      	ldr	r0, [r7, #8]
 800904c:	f7fe ff9d 	bl	8007f8a <mem_set>
	si = i = 0; ni = 8;
 8009050:	2300      	movs	r3, #0
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	2308      	movs	r3, #8
 800905a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	1c5a      	adds	r2, r3, #1
 8009060:	617a      	str	r2, [r7, #20]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	4413      	add	r3, r2
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800906a:	7ffb      	ldrb	r3, [r7, #31]
 800906c:	2b20      	cmp	r3, #32
 800906e:	d94e      	bls.n	800910e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009070:	7ffb      	ldrb	r3, [r7, #31]
 8009072:	2b2f      	cmp	r3, #47	; 0x2f
 8009074:	d006      	beq.n	8009084 <create_name+0x54>
 8009076:	7ffb      	ldrb	r3, [r7, #31]
 8009078:	2b5c      	cmp	r3, #92	; 0x5c
 800907a:	d110      	bne.n	800909e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800907c:	e002      	b.n	8009084 <create_name+0x54>
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	3301      	adds	r3, #1
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	4413      	add	r3, r2
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b2f      	cmp	r3, #47	; 0x2f
 800908e:	d0f6      	beq.n	800907e <create_name+0x4e>
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	4413      	add	r3, r2
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b5c      	cmp	r3, #92	; 0x5c
 800909a:	d0f0      	beq.n	800907e <create_name+0x4e>
			break;
 800909c:	e038      	b.n	8009110 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800909e:	7ffb      	ldrb	r3, [r7, #31]
 80090a0:	2b2e      	cmp	r3, #46	; 0x2e
 80090a2:	d003      	beq.n	80090ac <create_name+0x7c>
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d30c      	bcc.n	80090c6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	2b0b      	cmp	r3, #11
 80090b0:	d002      	beq.n	80090b8 <create_name+0x88>
 80090b2:	7ffb      	ldrb	r3, [r7, #31]
 80090b4:	2b2e      	cmp	r3, #46	; 0x2e
 80090b6:	d001      	beq.n	80090bc <create_name+0x8c>
 80090b8:	2306      	movs	r3, #6
 80090ba:	e044      	b.n	8009146 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80090bc:	2308      	movs	r3, #8
 80090be:	613b      	str	r3, [r7, #16]
 80090c0:	230b      	movs	r3, #11
 80090c2:	61bb      	str	r3, [r7, #24]
			continue;
 80090c4:	e022      	b.n	800910c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80090c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	da04      	bge.n	80090d8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80090ce:	7ffb      	ldrb	r3, [r7, #31]
 80090d0:	3b80      	subs	r3, #128	; 0x80
 80090d2:	4a1f      	ldr	r2, [pc, #124]	; (8009150 <create_name+0x120>)
 80090d4:	5cd3      	ldrb	r3, [r2, r3]
 80090d6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80090d8:	7ffb      	ldrb	r3, [r7, #31]
 80090da:	4619      	mov	r1, r3
 80090dc:	481d      	ldr	r0, [pc, #116]	; (8009154 <create_name+0x124>)
 80090de:	f7fe ff95 	bl	800800c <chk_chr>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <create_name+0xbc>
 80090e8:	2306      	movs	r3, #6
 80090ea:	e02c      	b.n	8009146 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80090ec:	7ffb      	ldrb	r3, [r7, #31]
 80090ee:	2b60      	cmp	r3, #96	; 0x60
 80090f0:	d905      	bls.n	80090fe <create_name+0xce>
 80090f2:	7ffb      	ldrb	r3, [r7, #31]
 80090f4:	2b7a      	cmp	r3, #122	; 0x7a
 80090f6:	d802      	bhi.n	80090fe <create_name+0xce>
 80090f8:	7ffb      	ldrb	r3, [r7, #31]
 80090fa:	3b20      	subs	r3, #32
 80090fc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	613a      	str	r2, [r7, #16]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	4413      	add	r3, r2
 8009108:	7ffa      	ldrb	r2, [r7, #31]
 800910a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800910c:	e7a6      	b.n	800905c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800910e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	441a      	add	r2, r3
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <create_name+0xf4>
 8009120:	2306      	movs	r3, #6
 8009122:	e010      	b.n	8009146 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2be5      	cmp	r3, #229	; 0xe5
 800912a:	d102      	bne.n	8009132 <create_name+0x102>
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2205      	movs	r2, #5
 8009130:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	330b      	adds	r3, #11
 8009136:	7ffa      	ldrb	r2, [r7, #31]
 8009138:	2a20      	cmp	r2, #32
 800913a:	d801      	bhi.n	8009140 <create_name+0x110>
 800913c:	2204      	movs	r2, #4
 800913e:	e000      	b.n	8009142 <create_name+0x112>
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009144:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009146:	4618      	mov	r0, r3
 8009148:	3720      	adds	r7, #32
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	0800ab50 	.word	0x0800ab50
 8009154:	0800aae8 	.word	0x0800aae8

08009158 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800916c:	e002      	b.n	8009174 <follow_path+0x1c>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	3301      	adds	r3, #1
 8009172:	603b      	str	r3, [r7, #0]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b2f      	cmp	r3, #47	; 0x2f
 800917a:	d0f8      	beq.n	800916e <follow_path+0x16>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b5c      	cmp	r3, #92	; 0x5c
 8009182:	d0f4      	beq.n	800916e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	2200      	movs	r2, #0
 8009188:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b1f      	cmp	r3, #31
 8009190:	d80a      	bhi.n	80091a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2280      	movs	r2, #128	; 0x80
 8009196:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800919a:	2100      	movs	r1, #0
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff fcda 	bl	8008b56 <dir_sdi>
 80091a2:	4603      	mov	r3, r0
 80091a4:	75fb      	strb	r3, [r7, #23]
 80091a6:	e048      	b.n	800923a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80091a8:	463b      	mov	r3, r7
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7ff ff3f 	bl	8009030 <create_name>
 80091b2:	4603      	mov	r3, r0
 80091b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d139      	bne.n	8009230 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff feaf 	bl	8008f20 <dir_find>
 80091c2:	4603      	mov	r3, r0
 80091c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80091cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	2b04      	cmp	r3, #4
 80091d8:	d12c      	bne.n	8009234 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	f003 0304 	and.w	r3, r3, #4
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d127      	bne.n	8009234 <follow_path+0xdc>
 80091e4:	2305      	movs	r3, #5
 80091e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80091e8:	e024      	b.n	8009234 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091ea:	7afb      	ldrb	r3, [r7, #11]
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d121      	bne.n	8009238 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	799b      	ldrb	r3, [r3, #6]
 80091f8:	f003 0310 	and.w	r3, r3, #16
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d102      	bne.n	8009206 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009200:	2305      	movs	r3, #5
 8009202:	75fb      	strb	r3, [r7, #23]
 8009204:	e019      	b.n	800923a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	8992      	ldrh	r2, [r2, #12]
 8009214:	fbb3 f0f2 	udiv	r0, r3, r2
 8009218:	fb02 f200 	mul.w	r2, r2, r0
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	440b      	add	r3, r1
 8009220:	4619      	mov	r1, r3
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7ff fe3d 	bl	8008ea2 <ld_clust>
 8009228:	4602      	mov	r2, r0
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800922e:	e7bb      	b.n	80091a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009230:	bf00      	nop
 8009232:	e002      	b.n	800923a <follow_path+0xe2>
				break;
 8009234:	bf00      	nop
 8009236:	e000      	b.n	800923a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009238:	bf00      	nop
			}
		}
	}

	return res;
 800923a:	7dfb      	ldrb	r3, [r7, #23]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800924c:	f04f 33ff 	mov.w	r3, #4294967295
 8009250:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d031      	beq.n	80092be <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	e002      	b.n	8009268 <get_ldnumber+0x24>
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	3301      	adds	r3, #1
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b20      	cmp	r3, #32
 800926e:	d903      	bls.n	8009278 <get_ldnumber+0x34>
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b3a      	cmp	r3, #58	; 0x3a
 8009276:	d1f4      	bne.n	8009262 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b3a      	cmp	r3, #58	; 0x3a
 800927e:	d11c      	bne.n	80092ba <get_ldnumber+0x76>
			tp = *path;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	60fa      	str	r2, [r7, #12]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	3b30      	subs	r3, #48	; 0x30
 8009290:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b09      	cmp	r3, #9
 8009296:	d80e      	bhi.n	80092b6 <get_ldnumber+0x72>
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	429a      	cmp	r2, r3
 800929e:	d10a      	bne.n	80092b6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d107      	bne.n	80092b6 <get_ldnumber+0x72>
					vol = (int)i;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	3301      	adds	r3, #1
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	e002      	b.n	80092c0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80092ba:	2300      	movs	r3, #0
 80092bc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80092be:	693b      	ldr	r3, [r7, #16]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	70da      	strb	r2, [r3, #3]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f04f 32ff 	mov.w	r2, #4294967295
 80092e2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff f85c 	bl	80083a4 <move_window>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <check_fs+0x2a>
 80092f2:	2304      	movs	r3, #4
 80092f4:	e038      	b.n	8009368 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3334      	adds	r3, #52	; 0x34
 80092fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fda0 	bl	8007e44 <ld_word>
 8009304:	4603      	mov	r3, r0
 8009306:	461a      	mov	r2, r3
 8009308:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800930c:	429a      	cmp	r2, r3
 800930e:	d001      	beq.n	8009314 <check_fs+0x48>
 8009310:	2303      	movs	r3, #3
 8009312:	e029      	b.n	8009368 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800931a:	2be9      	cmp	r3, #233	; 0xe9
 800931c:	d009      	beq.n	8009332 <check_fs+0x66>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009324:	2beb      	cmp	r3, #235	; 0xeb
 8009326:	d11e      	bne.n	8009366 <check_fs+0x9a>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800932e:	2b90      	cmp	r3, #144	; 0x90
 8009330:	d119      	bne.n	8009366 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3334      	adds	r3, #52	; 0x34
 8009336:	3336      	adds	r3, #54	; 0x36
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fd9b 	bl	8007e74 <ld_dword>
 800933e:	4603      	mov	r3, r0
 8009340:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009344:	4a0a      	ldr	r2, [pc, #40]	; (8009370 <check_fs+0xa4>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d101      	bne.n	800934e <check_fs+0x82>
 800934a:	2300      	movs	r3, #0
 800934c:	e00c      	b.n	8009368 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	3334      	adds	r3, #52	; 0x34
 8009352:	3352      	adds	r3, #82	; 0x52
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fd8d 	bl	8007e74 <ld_dword>
 800935a:	4602      	mov	r2, r0
 800935c:	4b05      	ldr	r3, [pc, #20]	; (8009374 <check_fs+0xa8>)
 800935e:	429a      	cmp	r2, r3
 8009360:	d101      	bne.n	8009366 <check_fs+0x9a>
 8009362:	2300      	movs	r3, #0
 8009364:	e000      	b.n	8009368 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009366:	2302      	movs	r3, #2
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	00544146 	.word	0x00544146
 8009374:	33544146 	.word	0x33544146

08009378 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b096      	sub	sp, #88	; 0x58
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff ff59 	bl	8009244 <get_ldnumber>
 8009392:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009396:	2b00      	cmp	r3, #0
 8009398:	da01      	bge.n	800939e <find_volume+0x26>
 800939a:	230b      	movs	r3, #11
 800939c:	e265      	b.n	800986a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800939e:	4ab0      	ldr	r2, [pc, #704]	; (8009660 <find_volume+0x2e8>)
 80093a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80093a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <find_volume+0x3a>
 80093ae:	230c      	movs	r3, #12
 80093b0:	e25b      	b.n	800986a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	f023 0301 	bic.w	r3, r3, #1
 80093be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80093c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01a      	beq.n	80093fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fc9b 	bl	8007d08 <disk_status>
 80093d2:	4603      	mov	r3, r0
 80093d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80093d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10c      	bne.n	80093fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d007      	beq.n	80093fa <find_volume+0x82>
 80093ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80093f6:	230a      	movs	r3, #10
 80093f8:	e237      	b.n	800986a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80093fa:	2300      	movs	r3, #0
 80093fc:	e235      	b.n	800986a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	2200      	movs	r2, #0
 8009402:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009406:	b2da      	uxtb	r2, r3
 8009408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	4618      	mov	r0, r3
 8009412:	f7fe fc93 	bl	8007d3c <disk_initialize>
 8009416:	4603      	mov	r3, r0
 8009418:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800941c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009428:	2303      	movs	r3, #3
 800942a:	e21e      	b.n	800986a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800942c:	79fb      	ldrb	r3, [r7, #7]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d007      	beq.n	8009442 <find_volume+0xca>
 8009432:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009436:	f003 0304 	and.w	r3, r3, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800943e:	230a      	movs	r3, #10
 8009440:	e213      	b.n	800986a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009444:	7858      	ldrb	r0, [r3, #1]
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	330c      	adds	r3, #12
 800944a:	461a      	mov	r2, r3
 800944c:	2102      	movs	r1, #2
 800944e:	f7fe fcdb 	bl	8007e08 <disk_ioctl>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <find_volume+0xe4>
 8009458:	2301      	movs	r3, #1
 800945a:	e206      	b.n	800986a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	899b      	ldrh	r3, [r3, #12]
 8009460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009464:	d80d      	bhi.n	8009482 <find_volume+0x10a>
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	899b      	ldrh	r3, [r3, #12]
 800946a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800946e:	d308      	bcc.n	8009482 <find_volume+0x10a>
 8009470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009472:	899b      	ldrh	r3, [r3, #12]
 8009474:	461a      	mov	r2, r3
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	899b      	ldrh	r3, [r3, #12]
 800947a:	3b01      	subs	r3, #1
 800947c:	4013      	ands	r3, r2
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <find_volume+0x10e>
 8009482:	2301      	movs	r3, #1
 8009484:	e1f1      	b.n	800986a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800948a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800948c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800948e:	f7ff ff1d 	bl	80092cc <check_fs>
 8009492:	4603      	mov	r3, r0
 8009494:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009498:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800949c:	2b02      	cmp	r3, #2
 800949e:	d14b      	bne.n	8009538 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80094a0:	2300      	movs	r3, #0
 80094a2:	643b      	str	r3, [r7, #64]	; 0x40
 80094a4:	e01f      	b.n	80094e6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80094ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ae:	011b      	lsls	r3, r3, #4
 80094b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80094b4:	4413      	add	r3, r2
 80094b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	3304      	adds	r3, #4
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d006      	beq.n	80094d0 <find_volume+0x158>
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	3308      	adds	r3, #8
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe fcd4 	bl	8007e74 <ld_dword>
 80094cc:	4602      	mov	r2, r0
 80094ce:	e000      	b.n	80094d2 <find_volume+0x15a>
 80094d0:	2200      	movs	r2, #0
 80094d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80094da:	440b      	add	r3, r1
 80094dc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80094e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094e2:	3301      	adds	r3, #1
 80094e4:	643b      	str	r3, [r7, #64]	; 0x40
 80094e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d9dc      	bls.n	80094a6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80094ec:	2300      	movs	r3, #0
 80094ee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80094f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <find_volume+0x184>
 80094f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f8:	3b01      	subs	r3, #1
 80094fa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80094fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009504:	4413      	add	r3, r2
 8009506:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800950a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800950c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800950e:	2b00      	cmp	r3, #0
 8009510:	d005      	beq.n	800951e <find_volume+0x1a6>
 8009512:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009514:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009516:	f7ff fed9 	bl	80092cc <check_fs>
 800951a:	4603      	mov	r3, r0
 800951c:	e000      	b.n	8009520 <find_volume+0x1a8>
 800951e:	2303      	movs	r3, #3
 8009520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009528:	2b01      	cmp	r3, #1
 800952a:	d905      	bls.n	8009538 <find_volume+0x1c0>
 800952c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800952e:	3301      	adds	r3, #1
 8009530:	643b      	str	r3, [r7, #64]	; 0x40
 8009532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009534:	2b03      	cmp	r3, #3
 8009536:	d9e1      	bls.n	80094fc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009538:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800953c:	2b04      	cmp	r3, #4
 800953e:	d101      	bne.n	8009544 <find_volume+0x1cc>
 8009540:	2301      	movs	r3, #1
 8009542:	e192      	b.n	800986a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009548:	2b01      	cmp	r3, #1
 800954a:	d901      	bls.n	8009550 <find_volume+0x1d8>
 800954c:	230d      	movs	r3, #13
 800954e:	e18c      	b.n	800986a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009552:	3334      	adds	r3, #52	; 0x34
 8009554:	330b      	adds	r3, #11
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fc74 	bl	8007e44 <ld_word>
 800955c:	4603      	mov	r3, r0
 800955e:	461a      	mov	r2, r3
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	899b      	ldrh	r3, [r3, #12]
 8009564:	429a      	cmp	r2, r3
 8009566:	d001      	beq.n	800956c <find_volume+0x1f4>
 8009568:	230d      	movs	r3, #13
 800956a:	e17e      	b.n	800986a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	3334      	adds	r3, #52	; 0x34
 8009570:	3316      	adds	r3, #22
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fc66 	bl	8007e44 <ld_word>
 8009578:	4603      	mov	r3, r0
 800957a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800957c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d106      	bne.n	8009590 <find_volume+0x218>
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	3334      	adds	r3, #52	; 0x34
 8009586:	3324      	adds	r3, #36	; 0x24
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe fc73 	bl	8007e74 <ld_dword>
 800958e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009594:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800959c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	789b      	ldrb	r3, [r3, #2]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d005      	beq.n	80095b4 <find_volume+0x23c>
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	789b      	ldrb	r3, [r3, #2]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d001      	beq.n	80095b4 <find_volume+0x23c>
 80095b0:	230d      	movs	r3, #13
 80095b2:	e15a      	b.n	800986a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	789b      	ldrb	r3, [r3, #2]
 80095b8:	461a      	mov	r2, r3
 80095ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095bc:	fb02 f303 	mul.w	r3, r2, r3
 80095c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80095ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d0:	895b      	ldrh	r3, [r3, #10]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d008      	beq.n	80095e8 <find_volume+0x270>
 80095d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d8:	895b      	ldrh	r3, [r3, #10]
 80095da:	461a      	mov	r2, r3
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	895b      	ldrh	r3, [r3, #10]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	4013      	ands	r3, r2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <find_volume+0x274>
 80095e8:	230d      	movs	r3, #13
 80095ea:	e13e      	b.n	800986a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	3334      	adds	r3, #52	; 0x34
 80095f0:	3311      	adds	r3, #17
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fc26 	bl	8007e44 <ld_word>
 80095f8:	4603      	mov	r3, r0
 80095fa:	461a      	mov	r2, r3
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	891b      	ldrh	r3, [r3, #8]
 8009604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009606:	8992      	ldrh	r2, [r2, #12]
 8009608:	0952      	lsrs	r2, r2, #5
 800960a:	b292      	uxth	r2, r2
 800960c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009610:	fb02 f201 	mul.w	r2, r2, r1
 8009614:	1a9b      	subs	r3, r3, r2
 8009616:	b29b      	uxth	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <find_volume+0x2a8>
 800961c:	230d      	movs	r3, #13
 800961e:	e124      	b.n	800986a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	3334      	adds	r3, #52	; 0x34
 8009624:	3313      	adds	r3, #19
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fc0c 	bl	8007e44 <ld_word>
 800962c:	4603      	mov	r3, r0
 800962e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <find_volume+0x2cc>
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	3334      	adds	r3, #52	; 0x34
 800963a:	3320      	adds	r3, #32
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fc19 	bl	8007e74 <ld_dword>
 8009642:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009646:	3334      	adds	r3, #52	; 0x34
 8009648:	330e      	adds	r3, #14
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe fbfa 	bl	8007e44 <ld_word>
 8009650:	4603      	mov	r3, r0
 8009652:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009654:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009656:	2b00      	cmp	r3, #0
 8009658:	d104      	bne.n	8009664 <find_volume+0x2ec>
 800965a:	230d      	movs	r3, #13
 800965c:	e105      	b.n	800986a <find_volume+0x4f2>
 800965e:	bf00      	nop
 8009660:	200080c0 	.word	0x200080c0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009664:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009668:	4413      	add	r3, r2
 800966a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800966c:	8911      	ldrh	r1, [r2, #8]
 800966e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009670:	8992      	ldrh	r2, [r2, #12]
 8009672:	0952      	lsrs	r2, r2, #5
 8009674:	b292      	uxth	r2, r2
 8009676:	fbb1 f2f2 	udiv	r2, r1, r2
 800967a:	b292      	uxth	r2, r2
 800967c:	4413      	add	r3, r2
 800967e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	429a      	cmp	r2, r3
 8009686:	d201      	bcs.n	800968c <find_volume+0x314>
 8009688:	230d      	movs	r3, #13
 800968a:	e0ee      	b.n	800986a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800968c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009694:	8952      	ldrh	r2, [r2, #10]
 8009696:	fbb3 f3f2 	udiv	r3, r3, r2
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <find_volume+0x32e>
 80096a2:	230d      	movs	r3, #13
 80096a4:	e0e1      	b.n	800986a <find_volume+0x4f2>
		fmt = FS_FAT32;
 80096a6:	2303      	movs	r3, #3
 80096a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d802      	bhi.n	80096bc <find_volume+0x344>
 80096b6:	2302      	movs	r3, #2
 80096b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	f640 72f5 	movw	r2, #4085	; 0xff5
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d802      	bhi.n	80096cc <find_volume+0x354>
 80096c6:	2301      	movs	r3, #1
 80096c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	1c9a      	adds	r2, r3, #2
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096d8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80096da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096de:	441a      	add	r2, r3
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80096e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	441a      	add	r2, r3
 80096ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ec:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80096ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d11e      	bne.n	8009734 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	3334      	adds	r3, #52	; 0x34
 80096fa:	332a      	adds	r3, #42	; 0x2a
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe fba1 	bl	8007e44 <ld_word>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <find_volume+0x394>
 8009708:	230d      	movs	r3, #13
 800970a:	e0ae      	b.n	800986a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800970c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970e:	891b      	ldrh	r3, [r3, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <find_volume+0x3a0>
 8009714:	230d      	movs	r3, #13
 8009716:	e0a8      	b.n	800986a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	3334      	adds	r3, #52	; 0x34
 800971c:	332c      	adds	r3, #44	; 0x2c
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe fba8 	bl	8007e74 <ld_dword>
 8009724:	4602      	mov	r2, r0
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	647b      	str	r3, [r7, #68]	; 0x44
 8009732:	e01f      	b.n	8009774 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	891b      	ldrh	r3, [r3, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <find_volume+0x3c8>
 800973c:	230d      	movs	r3, #13
 800973e:	e094      	b.n	800986a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009746:	441a      	add	r2, r3
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800974c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009750:	2b02      	cmp	r3, #2
 8009752:	d103      	bne.n	800975c <find_volume+0x3e4>
 8009754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	e00a      	b.n	8009772 <find_volume+0x3fa>
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	699a      	ldr	r2, [r3, #24]
 8009760:	4613      	mov	r3, r2
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	4413      	add	r3, r2
 8009766:	085a      	lsrs	r2, r3, #1
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009772:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	69da      	ldr	r2, [r3, #28]
 8009778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977a:	899b      	ldrh	r3, [r3, #12]
 800977c:	4619      	mov	r1, r3
 800977e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009780:	440b      	add	r3, r1
 8009782:	3b01      	subs	r3, #1
 8009784:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009786:	8989      	ldrh	r1, [r1, #12]
 8009788:	fbb3 f3f1 	udiv	r3, r3, r1
 800978c:	429a      	cmp	r2, r3
 800978e:	d201      	bcs.n	8009794 <find_volume+0x41c>
 8009790:	230d      	movs	r3, #13
 8009792:	e06a      	b.n	800986a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	f04f 32ff 	mov.w	r2, #4294967295
 800979a:	615a      	str	r2, [r3, #20]
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	695a      	ldr	r2, [r3, #20]
 80097a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	2280      	movs	r2, #128	; 0x80
 80097a8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80097aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d149      	bne.n	8009846 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80097b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b4:	3334      	adds	r3, #52	; 0x34
 80097b6:	3330      	adds	r3, #48	; 0x30
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe fb43 	bl	8007e44 <ld_word>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d140      	bne.n	8009846 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80097c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097c6:	3301      	adds	r3, #1
 80097c8:	4619      	mov	r1, r3
 80097ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097cc:	f7fe fdea 	bl	80083a4 <move_window>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d137      	bne.n	8009846 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	2200      	movs	r2, #0
 80097da:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80097dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097de:	3334      	adds	r3, #52	; 0x34
 80097e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fe fb2d 	bl	8007e44 <ld_word>
 80097ea:	4603      	mov	r3, r0
 80097ec:	461a      	mov	r2, r3
 80097ee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d127      	bne.n	8009846 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	3334      	adds	r3, #52	; 0x34
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fb3a 	bl	8007e74 <ld_dword>
 8009800:	4602      	mov	r2, r0
 8009802:	4b1c      	ldr	r3, [pc, #112]	; (8009874 <find_volume+0x4fc>)
 8009804:	429a      	cmp	r2, r3
 8009806:	d11e      	bne.n	8009846 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	3334      	adds	r3, #52	; 0x34
 800980c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fb2f 	bl	8007e74 <ld_dword>
 8009816:	4602      	mov	r2, r0
 8009818:	4b17      	ldr	r3, [pc, #92]	; (8009878 <find_volume+0x500>)
 800981a:	429a      	cmp	r2, r3
 800981c:	d113      	bne.n	8009846 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	3334      	adds	r3, #52	; 0x34
 8009822:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009826:	4618      	mov	r0, r3
 8009828:	f7fe fb24 	bl	8007e74 <ld_dword>
 800982c:	4602      	mov	r2, r0
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009834:	3334      	adds	r3, #52	; 0x34
 8009836:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe fb1a 	bl	8007e74 <ld_dword>
 8009840:	4602      	mov	r2, r0
 8009842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009844:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009848:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800984c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800984e:	4b0b      	ldr	r3, [pc, #44]	; (800987c <find_volume+0x504>)
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	3301      	adds	r3, #1
 8009854:	b29a      	uxth	r2, r3
 8009856:	4b09      	ldr	r3, [pc, #36]	; (800987c <find_volume+0x504>)
 8009858:	801a      	strh	r2, [r3, #0]
 800985a:	4b08      	ldr	r3, [pc, #32]	; (800987c <find_volume+0x504>)
 800985c:	881a      	ldrh	r2, [r3, #0]
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009862:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009864:	f7fe fd36 	bl	80082d4 <clear_lock>
#endif
	return FR_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3758      	adds	r7, #88	; 0x58
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	41615252 	.word	0x41615252
 8009878:	61417272 	.word	0x61417272
 800987c:	200080c4 	.word	0x200080c4

08009880 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800988a:	2309      	movs	r3, #9
 800988c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d01c      	beq.n	80098ce <validate+0x4e>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d018      	beq.n	80098ce <validate+0x4e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d013      	beq.n	80098ce <validate+0x4e>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	889a      	ldrh	r2, [r3, #4]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	88db      	ldrh	r3, [r3, #6]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d10c      	bne.n	80098ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	785b      	ldrb	r3, [r3, #1]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fe fa24 	bl	8007d08 <disk_status>
 80098c0:	4603      	mov	r3, r0
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <validate+0x4e>
			res = FR_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d102      	bne.n	80098da <validate+0x5a>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	e000      	b.n	80098dc <validate+0x5c>
 80098da:	2300      	movs	r3, #0
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	6013      	str	r3, [r2, #0]
	return res;
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4613      	mov	r3, r2
 80098f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80098fe:	f107 0310 	add.w	r3, r7, #16
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff fc9e 	bl	8009244 <get_ldnumber>
 8009908:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	2b00      	cmp	r3, #0
 800990e:	da01      	bge.n	8009914 <f_mount+0x28>
 8009910:	230b      	movs	r3, #11
 8009912:	e02b      	b.n	800996c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009914:	4a17      	ldr	r2, [pc, #92]	; (8009974 <f_mount+0x88>)
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800991c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009924:	69b8      	ldr	r0, [r7, #24]
 8009926:	f7fe fcd5 	bl	80082d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	2200      	movs	r2, #0
 800992e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d002      	beq.n	800993c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	490d      	ldr	r1, [pc, #52]	; (8009974 <f_mount+0x88>)
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <f_mount+0x66>
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d001      	beq.n	8009956 <f_mount+0x6a>
 8009952:	2300      	movs	r3, #0
 8009954:	e00a      	b.n	800996c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009956:	f107 010c 	add.w	r1, r7, #12
 800995a:	f107 0308 	add.w	r3, r7, #8
 800995e:	2200      	movs	r2, #0
 8009960:	4618      	mov	r0, r3
 8009962:	f7ff fd09 	bl	8009378 <find_volume>
 8009966:	4603      	mov	r3, r0
 8009968:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800996a:	7dfb      	ldrb	r3, [r7, #23]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3720      	adds	r7, #32
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	200080c0 	.word	0x200080c0

08009978 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b098      	sub	sp, #96	; 0x60
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <f_open+0x18>
 800998c:	2309      	movs	r3, #9
 800998e:	e1bb      	b.n	8009d08 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009996:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009998:	79fa      	ldrb	r2, [r7, #7]
 800999a:	f107 0110 	add.w	r1, r7, #16
 800999e:	f107 0308 	add.w	r3, r7, #8
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7ff fce8 	bl	8009378 <find_volume>
 80099a8:	4603      	mov	r3, r0
 80099aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80099ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f040 819f 	bne.w	8009cf6 <f_open+0x37e>
		dj.obj.fs = fs;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	f107 0314 	add.w	r3, r7, #20
 80099c2:	4611      	mov	r1, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff fbc7 	bl	8009158 <follow_path>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80099d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d11a      	bne.n	8009a0e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80099d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80099dc:	b25b      	sxtb	r3, r3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	da03      	bge.n	80099ea <f_open+0x72>
				res = FR_INVALID_NAME;
 80099e2:	2306      	movs	r3, #6
 80099e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80099e8:	e011      	b.n	8009a0e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	f023 0301 	bic.w	r3, r3, #1
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bf14      	ite	ne
 80099f4:	2301      	movne	r3, #1
 80099f6:	2300      	moveq	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	f107 0314 	add.w	r3, r7, #20
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fb1e 	bl	8008044 <chk_lock>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009a0e:	79fb      	ldrb	r3, [r7, #7]
 8009a10:	f003 031c 	and.w	r3, r3, #28
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d07f      	beq.n	8009b18 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d017      	beq.n	8009a50 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009a20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a24:	2b04      	cmp	r3, #4
 8009a26:	d10e      	bne.n	8009a46 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009a28:	f7fe fb68 	bl	80080fc <enq_lock>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d006      	beq.n	8009a40 <f_open+0xc8>
 8009a32:	f107 0314 	add.w	r3, r7, #20
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff fac7 	bl	8008fca <dir_register>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	e000      	b.n	8009a42 <f_open+0xca>
 8009a40:	2312      	movs	r3, #18
 8009a42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	f043 0308 	orr.w	r3, r3, #8
 8009a4c:	71fb      	strb	r3, [r7, #7]
 8009a4e:	e010      	b.n	8009a72 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009a50:	7ebb      	ldrb	r3, [r7, #26]
 8009a52:	f003 0311 	and.w	r3, r3, #17
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <f_open+0xea>
					res = FR_DENIED;
 8009a5a:	2307      	movs	r3, #7
 8009a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a60:	e007      	b.n	8009a72 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <f_open+0xfa>
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d168      	bne.n	8009b4c <f_open+0x1d4>
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	f003 0308 	and.w	r3, r3, #8
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d063      	beq.n	8009b4c <f_open+0x1d4>
				dw = GET_FATTIME();
 8009a84:	f7fb f946 	bl	8004d14 <get_fattime>
 8009a88:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8c:	330e      	adds	r3, #14
 8009a8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fa2d 	bl	8007ef0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a98:	3316      	adds	r3, #22
 8009a9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe fa27 	bl	8007ef0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa4:	330b      	adds	r3, #11
 8009aa6:	2220      	movs	r2, #32
 8009aa8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aae:	4611      	mov	r1, r2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff f9f6 	bl	8008ea2 <ld_clust>
 8009ab6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009abc:	2200      	movs	r2, #0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fa0e 	bl	8008ee0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac6:	331c      	adds	r3, #28
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fa10 	bl	8007ef0 <st_dword>
					fs->wflag = 1;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d037      	beq.n	8009b4c <f_open+0x1d4>
						dw = fs->winsect;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009ae2:	f107 0314 	add.w	r3, r7, #20
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe fefe 	bl	80088ec <remove_chain>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009af6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d126      	bne.n	8009b4c <f_open+0x1d4>
							res = move_window(fs, dw);
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fe fc4e 	bl	80083a4 <move_window>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b12:	3a01      	subs	r2, #1
 8009b14:	611a      	str	r2, [r3, #16]
 8009b16:	e019      	b.n	8009b4c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009b18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d115      	bne.n	8009b4c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009b20:	7ebb      	ldrb	r3, [r7, #26]
 8009b22:	f003 0310 	and.w	r3, r3, #16
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d003      	beq.n	8009b32 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009b2a:	2304      	movs	r3, #4
 8009b2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b30:	e00c      	b.n	8009b4c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d007      	beq.n	8009b4c <f_open+0x1d4>
 8009b3c:	7ebb      	ldrb	r3, [r7, #26]
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <f_open+0x1d4>
						res = FR_DENIED;
 8009b46:	2307      	movs	r3, #7
 8009b48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d128      	bne.n	8009ba6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	f003 0308 	and.w	r3, r3, #8
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009b5e:	79fb      	ldrb	r3, [r7, #7]
 8009b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b64:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	f023 0301 	bic.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bf14      	ite	ne
 8009b7e:	2301      	movne	r3, #1
 8009b80:	2300      	moveq	r3, #0
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	461a      	mov	r2, r3
 8009b86:	f107 0314 	add.w	r3, r7, #20
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fe fad7 	bl	8008140 <inc_lock>
 8009b92:	4602      	mov	r2, r0
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <f_open+0x22e>
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f040 80a3 	bne.w	8009cf6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff f973 	bl	8008ea2 <ld_clust>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc4:	331c      	adds	r3, #28
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe f954 	bl	8007e74 <ld_dword>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	88da      	ldrh	r2, [r3, #6]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	79fa      	ldrb	r2, [r7, #7]
 8009bea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3330      	adds	r3, #48	; 0x30
 8009c02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c06:	2100      	movs	r1, #0
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe f9be 	bl	8007f8a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d06e      	beq.n	8009cf6 <f_open+0x37e>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d06a      	beq.n	8009cf6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	68da      	ldr	r2, [r3, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	895b      	ldrh	r3, [r3, #10]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	899b      	ldrh	r3, [r3, #12]
 8009c32:	fb03 f302 	mul.w	r3, r3, r2
 8009c36:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	657b      	str	r3, [r7, #84]	; 0x54
 8009c44:	e016      	b.n	8009c74 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fc67 	bl	800851e <get_fat>
 8009c50:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d802      	bhi.n	8009c5e <f_open+0x2e6>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c64:	d102      	bne.n	8009c6c <f_open+0x2f4>
 8009c66:	2301      	movs	r3, #1
 8009c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	657b      	str	r3, [r7, #84]	; 0x54
 8009c74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d103      	bne.n	8009c84 <f_open+0x30c>
 8009c7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d8e0      	bhi.n	8009c46 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009c8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d131      	bne.n	8009cf6 <f_open+0x37e>
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	899b      	ldrh	r3, [r3, #12]
 8009c96:	461a      	mov	r2, r3
 8009c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c9e:	fb02 f201 	mul.w	r2, r2, r1
 8009ca2:	1a9b      	subs	r3, r3, r2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d026      	beq.n	8009cf6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fc17 	bl	80084e0 <clust2sect>
 8009cb2:	6478      	str	r0, [r7, #68]	; 0x44
 8009cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <f_open+0x34a>
						res = FR_INT_ERR;
 8009cba:	2302      	movs	r3, #2
 8009cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009cc0:	e019      	b.n	8009cf6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	899b      	ldrh	r3, [r3, #12]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cca:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd0:	441a      	add	r2, r3
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	7858      	ldrb	r0, [r3, #1]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a1a      	ldr	r2, [r3, #32]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f7fe f84f 	bl	8007d88 <disk_read>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <f_open+0x37e>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <f_open+0x38c>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3760      	adds	r7, #96	; 0x60
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b08e      	sub	sp, #56	; 0x38
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2200      	movs	r2, #0
 8009d26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f107 0214 	add.w	r2, r7, #20
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff fda5 	bl	8009880 <validate>
 8009d36:	4603      	mov	r3, r0
 8009d38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d107      	bne.n	8009d54 <f_read+0x44>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	7d5b      	ldrb	r3, [r3, #21]
 8009d48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <f_read+0x4a>
 8009d54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d58:	e135      	b.n	8009fc6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	7d1b      	ldrb	r3, [r3, #20]
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <f_read+0x5a>
 8009d66:	2307      	movs	r3, #7
 8009d68:	e12d      	b.n	8009fc6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	68da      	ldr	r2, [r3, #12]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	f240 811e 	bls.w	8009fbc <f_read+0x2ac>
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009d84:	e11a      	b.n	8009fbc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	8992      	ldrh	r2, [r2, #12]
 8009d8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d92:	fb02 f201 	mul.w	r2, r2, r1
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f040 80d5 	bne.w	8009f48 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	8992      	ldrh	r2, [r2, #12]
 8009da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	8952      	ldrh	r2, [r2, #10]
 8009dae:	3a01      	subs	r2, #1
 8009db0:	4013      	ands	r3, r2
 8009db2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d12f      	bne.n	8009e1a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d103      	bne.n	8009dca <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8009dc8:	e013      	b.n	8009df2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7fe fe84 	bl	8008ae6 <clmt_clust>
 8009dde:	6338      	str	r0, [r7, #48]	; 0x30
 8009de0:	e007      	b.n	8009df2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f7fe fb97 	bl	800851e <get_fat>
 8009df0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d804      	bhi.n	8009e02 <f_read+0xf2>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	755a      	strb	r2, [r3, #21]
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e0e1      	b.n	8009fc6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e08:	d104      	bne.n	8009e14 <f_read+0x104>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	755a      	strb	r2, [r3, #21]
 8009e10:	2301      	movs	r3, #1
 8009e12:	e0d8      	b.n	8009fc6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	4619      	mov	r1, r3
 8009e22:	4610      	mov	r0, r2
 8009e24:	f7fe fb5c 	bl	80084e0 <clust2sect>
 8009e28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d104      	bne.n	8009e3a <f_read+0x12a>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2202      	movs	r2, #2
 8009e34:	755a      	strb	r2, [r3, #21]
 8009e36:	2302      	movs	r3, #2
 8009e38:	e0c5      	b.n	8009fc6 <f_read+0x2b6>
			sect += csect;
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	4413      	add	r3, r2
 8009e40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	899b      	ldrh	r3, [r3, #12]
 8009e46:	461a      	mov	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e4e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d041      	beq.n	8009eda <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e56:	69fa      	ldr	r2, [r7, #28]
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	4413      	add	r3, r2
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	8952      	ldrh	r2, [r2, #10]
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d905      	bls.n	8009e70 <f_read+0x160>
					cc = fs->csize - csect;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	895b      	ldrh	r3, [r3, #10]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	7858      	ldrb	r0, [r3, #1]
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	69ba      	ldr	r2, [r7, #24]
 8009e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e7a:	f7fd ff85 	bl	8007d88 <disk_read>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d004      	beq.n	8009e8e <f_read+0x17e>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2201      	movs	r2, #1
 8009e88:	755a      	strb	r2, [r3, #21]
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e09b      	b.n	8009fc6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	7d1b      	ldrb	r3, [r3, #20]
 8009e92:	b25b      	sxtb	r3, r3
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	da18      	bge.n	8009eca <f_read+0x1ba>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6a1a      	ldr	r2, [r3, #32]
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	1ad2      	subs	r2, r2, r3
 8009ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d211      	bcs.n	8009eca <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6a1a      	ldr	r2, [r3, #32]
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	8992      	ldrh	r2, [r2, #12]
 8009eb2:	fb02 f303 	mul.w	r3, r2, r3
 8009eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb8:	18d0      	adds	r0, r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	899b      	ldrh	r3, [r3, #12]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	f7fe f83f 	bl	8007f48 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	899b      	ldrh	r3, [r3, #12]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	fb03 f302 	mul.w	r3, r3, r2
 8009ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009ed8:	e05c      	b.n	8009f94 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6a1a      	ldr	r2, [r3, #32]
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d02e      	beq.n	8009f42 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	7d1b      	ldrb	r3, [r3, #20]
 8009ee8:	b25b      	sxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da18      	bge.n	8009f20 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	7858      	ldrb	r0, [r3, #1]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a1a      	ldr	r2, [r3, #32]
 8009efc:	2301      	movs	r3, #1
 8009efe:	f7fd ff63 	bl	8007dc8 <disk_write>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <f_read+0x202>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	755a      	strb	r2, [r3, #21]
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e059      	b.n	8009fc6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	7d1b      	ldrb	r3, [r3, #20]
 8009f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f1a:	b2da      	uxtb	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	7858      	ldrb	r0, [r3, #1]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	f7fd ff2b 	bl	8007d88 <disk_read>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d004      	beq.n	8009f42 <f_read+0x232>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	755a      	strb	r2, [r3, #21]
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e041      	b.n	8009fc6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	69ba      	ldr	r2, [r7, #24]
 8009f46:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	899b      	ldrh	r3, [r3, #12]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	8992      	ldrh	r2, [r2, #12]
 8009f56:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f5a:	fb02 f201 	mul.w	r2, r2, r1
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	1ac3      	subs	r3, r0, r3
 8009f62:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d901      	bls.n	8009f70 <f_read+0x260>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	8992      	ldrh	r2, [r2, #12]
 8009f7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f82:	fb02 f200 	mul.w	r2, r2, r0
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	440b      	add	r3, r1
 8009f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f90:	f7fd ffda 	bl	8007f48 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f98:	4413      	add	r3, r2
 8009f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	699a      	ldr	r2, [r3, #24]
 8009fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa2:	441a      	add	r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	619a      	str	r2, [r3, #24]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	441a      	add	r2, r3
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f47f aee1 	bne.w	8009d86 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3738      	adds	r7, #56	; 0x38
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b086      	sub	sp, #24
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f107 0208 	add.w	r2, r7, #8
 8009fdc:	4611      	mov	r1, r2
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff fc4e 	bl	8009880 <validate>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d168      	bne.n	800a0c0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	7d1b      	ldrb	r3, [r3, #20]
 8009ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d062      	beq.n	800a0c0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	7d1b      	ldrb	r3, [r3, #20]
 8009ffe:	b25b      	sxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	da15      	bge.n	800a030 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	7858      	ldrb	r0, [r3, #1]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1a      	ldr	r2, [r3, #32]
 800a012:	2301      	movs	r3, #1
 800a014:	f7fd fed8 	bl	8007dc8 <disk_write>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <f_sync+0x54>
 800a01e:	2301      	movs	r3, #1
 800a020:	e04f      	b.n	800a0c2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	7d1b      	ldrb	r3, [r3, #20]
 800a026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a030:	f7fa fe70 	bl	8004d14 <get_fattime>
 800a034:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	4619      	mov	r1, r3
 800a03e:	4610      	mov	r0, r2
 800a040:	f7fe f9b0 	bl	80083a4 <move_window>
 800a044:	4603      	mov	r3, r0
 800a046:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a048:	7dfb      	ldrb	r3, [r7, #23]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d138      	bne.n	800a0c0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a052:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	330b      	adds	r3, #11
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	320b      	adds	r2, #11
 800a05c:	7812      	ldrb	r2, [r2, #0]
 800a05e:	f042 0220 	orr.w	r2, r2, #32
 800a062:	b2d2      	uxtb	r2, r2
 800a064:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	461a      	mov	r2, r3
 800a070:	68f9      	ldr	r1, [r7, #12]
 800a072:	f7fe ff35 	bl	8008ee0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f103 021c 	add.w	r2, r3, #28
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	4619      	mov	r1, r3
 800a082:	4610      	mov	r0, r2
 800a084:	f7fd ff34 	bl	8007ef0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3316      	adds	r3, #22
 800a08c:	6939      	ldr	r1, [r7, #16]
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fd ff2e 	bl	8007ef0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	3312      	adds	r3, #18
 800a098:	2100      	movs	r1, #0
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fd ff0d 	bl	8007eba <st_word>
					fs->wflag = 1;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe f9a9 	bl	8008400 <sync_fs>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	7d1b      	ldrb	r3, [r3, #20]
 800a0b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff ff7b 	bl	8009fce <f_sync>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d118      	bne.n	800a114 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f107 0208 	add.w	r2, r7, #8
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7ff fbc8 	bl	8009880 <validate>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10c      	bne.n	800a114 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe f8ac 	bl	800825c <dec_lock>
 800a104:	4603      	mov	r3, r0
 800a106:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a108:	7bfb      	ldrb	r3, [r7, #15]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d102      	bne.n	800a114 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a114:	7bfb      	ldrb	r3, [r7, #15]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	4613      	mov	r3, r2
 800a12c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a12e:	2301      	movs	r3, #1
 800a130:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a132:	2300      	movs	r3, #0
 800a134:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a136:	4b1f      	ldr	r3, [pc, #124]	; (800a1b4 <FATFS_LinkDriverEx+0x94>)
 800a138:	7a5b      	ldrb	r3, [r3, #9]
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d131      	bne.n	800a1a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a140:	4b1c      	ldr	r3, [pc, #112]	; (800a1b4 <FATFS_LinkDriverEx+0x94>)
 800a142:	7a5b      	ldrb	r3, [r3, #9]
 800a144:	b2db      	uxtb	r3, r3
 800a146:	461a      	mov	r2, r3
 800a148:	4b1a      	ldr	r3, [pc, #104]	; (800a1b4 <FATFS_LinkDriverEx+0x94>)
 800a14a:	2100      	movs	r1, #0
 800a14c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a14e:	4b19      	ldr	r3, [pc, #100]	; (800a1b4 <FATFS_LinkDriverEx+0x94>)
 800a150:	7a5b      	ldrb	r3, [r3, #9]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	4a17      	ldr	r2, [pc, #92]	; (800a1b4 <FATFS_LinkDriverEx+0x94>)
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a15e:	4b15      	ldr	r3, [pc, #84]	; (800a1b4 <FATFS_LinkDriverEx+0x94>)
 800a160:	7a5b      	ldrb	r3, [r3, #9]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	461a      	mov	r2, r3
 800a166:	4b13      	ldr	r3, [pc, #76]	; (800a1b4 <FATFS_LinkDriverEx+0x94>)
 800a168:	4413      	add	r3, r2
 800a16a:	79fa      	ldrb	r2, [r7, #7]
 800a16c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a16e:	4b11      	ldr	r3, [pc, #68]	; (800a1b4 <FATFS_LinkDriverEx+0x94>)
 800a170:	7a5b      	ldrb	r3, [r3, #9]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	b2d1      	uxtb	r1, r2
 800a178:	4a0e      	ldr	r2, [pc, #56]	; (800a1b4 <FATFS_LinkDriverEx+0x94>)
 800a17a:	7251      	strb	r1, [r2, #9]
 800a17c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a17e:	7dbb      	ldrb	r3, [r7, #22]
 800a180:	3330      	adds	r3, #48	; 0x30
 800a182:	b2da      	uxtb	r2, r3
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	3301      	adds	r3, #1
 800a18c:	223a      	movs	r2, #58	; 0x3a
 800a18e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	3302      	adds	r3, #2
 800a194:	222f      	movs	r2, #47	; 0x2f
 800a196:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	3303      	adds	r3, #3
 800a19c:	2200      	movs	r2, #0
 800a19e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	371c      	adds	r7, #28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	200080e8 	.word	0x200080e8

0800a1b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff ffaa 	bl	800a120 <FATFS_LinkDriverEx>
 800a1cc:	4603      	mov	r3, r0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a1dc:	2201      	movs	r2, #1
 800a1de:	490e      	ldr	r1, [pc, #56]	; (800a218 <MX_USB_HOST_Init+0x40>)
 800a1e0:	480e      	ldr	r0, [pc, #56]	; (800a21c <MX_USB_HOST_Init+0x44>)
 800a1e2:	f7fc fa35 	bl	8006650 <USBH_Init>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a1ec:	f7f6 fcbe 	bl	8000b6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800a1f0:	490b      	ldr	r1, [pc, #44]	; (800a220 <MX_USB_HOST_Init+0x48>)
 800a1f2:	480a      	ldr	r0, [pc, #40]	; (800a21c <MX_USB_HOST_Init+0x44>)
 800a1f4:	f7fc faba 	bl	800676c <USBH_RegisterClass>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a1fe:	f7f6 fcb5 	bl	8000b6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a202:	4806      	ldr	r0, [pc, #24]	; (800a21c <MX_USB_HOST_Init+0x44>)
 800a204:	f7fc fb3e 	bl	8006884 <USBH_Start>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a20e:	f7f6 fcad 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a212:	bf00      	nop
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	0800a239 	.word	0x0800a239
 800a21c:	2000d29c 	.word	0x2000d29c
 800a220:	20000010 	.word	0x20000010

0800a224 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a228:	4802      	ldr	r0, [pc, #8]	; (800a234 <MX_USB_HOST_Process+0x10>)
 800a22a:	f7fc fb3b 	bl	80068a4 <USBH_Process>
}
 800a22e:	bf00      	nop
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	2000d29c 	.word	0x2000d29c

0800a238 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	3b01      	subs	r3, #1
 800a248:	2b04      	cmp	r3, #4
 800a24a:	d819      	bhi.n	800a280 <USBH_UserProcess+0x48>
 800a24c:	a201      	add	r2, pc, #4	; (adr r2, 800a254 <USBH_UserProcess+0x1c>)
 800a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a252:	bf00      	nop
 800a254:	0800a281 	.word	0x0800a281
 800a258:	0800a271 	.word	0x0800a271
 800a25c:	0800a281 	.word	0x0800a281
 800a260:	0800a279 	.word	0x0800a279
 800a264:	0800a269 	.word	0x0800a269
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a268:	4b09      	ldr	r3, [pc, #36]	; (800a290 <USBH_UserProcess+0x58>)
 800a26a:	2203      	movs	r2, #3
 800a26c:	701a      	strb	r2, [r3, #0]
  break;
 800a26e:	e008      	b.n	800a282 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a270:	4b07      	ldr	r3, [pc, #28]	; (800a290 <USBH_UserProcess+0x58>)
 800a272:	2202      	movs	r2, #2
 800a274:	701a      	strb	r2, [r3, #0]
  break;
 800a276:	e004      	b.n	800a282 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a278:	4b05      	ldr	r3, [pc, #20]	; (800a290 <USBH_UserProcess+0x58>)
 800a27a:	2201      	movs	r2, #1
 800a27c:	701a      	strb	r2, [r3, #0]
  break;
 800a27e:	e000      	b.n	800a282 <USBH_UserProcess+0x4a>

  default:
  break;
 800a280:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a282:	bf00      	nop
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	200080f4 	.word	0x200080f4

0800a294 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	; 0x28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a29c:	f107 0314 	add.w	r3, r7, #20
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	605a      	str	r2, [r3, #4]
 800a2a6:	609a      	str	r2, [r3, #8]
 800a2a8:	60da      	str	r2, [r3, #12]
 800a2aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2b4:	d147      	bne.n	800a346 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	613b      	str	r3, [r7, #16]
 800a2ba:	4a25      	ldr	r2, [pc, #148]	; (800a350 <HAL_HCD_MspInit+0xbc>)
 800a2bc:	4b24      	ldr	r3, [pc, #144]	; (800a350 <HAL_HCD_MspInit+0xbc>)
 800a2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c0:	f043 0301 	orr.w	r3, r3, #1
 800a2c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a2c6:	4b22      	ldr	r3, [pc, #136]	; (800a350 <HAL_HCD_MspInit+0xbc>)
 800a2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	613b      	str	r3, [r7, #16]
 800a2d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a2d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2e0:	f107 0314 	add.w	r3, r7, #20
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	481b      	ldr	r0, [pc, #108]	; (800a354 <HAL_HCD_MspInit+0xc0>)
 800a2e8:	f7f7 f9ca 	bl	8001680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a2ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a2f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a2fe:	230a      	movs	r3, #10
 800a300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a302:	f107 0314 	add.w	r3, r7, #20
 800a306:	4619      	mov	r1, r3
 800a308:	4812      	ldr	r0, [pc, #72]	; (800a354 <HAL_HCD_MspInit+0xc0>)
 800a30a:	f7f7 f9b9 	bl	8001680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a30e:	4a10      	ldr	r2, [pc, #64]	; (800a350 <HAL_HCD_MspInit+0xbc>)
 800a310:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <HAL_HCD_MspInit+0xbc>)
 800a312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a318:	6353      	str	r3, [r2, #52]	; 0x34
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	4a0c      	ldr	r2, [pc, #48]	; (800a350 <HAL_HCD_MspInit+0xbc>)
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <HAL_HCD_MspInit+0xbc>)
 800a322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a328:	6453      	str	r3, [r2, #68]	; 0x44
 800a32a:	4b09      	ldr	r3, [pc, #36]	; (800a350 <HAL_HCD_MspInit+0xbc>)
 800a32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a336:	2200      	movs	r2, #0
 800a338:	2100      	movs	r1, #0
 800a33a:	2043      	movs	r0, #67	; 0x43
 800a33c:	f7f6 fe21 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a340:	2043      	movs	r0, #67	; 0x43
 800a342:	f7f6 fe3a 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a346:	bf00      	nop
 800a348:	3728      	adds	r7, #40	; 0x28
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	40023800 	.word	0x40023800
 800a354:	40020000 	.word	0x40020000

0800a358 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a366:	4618      	mov	r0, r3
 800a368:	f7fc fe6f 	bl	800704a <USBH_LL_IncTimer>
}
 800a36c:	bf00      	nop
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a382:	4618      	mov	r0, r3
 800a384:	f7fc fea7 	bl	80070d6 <USBH_LL_Connect>
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fc feb0 	bl	8007104 <USBH_LL_Disconnect>
}
 800a3a4:	bf00      	nop
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	70fb      	strb	r3, [r7, #3]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fc fe61 	bl	800709e <USBH_LL_PortEnabled>
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fc fe61 	bl	80070ba <USBH_LL_PortDisabled>
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d12a      	bne.n	800a468 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a412:	4a18      	ldr	r2, [pc, #96]	; (800a474 <USBH_LL_Init+0x74>)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a15      	ldr	r2, [pc, #84]	; (800a474 <USBH_LL_Init+0x74>)
 800a41e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a422:	4b14      	ldr	r3, [pc, #80]	; (800a474 <USBH_LL_Init+0x74>)
 800a424:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a428:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a42a:	4b12      	ldr	r3, [pc, #72]	; (800a474 <USBH_LL_Init+0x74>)
 800a42c:	2208      	movs	r2, #8
 800a42e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a430:	4b10      	ldr	r3, [pc, #64]	; (800a474 <USBH_LL_Init+0x74>)
 800a432:	2201      	movs	r2, #1
 800a434:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a436:	4b0f      	ldr	r3, [pc, #60]	; (800a474 <USBH_LL_Init+0x74>)
 800a438:	2200      	movs	r2, #0
 800a43a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a43c:	4b0d      	ldr	r3, [pc, #52]	; (800a474 <USBH_LL_Init+0x74>)
 800a43e:	2202      	movs	r2, #2
 800a440:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a442:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <USBH_LL_Init+0x74>)
 800a444:	2200      	movs	r2, #0
 800a446:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a448:	480a      	ldr	r0, [pc, #40]	; (800a474 <USBH_LL_Init+0x74>)
 800a44a:	f7f7 fadc 	bl	8001a06 <HAL_HCD_Init>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a454:	f7f6 fb8a 	bl	8000b6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a458:	4806      	ldr	r0, [pc, #24]	; (800a474 <USBH_LL_Init+0x74>)
 800a45a:	f7f7 fec0 	bl	80021de <HAL_HCD_GetCurrentFrame>
 800a45e:	4603      	mov	r3, r0
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7fc fde2 	bl	800702c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	2000d674 	.word	0x2000d674

0800a478 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a48e:	4618      	mov	r0, r3
 800a490:	f7f7 fe2f 	bl	80020f2 <HAL_HCD_Start>
 800a494:	4603      	mov	r3, r0
 800a496:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 f98a 	bl	800a7b4 <USBH_Get_USB_Status>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7f7 fe37 	bl	8002138 <HAL_HCD_Stop>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4ce:	7bfb      	ldrb	r3, [r7, #15]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 f96f 	bl	800a7b4 <USBH_Get_USB_Status>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f7 fe7f 	bl	80021fa <HAL_HCD_GetCurrentSpeed>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d007      	beq.n	800a512 <USBH_LL_GetSpeed+0x2e>
 800a502:	2b01      	cmp	r3, #1
 800a504:	d302      	bcc.n	800a50c <USBH_LL_GetSpeed+0x28>
 800a506:	2b02      	cmp	r3, #2
 800a508:	d006      	beq.n	800a518 <USBH_LL_GetSpeed+0x34>
 800a50a:	e008      	b.n	800a51e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
    break;
 800a510:	e008      	b.n	800a524 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a512:	2301      	movs	r3, #1
 800a514:	73fb      	strb	r3, [r7, #15]
    break;
 800a516:	e005      	b.n	800a524 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a518:	2302      	movs	r3, #2
 800a51a:	73fb      	strb	r3, [r7, #15]
    break;
 800a51c:	e002      	b.n	800a524 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800a51e:	2301      	movs	r3, #1
 800a520:	73fb      	strb	r3, [r7, #15]
    break;
 800a522:	bf00      	nop
  }
  return  speed;
 800a524:	7bfb      	ldrb	r3, [r7, #15]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a544:	4618      	mov	r0, r3
 800a546:	f7f7 fe14 	bl	8002172 <HAL_HCD_ResetPort>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
 800a550:	4618      	mov	r0, r3
 800a552:	f000 f92f 	bl	800a7b4 <USBH_Get_USB_Status>
 800a556:	4603      	mov	r3, r0
 800a558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a576:	78fa      	ldrb	r2, [r7, #3]
 800a578:	4611      	mov	r1, r2
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7f7 fe1b 	bl	80021b6 <HAL_HCD_HC_GetXferCount>
 800a580:	4603      	mov	r3, r0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a58a:	b590      	push	{r4, r7, lr}
 800a58c:	b089      	sub	sp, #36	; 0x24
 800a58e:	af04      	add	r7, sp, #16
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	4608      	mov	r0, r1
 800a594:	4611      	mov	r1, r2
 800a596:	461a      	mov	r2, r3
 800a598:	4603      	mov	r3, r0
 800a59a:	70fb      	strb	r3, [r7, #3]
 800a59c:	460b      	mov	r3, r1
 800a59e:	70bb      	strb	r3, [r7, #2]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a5b2:	787c      	ldrb	r4, [r7, #1]
 800a5b4:	78ba      	ldrb	r2, [r7, #2]
 800a5b6:	78f9      	ldrb	r1, [r7, #3]
 800a5b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a5ba:	9302      	str	r3, [sp, #8]
 800a5bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	f7f7 fa7e 	bl	8001aca <HAL_HCD_HC_Init>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 f8ed 	bl	800a7b4 <USBH_Get_USB_Status>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd90      	pop	{r4, r7, pc}

0800a5e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a602:	78fa      	ldrb	r2, [r7, #3]
 800a604:	4611      	mov	r1, r2
 800a606:	4618      	mov	r0, r3
 800a608:	f7f7 faee 	bl	8001be8 <HAL_HCD_HC_Halt>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	4618      	mov	r0, r3
 800a614:	f000 f8ce 	bl	800a7b4 <USBH_Get_USB_Status>
 800a618:	4603      	mov	r3, r0
 800a61a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a626:	b590      	push	{r4, r7, lr}
 800a628:	b089      	sub	sp, #36	; 0x24
 800a62a:	af04      	add	r7, sp, #16
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	4608      	mov	r0, r1
 800a630:	4611      	mov	r1, r2
 800a632:	461a      	mov	r2, r3
 800a634:	4603      	mov	r3, r0
 800a636:	70fb      	strb	r3, [r7, #3]
 800a638:	460b      	mov	r3, r1
 800a63a:	70bb      	strb	r3, [r7, #2]
 800a63c:	4613      	mov	r3, r2
 800a63e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a64e:	787c      	ldrb	r4, [r7, #1]
 800a650:	78ba      	ldrb	r2, [r7, #2]
 800a652:	78f9      	ldrb	r1, [r7, #3]
 800a654:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a658:	9303      	str	r3, [sp, #12]
 800a65a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a65c:	9302      	str	r3, [sp, #8]
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	9301      	str	r3, [sp, #4]
 800a662:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	4623      	mov	r3, r4
 800a66a:	f7f7 fae1 	bl	8001c30 <HAL_HCD_HC_SubmitRequest>
 800a66e:	4603      	mov	r3, r0
 800a670:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a672:	7bfb      	ldrb	r3, [r7, #15]
 800a674:	4618      	mov	r0, r3
 800a676:	f000 f89d 	bl	800a7b4 <USBH_Get_USB_Status>
 800a67a:	4603      	mov	r3, r0
 800a67c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	bd90      	pop	{r4, r7, pc}

0800a688 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a69a:	78fa      	ldrb	r2, [r7, #3]
 800a69c:	4611      	mov	r1, r2
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7f7 fd75 	bl	800218e <HAL_HCD_HC_GetURBState>
 800a6a4:	4603      	mov	r3, r0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d103      	bne.n	800a6cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 f8a0 	bl	800a80c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a6cc:	20c8      	movs	r0, #200	; 0xc8
 800a6ce:	f7f6 fb5d 	bl	8000d8c <HAL_Delay>
  return USBH_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70fb      	strb	r3, [r7, #3]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a6f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	212c      	movs	r1, #44	; 0x2c
 800a6fa:	fb01 f303 	mul.w	r3, r1, r3
 800a6fe:	4413      	add	r3, r2
 800a700:	333b      	adds	r3, #59	; 0x3b
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d009      	beq.n	800a71c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a708:	78fb      	ldrb	r3, [r7, #3]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	212c      	movs	r1, #44	; 0x2c
 800a70e:	fb01 f303 	mul.w	r3, r1, r3
 800a712:	4413      	add	r3, r2
 800a714:	3354      	adds	r3, #84	; 0x54
 800a716:	78ba      	ldrb	r2, [r7, #2]
 800a718:	701a      	strb	r2, [r3, #0]
 800a71a:	e008      	b.n	800a72e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	212c      	movs	r1, #44	; 0x2c
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	4413      	add	r3, r2
 800a728:	3355      	adds	r3, #85	; 0x55
 800a72a:	78ba      	ldrb	r2, [r7, #2]
 800a72c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a752:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	212c      	movs	r1, #44	; 0x2c
 800a75a:	fb01 f303 	mul.w	r3, r1, r3
 800a75e:	4413      	add	r3, r2
 800a760:	333b      	adds	r3, #59	; 0x3b
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d009      	beq.n	800a77c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	212c      	movs	r1, #44	; 0x2c
 800a76e:	fb01 f303 	mul.w	r3, r1, r3
 800a772:	4413      	add	r3, r2
 800a774:	3354      	adds	r3, #84	; 0x54
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	73fb      	strb	r3, [r7, #15]
 800a77a:	e008      	b.n	800a78e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	212c      	movs	r1, #44	; 0x2c
 800a782:	fb01 f303 	mul.w	r3, r1, r3
 800a786:	4413      	add	r3, r2
 800a788:	3355      	adds	r3, #85	; 0x55
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7f6 faf1 	bl	8000d8c <HAL_Delay>
}
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d817      	bhi.n	800a7f8 <USBH_Get_USB_Status+0x44>
 800a7c8:	a201      	add	r2, pc, #4	; (adr r2, 800a7d0 <USBH_Get_USB_Status+0x1c>)
 800a7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ce:	bf00      	nop
 800a7d0:	0800a7e1 	.word	0x0800a7e1
 800a7d4:	0800a7e7 	.word	0x0800a7e7
 800a7d8:	0800a7ed 	.word	0x0800a7ed
 800a7dc:	0800a7f3 	.word	0x0800a7f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e4:	e00b      	b.n	800a7fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ea:	e008      	b.n	800a7fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f0:	e005      	b.n	800a7fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f6:	e002      	b.n	800a7fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fc:	bf00      	nop
  }
  return usb_status;
 800a7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 1)
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d102      	bne.n	800a826 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a820:	2301      	movs	r3, #1
 800a822:	73fb      	strb	r3, [r7, #15]
 800a824:	e001      	b.n	800a82a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_0,(GPIO_PinState)data);
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
 800a82c:	461a      	mov	r2, r3
 800a82e:	2101      	movs	r1, #1
 800a830:	4803      	ldr	r0, [pc, #12]	; (800a840 <MX_DriverVbusFS+0x34>)
 800a832:	f7f7 f8cf 	bl	80019d4 <HAL_GPIO_WritePin>
}
 800a836:	bf00      	nop
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	40022000 	.word	0x40022000

0800a844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a87c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a848:	480d      	ldr	r0, [pc, #52]	; (800a880 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a84a:	490e      	ldr	r1, [pc, #56]	; (800a884 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a84c:	4a0e      	ldr	r2, [pc, #56]	; (800a888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a84e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a850:	e002      	b.n	800a858 <LoopCopyDataInit>

0800a852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a856:	3304      	adds	r3, #4

0800a858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a85a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a85c:	d3f9      	bcc.n	800a852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a85e:	4a0b      	ldr	r2, [pc, #44]	; (800a88c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a860:	4c0b      	ldr	r4, [pc, #44]	; (800a890 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a862:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a864:	e001      	b.n	800a86a <LoopFillZerobss>

0800a866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a868:	3204      	adds	r2, #4

0800a86a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a86a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a86c:	d3fb      	bcc.n	800a866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a86e:	f7f6 fa09 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a872:	f000 f817 	bl	800a8a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a876:	f7f5 fef3 	bl	8000660 <main>
  bx  lr    
 800a87a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a87c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800a880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a884:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800a888:	0800abe0 	.word	0x0800abe0
  ldr r2, =_sbss
 800a88c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800a890:	2000d97c 	.word	0x2000d97c

0800a894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a894:	e7fe      	b.n	800a894 <ADC_IRQHandler>
	...

0800a898 <__errno>:
 800a898:	4b01      	ldr	r3, [pc, #4]	; (800a8a0 <__errno+0x8>)
 800a89a:	6818      	ldr	r0, [r3, #0]
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	20000030 	.word	0x20000030

0800a8a4 <__libc_init_array>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	4e0d      	ldr	r6, [pc, #52]	; (800a8dc <__libc_init_array+0x38>)
 800a8a8:	4c0d      	ldr	r4, [pc, #52]	; (800a8e0 <__libc_init_array+0x3c>)
 800a8aa:	1ba4      	subs	r4, r4, r6
 800a8ac:	10a4      	asrs	r4, r4, #2
 800a8ae:	2500      	movs	r5, #0
 800a8b0:	42a5      	cmp	r5, r4
 800a8b2:	d109      	bne.n	800a8c8 <__libc_init_array+0x24>
 800a8b4:	4e0b      	ldr	r6, [pc, #44]	; (800a8e4 <__libc_init_array+0x40>)
 800a8b6:	4c0c      	ldr	r4, [pc, #48]	; (800a8e8 <__libc_init_array+0x44>)
 800a8b8:	f000 f8fa 	bl	800aab0 <_init>
 800a8bc:	1ba4      	subs	r4, r4, r6
 800a8be:	10a4      	asrs	r4, r4, #2
 800a8c0:	2500      	movs	r5, #0
 800a8c2:	42a5      	cmp	r5, r4
 800a8c4:	d105      	bne.n	800a8d2 <__libc_init_array+0x2e>
 800a8c6:	bd70      	pop	{r4, r5, r6, pc}
 800a8c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8cc:	4798      	blx	r3
 800a8ce:	3501      	adds	r5, #1
 800a8d0:	e7ee      	b.n	800a8b0 <__libc_init_array+0xc>
 800a8d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8d6:	4798      	blx	r3
 800a8d8:	3501      	adds	r5, #1
 800a8da:	e7f2      	b.n	800a8c2 <__libc_init_array+0x1e>
 800a8dc:	0800abd8 	.word	0x0800abd8
 800a8e0:	0800abd8 	.word	0x0800abd8
 800a8e4:	0800abd8 	.word	0x0800abd8
 800a8e8:	0800abdc 	.word	0x0800abdc

0800a8ec <malloc>:
 800a8ec:	4b02      	ldr	r3, [pc, #8]	; (800a8f8 <malloc+0xc>)
 800a8ee:	4601      	mov	r1, r0
 800a8f0:	6818      	ldr	r0, [r3, #0]
 800a8f2:	f000 b86d 	b.w	800a9d0 <_malloc_r>
 800a8f6:	bf00      	nop
 800a8f8:	20000030 	.word	0x20000030

0800a8fc <free>:
 800a8fc:	4b02      	ldr	r3, [pc, #8]	; (800a908 <free+0xc>)
 800a8fe:	4601      	mov	r1, r0
 800a900:	6818      	ldr	r0, [r3, #0]
 800a902:	f000 b817 	b.w	800a934 <_free_r>
 800a906:	bf00      	nop
 800a908:	20000030 	.word	0x20000030

0800a90c <memcpy>:
 800a90c:	b510      	push	{r4, lr}
 800a90e:	1e43      	subs	r3, r0, #1
 800a910:	440a      	add	r2, r1
 800a912:	4291      	cmp	r1, r2
 800a914:	d100      	bne.n	800a918 <memcpy+0xc>
 800a916:	bd10      	pop	{r4, pc}
 800a918:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a91c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a920:	e7f7      	b.n	800a912 <memcpy+0x6>

0800a922 <memset>:
 800a922:	4402      	add	r2, r0
 800a924:	4603      	mov	r3, r0
 800a926:	4293      	cmp	r3, r2
 800a928:	d100      	bne.n	800a92c <memset+0xa>
 800a92a:	4770      	bx	lr
 800a92c:	f803 1b01 	strb.w	r1, [r3], #1
 800a930:	e7f9      	b.n	800a926 <memset+0x4>
	...

0800a934 <_free_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4605      	mov	r5, r0
 800a938:	2900      	cmp	r1, #0
 800a93a:	d045      	beq.n	800a9c8 <_free_r+0x94>
 800a93c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a940:	1f0c      	subs	r4, r1, #4
 800a942:	2b00      	cmp	r3, #0
 800a944:	bfb8      	it	lt
 800a946:	18e4      	addlt	r4, r4, r3
 800a948:	f000 f8b0 	bl	800aaac <__malloc_lock>
 800a94c:	4a1f      	ldr	r2, [pc, #124]	; (800a9cc <_free_r+0x98>)
 800a94e:	6813      	ldr	r3, [r2, #0]
 800a950:	4610      	mov	r0, r2
 800a952:	b933      	cbnz	r3, 800a962 <_free_r+0x2e>
 800a954:	6063      	str	r3, [r4, #4]
 800a956:	6014      	str	r4, [r2, #0]
 800a958:	4628      	mov	r0, r5
 800a95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a95e:	f000 b8a6 	b.w	800aaae <__malloc_unlock>
 800a962:	42a3      	cmp	r3, r4
 800a964:	d90c      	bls.n	800a980 <_free_r+0x4c>
 800a966:	6821      	ldr	r1, [r4, #0]
 800a968:	1862      	adds	r2, r4, r1
 800a96a:	4293      	cmp	r3, r2
 800a96c:	bf04      	itt	eq
 800a96e:	681a      	ldreq	r2, [r3, #0]
 800a970:	685b      	ldreq	r3, [r3, #4]
 800a972:	6063      	str	r3, [r4, #4]
 800a974:	bf04      	itt	eq
 800a976:	1852      	addeq	r2, r2, r1
 800a978:	6022      	streq	r2, [r4, #0]
 800a97a:	6004      	str	r4, [r0, #0]
 800a97c:	e7ec      	b.n	800a958 <_free_r+0x24>
 800a97e:	4613      	mov	r3, r2
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	b10a      	cbz	r2, 800a988 <_free_r+0x54>
 800a984:	42a2      	cmp	r2, r4
 800a986:	d9fa      	bls.n	800a97e <_free_r+0x4a>
 800a988:	6819      	ldr	r1, [r3, #0]
 800a98a:	1858      	adds	r0, r3, r1
 800a98c:	42a0      	cmp	r0, r4
 800a98e:	d10b      	bne.n	800a9a8 <_free_r+0x74>
 800a990:	6820      	ldr	r0, [r4, #0]
 800a992:	4401      	add	r1, r0
 800a994:	1858      	adds	r0, r3, r1
 800a996:	4282      	cmp	r2, r0
 800a998:	6019      	str	r1, [r3, #0]
 800a99a:	d1dd      	bne.n	800a958 <_free_r+0x24>
 800a99c:	6810      	ldr	r0, [r2, #0]
 800a99e:	6852      	ldr	r2, [r2, #4]
 800a9a0:	605a      	str	r2, [r3, #4]
 800a9a2:	4401      	add	r1, r0
 800a9a4:	6019      	str	r1, [r3, #0]
 800a9a6:	e7d7      	b.n	800a958 <_free_r+0x24>
 800a9a8:	d902      	bls.n	800a9b0 <_free_r+0x7c>
 800a9aa:	230c      	movs	r3, #12
 800a9ac:	602b      	str	r3, [r5, #0]
 800a9ae:	e7d3      	b.n	800a958 <_free_r+0x24>
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	1821      	adds	r1, r4, r0
 800a9b4:	428a      	cmp	r2, r1
 800a9b6:	bf04      	itt	eq
 800a9b8:	6811      	ldreq	r1, [r2, #0]
 800a9ba:	6852      	ldreq	r2, [r2, #4]
 800a9bc:	6062      	str	r2, [r4, #4]
 800a9be:	bf04      	itt	eq
 800a9c0:	1809      	addeq	r1, r1, r0
 800a9c2:	6021      	streq	r1, [r4, #0]
 800a9c4:	605c      	str	r4, [r3, #4]
 800a9c6:	e7c7      	b.n	800a958 <_free_r+0x24>
 800a9c8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ca:	bf00      	nop
 800a9cc:	200080f8 	.word	0x200080f8

0800a9d0 <_malloc_r>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	1ccd      	adds	r5, r1, #3
 800a9d4:	f025 0503 	bic.w	r5, r5, #3
 800a9d8:	3508      	adds	r5, #8
 800a9da:	2d0c      	cmp	r5, #12
 800a9dc:	bf38      	it	cc
 800a9de:	250c      	movcc	r5, #12
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	db01      	blt.n	800a9ea <_malloc_r+0x1a>
 800a9e6:	42a9      	cmp	r1, r5
 800a9e8:	d903      	bls.n	800a9f2 <_malloc_r+0x22>
 800a9ea:	230c      	movs	r3, #12
 800a9ec:	6033      	str	r3, [r6, #0]
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	bd70      	pop	{r4, r5, r6, pc}
 800a9f2:	f000 f85b 	bl	800aaac <__malloc_lock>
 800a9f6:	4a23      	ldr	r2, [pc, #140]	; (800aa84 <_malloc_r+0xb4>)
 800a9f8:	6814      	ldr	r4, [r2, #0]
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	b991      	cbnz	r1, 800aa24 <_malloc_r+0x54>
 800a9fe:	4c22      	ldr	r4, [pc, #136]	; (800aa88 <_malloc_r+0xb8>)
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	b91b      	cbnz	r3, 800aa0c <_malloc_r+0x3c>
 800aa04:	4630      	mov	r0, r6
 800aa06:	f000 f841 	bl	800aa8c <_sbrk_r>
 800aa0a:	6020      	str	r0, [r4, #0]
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f000 f83c 	bl	800aa8c <_sbrk_r>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d126      	bne.n	800aa66 <_malloc_r+0x96>
 800aa18:	230c      	movs	r3, #12
 800aa1a:	6033      	str	r3, [r6, #0]
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	f000 f846 	bl	800aaae <__malloc_unlock>
 800aa22:	e7e4      	b.n	800a9ee <_malloc_r+0x1e>
 800aa24:	680b      	ldr	r3, [r1, #0]
 800aa26:	1b5b      	subs	r3, r3, r5
 800aa28:	d41a      	bmi.n	800aa60 <_malloc_r+0x90>
 800aa2a:	2b0b      	cmp	r3, #11
 800aa2c:	d90f      	bls.n	800aa4e <_malloc_r+0x7e>
 800aa2e:	600b      	str	r3, [r1, #0]
 800aa30:	50cd      	str	r5, [r1, r3]
 800aa32:	18cc      	adds	r4, r1, r3
 800aa34:	4630      	mov	r0, r6
 800aa36:	f000 f83a 	bl	800aaae <__malloc_unlock>
 800aa3a:	f104 000b 	add.w	r0, r4, #11
 800aa3e:	1d23      	adds	r3, r4, #4
 800aa40:	f020 0007 	bic.w	r0, r0, #7
 800aa44:	1ac3      	subs	r3, r0, r3
 800aa46:	d01b      	beq.n	800aa80 <_malloc_r+0xb0>
 800aa48:	425a      	negs	r2, r3
 800aa4a:	50e2      	str	r2, [r4, r3]
 800aa4c:	bd70      	pop	{r4, r5, r6, pc}
 800aa4e:	428c      	cmp	r4, r1
 800aa50:	bf0d      	iteet	eq
 800aa52:	6863      	ldreq	r3, [r4, #4]
 800aa54:	684b      	ldrne	r3, [r1, #4]
 800aa56:	6063      	strne	r3, [r4, #4]
 800aa58:	6013      	streq	r3, [r2, #0]
 800aa5a:	bf18      	it	ne
 800aa5c:	460c      	movne	r4, r1
 800aa5e:	e7e9      	b.n	800aa34 <_malloc_r+0x64>
 800aa60:	460c      	mov	r4, r1
 800aa62:	6849      	ldr	r1, [r1, #4]
 800aa64:	e7ca      	b.n	800a9fc <_malloc_r+0x2c>
 800aa66:	1cc4      	adds	r4, r0, #3
 800aa68:	f024 0403 	bic.w	r4, r4, #3
 800aa6c:	42a0      	cmp	r0, r4
 800aa6e:	d005      	beq.n	800aa7c <_malloc_r+0xac>
 800aa70:	1a21      	subs	r1, r4, r0
 800aa72:	4630      	mov	r0, r6
 800aa74:	f000 f80a 	bl	800aa8c <_sbrk_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d0cd      	beq.n	800aa18 <_malloc_r+0x48>
 800aa7c:	6025      	str	r5, [r4, #0]
 800aa7e:	e7d9      	b.n	800aa34 <_malloc_r+0x64>
 800aa80:	bd70      	pop	{r4, r5, r6, pc}
 800aa82:	bf00      	nop
 800aa84:	200080f8 	.word	0x200080f8
 800aa88:	200080fc 	.word	0x200080fc

0800aa8c <_sbrk_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4c06      	ldr	r4, [pc, #24]	; (800aaa8 <_sbrk_r+0x1c>)
 800aa90:	2300      	movs	r3, #0
 800aa92:	4605      	mov	r5, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	6023      	str	r3, [r4, #0]
 800aa98:	f7f6 f8c8 	bl	8000c2c <_sbrk>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_sbrk_r+0x1a>
 800aaa0:	6823      	ldr	r3, [r4, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_sbrk_r+0x1a>
 800aaa4:	602b      	str	r3, [r5, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	2000d978 	.word	0x2000d978

0800aaac <__malloc_lock>:
 800aaac:	4770      	bx	lr

0800aaae <__malloc_unlock>:
 800aaae:	4770      	bx	lr

0800aab0 <_init>:
 800aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab2:	bf00      	nop
 800aab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab6:	bc08      	pop	{r3}
 800aab8:	469e      	mov	lr, r3
 800aaba:	4770      	bx	lr

0800aabc <_fini>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	bf00      	nop
 800aac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac2:	bc08      	pop	{r3}
 800aac4:	469e      	mov	lr, r3
 800aac6:	4770      	bx	lr
